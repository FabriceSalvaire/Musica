# ./musicxml.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e92452c8d3e28a9e27abfc9994d2007779e7f4c9
# Generated 2017-10-09 18:48:41.313927 by PyXB version 1.2.6 using Python 3.6.2.final.0
# Namespace AbsentNamespace0

from __future__ import unicode_literals
import pyxb
from pyxb.binding.datatypes import positiveInteger as p_positiveInteger
from pyxb.binding.basis import complexTypeDefinition as p_complexTypeDefinition
from pyxb.binding.basis import element as p_element
from pyxb.binding.basis import enumeration_mixin as p_enumeration_mixin
from pyxb.binding.content import AttributeUse as p_AttributeUse
from pyxb.binding.content import ElementDeclaration as p_ElementDeclaration
from pyxb.binding.content import ElementUse as p_ElementUse
from pyxb.binding.datatypes import ID as p_ID
from pyxb.binding.datatypes import IDREF as p_IDREF
from pyxb.binding.datatypes import NMTOKEN as p_NMTOKEN
from pyxb.binding.datatypes import anySimpleType as p_anySimpleType
from pyxb.binding.datatypes import anyType as p_anyType
from pyxb.binding.datatypes import decimal as p_decimal
from pyxb.binding.datatypes import integer as p_integer
from pyxb.binding.datatypes import nonNegativeInteger as p_nonNegativeInteger
from pyxb.binding.datatypes import string as p_string
from pyxb.binding.datatypes import token as p_token
from pyxb.binding.facets import CF_enumeration as p_CF_enumeration
from pyxb.binding.facets import CF_maxInclusive as p_CF_maxInclusive
from pyxb.binding.facets import CF_minExclusive as p_CF_minExclusive
from pyxb.binding.facets import CF_minInclusive as p_CF_minInclusive
from pyxb.namespace import ExpandedName as p_ExpandedName
from pyxb.utils.utility import Location as p_Location
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:b41e9400-ad11-11e7-be22-185e0f77ec0a')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes
import pyxb.binding.xml_
import _xlink as _ImportedBinding__xlink

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.CreateAbsentNamespace()
Namespace.configureCategories(['typeBinding', 'elementBinding'])
_Namespace_xlink = _ImportedBinding__xlink.Namespace
_Namespace_xlink.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return p_element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: above-below
class above_below (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'above-below')
    _XSDLocation = p_Location('musicxml.xsd', 28, 1)
    _Documentation = ''
above_below._CF_enumeration = p_CF_enumeration(value_datatype=above_below, enum_prefix=None)
above_below.above = above_below._CF_enumeration.addEnumeration(unicode_value='above', tag='above')
above_below.below = above_below._CF_enumeration.addEnumeration(unicode_value='below', tag='below')
above_below._InitializeFacetMap(above_below._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'above-below', above_below)
_module_typeBindings.above_below = above_below

# Atomic simple type: beam-level
class beam_level (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'beam-level')
    _XSDLocation = p_Location('musicxml.xsd', 38, 1)
    _Documentation = ''
beam_level._CF_minInclusive = p_CF_minInclusive(value_datatype=beam_level, value=p_positiveInteger(1))
beam_level._CF_maxInclusive = p_CF_maxInclusive(value_datatype=beam_level, value=p_positiveInteger(8))
beam_level._InitializeFacetMap(beam_level._CF_minInclusive,
   beam_level._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'beam-level', beam_level)
_module_typeBindings.beam_level = beam_level

# Atomic simple type: color
class color (p_token):


    _ExpandedName = p_ExpandedName(Namespace, 'color')
    _XSDLocation = p_Location('musicxml.xsd', 48, 1)
    _Documentation = ''
color._CF_pattern = pyxb.binding.facets.CF_pattern()
color._CF_pattern.addPattern(pattern='#[\\dA-F]{6}([\\dA-F][\\dA-F])?')
color._InitializeFacetMap(color._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'color', color)
_module_typeBindings.color = color

# Atomic simple type: comma-separated-text
class comma_separated_text (p_token):


    _ExpandedName = p_ExpandedName(Namespace, 'comma-separated-text')
    _XSDLocation = p_Location('musicxml.xsd', 61, 1)
    _Documentation = ''
comma_separated_text._CF_pattern = pyxb.binding.facets.CF_pattern()
comma_separated_text._CF_pattern.addPattern(pattern='[^,]+(, ?[^,]+)*')
comma_separated_text._InitializeFacetMap(comma_separated_text._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'comma-separated-text', comma_separated_text)
_module_typeBindings.comma_separated_text = comma_separated_text

# Atomic simple type: css-font-size
class css_font_size (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'css-font-size')
    _XSDLocation = p_Location('musicxml.xsd', 70, 1)
    _Documentation = ''
css_font_size._CF_enumeration = p_CF_enumeration(value_datatype=css_font_size, enum_prefix=None)
css_font_size.xx_small = css_font_size._CF_enumeration.addEnumeration(unicode_value='xx-small', tag='xx_small')
css_font_size.x_small = css_font_size._CF_enumeration.addEnumeration(unicode_value='x-small', tag='x_small')
css_font_size.small = css_font_size._CF_enumeration.addEnumeration(unicode_value='small', tag='small')
css_font_size.medium = css_font_size._CF_enumeration.addEnumeration(unicode_value='medium', tag='medium')
css_font_size.large = css_font_size._CF_enumeration.addEnumeration(unicode_value='large', tag='large')
css_font_size.x_large = css_font_size._CF_enumeration.addEnumeration(unicode_value='x-large', tag='x_large')
css_font_size.xx_large = css_font_size._CF_enumeration.addEnumeration(unicode_value='xx-large', tag='xx_large')
css_font_size._InitializeFacetMap(css_font_size._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'css-font-size', css_font_size)
_module_typeBindings.css_font_size = css_font_size

# Atomic simple type: divisions
class divisions (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'divisions')
    _XSDLocation = p_Location('musicxml.xsd', 85, 1)
    _Documentation = ''
divisions._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'divisions', divisions)
_module_typeBindings.divisions = divisions

# Atomic simple type: enclosure-shape
class enclosure_shape (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'enclosure-shape')
    _XSDLocation = p_Location('musicxml.xsd', 92, 1)
    _Documentation = ''
enclosure_shape._CF_enumeration = p_CF_enumeration(value_datatype=enclosure_shape, enum_prefix=None)
enclosure_shape.rectangle = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='rectangle', tag='rectangle')
enclosure_shape.square = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='square', tag='square')
enclosure_shape.oval = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='oval', tag='oval')
enclosure_shape.circle = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='circle', tag='circle')
enclosure_shape.bracket = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='bracket', tag='bracket')
enclosure_shape.triangle = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='triangle', tag='triangle')
enclosure_shape.diamond = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='diamond', tag='diamond')
enclosure_shape.none = enclosure_shape._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
enclosure_shape._InitializeFacetMap(enclosure_shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'enclosure-shape', enclosure_shape)
_module_typeBindings.enclosure_shape = enclosure_shape

# Atomic simple type: fermata-shape
class fermata_shape (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'fermata-shape')
    _XSDLocation = p_Location('musicxml.xsd', 108, 1)
    _Documentation = ''
fermata_shape._CF_enumeration = p_CF_enumeration(value_datatype=fermata_shape, enum_prefix=None)
fermata_shape.normal = fermata_shape._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
fermata_shape.angled = fermata_shape._CF_enumeration.addEnumeration(unicode_value='angled', tag='angled')
fermata_shape.square = fermata_shape._CF_enumeration.addEnumeration(unicode_value='square', tag='square')
fermata_shape.emptyString = fermata_shape._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
fermata_shape._InitializeFacetMap(fermata_shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'fermata-shape', fermata_shape)
_module_typeBindings.fermata_shape = fermata_shape

# Atomic simple type: font-style
class font_style (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'font-style')
    _XSDLocation = p_Location('musicxml.xsd', 127, 1)
    _Documentation = ''
font_style._CF_enumeration = p_CF_enumeration(value_datatype=font_style, enum_prefix=None)
font_style.normal = font_style._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
font_style.italic = font_style._CF_enumeration.addEnumeration(unicode_value='italic', tag='italic')
font_style._InitializeFacetMap(font_style._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'font-style', font_style)
_module_typeBindings.font_style = font_style

# Atomic simple type: font-weight
class font_weight (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'font-weight')
    _XSDLocation = p_Location('musicxml.xsd', 137, 1)
    _Documentation = ''
font_weight._CF_enumeration = p_CF_enumeration(value_datatype=font_weight, enum_prefix=None)
font_weight.normal = font_weight._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
font_weight.bold = font_weight._CF_enumeration.addEnumeration(unicode_value='bold', tag='bold')
font_weight._InitializeFacetMap(font_weight._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'font-weight', font_weight)
_module_typeBindings.font_weight = font_weight

# Atomic simple type: left-center-right
class left_center_right (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'left-center-right')
    _XSDLocation = p_Location('musicxml.xsd', 147, 1)
    _Documentation = ''
left_center_right._CF_enumeration = p_CF_enumeration(value_datatype=left_center_right, enum_prefix=None)
left_center_right.left = left_center_right._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
left_center_right.center = left_center_right._CF_enumeration.addEnumeration(unicode_value='center', tag='center')
left_center_right.right = left_center_right._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
left_center_right._InitializeFacetMap(left_center_right._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'left-center-right', left_center_right)
_module_typeBindings.left_center_right = left_center_right

# Atomic simple type: left-right
class left_right (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'left-right')
    _XSDLocation = p_Location('musicxml.xsd', 158, 1)
    _Documentation = ''
left_right._CF_enumeration = p_CF_enumeration(value_datatype=left_right, enum_prefix=None)
left_right.left = left_right._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
left_right.right = left_right._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
left_right._InitializeFacetMap(left_right._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'left-right', left_right)
_module_typeBindings.left_right = left_right

# Atomic simple type: line-shape
class line_shape (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'line-shape')
    _XSDLocation = p_Location('musicxml.xsd', 168, 1)
    _Documentation = ''
line_shape._CF_enumeration = p_CF_enumeration(value_datatype=line_shape, enum_prefix=None)
line_shape.straight = line_shape._CF_enumeration.addEnumeration(unicode_value='straight', tag='straight')
line_shape.curved = line_shape._CF_enumeration.addEnumeration(unicode_value='curved', tag='curved')
line_shape._InitializeFacetMap(line_shape._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'line-shape', line_shape)
_module_typeBindings.line_shape = line_shape

# Atomic simple type: line-type
class line_type (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'line-type')
    _XSDLocation = p_Location('musicxml.xsd', 178, 1)
    _Documentation = ''
line_type._CF_enumeration = p_CF_enumeration(value_datatype=line_type, enum_prefix=None)
line_type.solid = line_type._CF_enumeration.addEnumeration(unicode_value='solid', tag='solid')
line_type.dashed = line_type._CF_enumeration.addEnumeration(unicode_value='dashed', tag='dashed')
line_type.dotted = line_type._CF_enumeration.addEnumeration(unicode_value='dotted', tag='dotted')
line_type.wavy = line_type._CF_enumeration.addEnumeration(unicode_value='wavy', tag='wavy')
line_type._InitializeFacetMap(line_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'line-type', line_type)
_module_typeBindings.line_type = line_type

# Atomic simple type: midi-16
class midi_16 (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'midi-16')
    _XSDLocation = p_Location('musicxml.xsd', 190, 1)
    _Documentation = ''
midi_16._CF_minInclusive = p_CF_minInclusive(value_datatype=midi_16, value=p_positiveInteger(1))
midi_16._CF_maxInclusive = p_CF_maxInclusive(value_datatype=midi_16, value=p_positiveInteger(16))
midi_16._InitializeFacetMap(midi_16._CF_minInclusive,
   midi_16._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'midi-16', midi_16)
_module_typeBindings.midi_16 = midi_16

# Atomic simple type: midi-128
class midi_128 (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'midi-128')
    _XSDLocation = p_Location('musicxml.xsd', 200, 1)
    _Documentation = ''
midi_128._CF_minInclusive = p_CF_minInclusive(value_datatype=midi_128, value=p_positiveInteger(1))
midi_128._CF_maxInclusive = p_CF_maxInclusive(value_datatype=midi_128, value=p_positiveInteger(128))
midi_128._InitializeFacetMap(midi_128._CF_minInclusive,
   midi_128._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'midi-128', midi_128)
_module_typeBindings.midi_128 = midi_128

# Atomic simple type: midi-16384
class midi_16384 (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'midi-16384')
    _XSDLocation = p_Location('musicxml.xsd', 210, 1)
    _Documentation = ''
midi_16384._CF_minInclusive = p_CF_minInclusive(value_datatype=midi_16384, value=p_positiveInteger(1))
midi_16384._CF_maxInclusive = p_CF_maxInclusive(value_datatype=midi_16384, value=p_positiveInteger(16384))
midi_16384._InitializeFacetMap(midi_16384._CF_minInclusive,
   midi_16384._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'midi-16384', midi_16384)
_module_typeBindings.midi_16384 = midi_16384

# Atomic simple type: mute
class mute (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'mute')
    _XSDLocation = p_Location('musicxml.xsd', 220, 1)
    _Documentation = ''
mute._CF_enumeration = p_CF_enumeration(value_datatype=mute, enum_prefix=None)
mute.on = mute._CF_enumeration.addEnumeration(unicode_value='on', tag='on')
mute.off = mute._CF_enumeration.addEnumeration(unicode_value='off', tag='off')
mute.straight = mute._CF_enumeration.addEnumeration(unicode_value='straight', tag='straight')
mute.cup = mute._CF_enumeration.addEnumeration(unicode_value='cup', tag='cup')
mute.harmon_no_stem = mute._CF_enumeration.addEnumeration(unicode_value='harmon-no-stem', tag='harmon_no_stem')
mute.harmon_stem = mute._CF_enumeration.addEnumeration(unicode_value='harmon-stem', tag='harmon_stem')
mute.bucket = mute._CF_enumeration.addEnumeration(unicode_value='bucket', tag='bucket')
mute.plunger = mute._CF_enumeration.addEnumeration(unicode_value='plunger', tag='plunger')
mute.hat = mute._CF_enumeration.addEnumeration(unicode_value='hat', tag='hat')
mute.solotone = mute._CF_enumeration.addEnumeration(unicode_value='solotone', tag='solotone')
mute.practice = mute._CF_enumeration.addEnumeration(unicode_value='practice', tag='practice')
mute.stop_mute = mute._CF_enumeration.addEnumeration(unicode_value='stop-mute', tag='stop_mute')
mute.stop_hand = mute._CF_enumeration.addEnumeration(unicode_value='stop-hand', tag='stop_hand')
mute.echo = mute._CF_enumeration.addEnumeration(unicode_value='echo', tag='echo')
mute.palm = mute._CF_enumeration.addEnumeration(unicode_value='palm', tag='palm')
mute._InitializeFacetMap(mute._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'mute', mute)
_module_typeBindings.mute = mute

# Atomic simple type: non-negative-decimal
class non_negative_decimal (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'non-negative-decimal')
    _XSDLocation = p_Location('musicxml.xsd', 243, 1)
    _Documentation = ''
non_negative_decimal._CF_minInclusive = p_CF_minInclusive(value_datatype=non_negative_decimal, value=p_decimal('0.0'))
non_negative_decimal._InitializeFacetMap(non_negative_decimal._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'non-negative-decimal', non_negative_decimal)
_module_typeBindings.non_negative_decimal = non_negative_decimal

# Atomic simple type: number-level
class number_level (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'number-level')
    _XSDLocation = p_Location('musicxml.xsd', 252, 1)
    _Documentation = ''
number_level._CF_minInclusive = p_CF_minInclusive(value_datatype=number_level, value=p_positiveInteger(1))
number_level._CF_maxInclusive = p_CF_maxInclusive(value_datatype=number_level, value=p_positiveInteger(6))
number_level._InitializeFacetMap(number_level._CF_minInclusive,
   number_level._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'number-level', number_level)
_module_typeBindings.number_level = number_level

# Atomic simple type: number-of-lines
class number_of_lines (p_nonNegativeInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'number-of-lines')
    _XSDLocation = p_Location('musicxml.xsd', 262, 1)
    _Documentation = ''
number_of_lines._CF_minInclusive = p_CF_minInclusive(value_datatype=number_of_lines, value=p_nonNegativeInteger(0))
number_of_lines._CF_maxInclusive = p_CF_maxInclusive(value_datatype=number_of_lines, value=p_nonNegativeInteger(3))
number_of_lines._InitializeFacetMap(number_of_lines._CF_minInclusive,
   number_of_lines._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'number-of-lines', number_of_lines)
_module_typeBindings.number_of_lines = number_of_lines

# Atomic simple type: [anonymous]
class STD_ANON (p_token, p_enumeration_mixin):


    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 277, 3)
    _Documentation = ''
STD_ANON._CF_enumeration = p_CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.normal = STD_ANON._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: over-under
class over_under (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'over-under')
    _XSDLocation = p_Location('musicxml.xsd', 285, 1)
    _Documentation = ''
over_under._CF_enumeration = p_CF_enumeration(value_datatype=over_under, enum_prefix=None)
over_under.over = over_under._CF_enumeration.addEnumeration(unicode_value='over', tag='over')
over_under.under = over_under._CF_enumeration.addEnumeration(unicode_value='under', tag='under')
over_under._InitializeFacetMap(over_under._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'over-under', over_under)
_module_typeBindings.over_under = over_under

# Atomic simple type: percent
class percent (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'percent')
    _XSDLocation = p_Location('musicxml.xsd', 295, 1)
    _Documentation = ''
percent._CF_minInclusive = p_CF_minInclusive(value_datatype=percent, value=p_decimal('0.0'))
percent._CF_maxInclusive = p_CF_maxInclusive(value_datatype=percent, value=p_decimal('100.0'))
percent._InitializeFacetMap(percent._CF_minInclusive,
   percent._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'percent', percent)
_module_typeBindings.percent = percent

# Atomic simple type: positive-decimal
class positive_decimal (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'positive-decimal')
    _XSDLocation = p_Location('musicxml.xsd', 305, 1)
    _Documentation = ''
positive_decimal._CF_minExclusive = p_CF_minExclusive(value_datatype=p_decimal, value=p_anySimpleType('0'))
positive_decimal._InitializeFacetMap(positive_decimal._CF_minExclusive)
Namespace.addCategoryObject('typeBinding', 'positive-decimal', positive_decimal)
_module_typeBindings.positive_decimal = positive_decimal

# Atomic simple type: [anonymous]
class STD_ANON_ (p_string, p_enumeration_mixin):


    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 328, 3)
    _Documentation = ''
STD_ANON_._CF_enumeration = p_CF_enumeration(value_datatype=STD_ANON_, enum_prefix=None)
STD_ANON_.emptyString = STD_ANON_._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
STD_ANON_._InitializeFacetMap(STD_ANON_._CF_enumeration)
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: rotation-degrees
class rotation_degrees (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'rotation-degrees')
    _XSDLocation = p_Location('musicxml.xsd', 336, 1)
    _Documentation = ''
rotation_degrees._CF_minInclusive = p_CF_minInclusive(value_datatype=rotation_degrees, value=p_decimal('-180.0'))
rotation_degrees._CF_maxInclusive = p_CF_maxInclusive(value_datatype=rotation_degrees, value=p_decimal('180.0'))
rotation_degrees._InitializeFacetMap(rotation_degrees._CF_minInclusive,
   rotation_degrees._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'rotation-degrees', rotation_degrees)
_module_typeBindings.rotation_degrees = rotation_degrees

# Atomic simple type: semi-pitched
class semi_pitched (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'semi-pitched')
    _XSDLocation = p_Location('musicxml.xsd', 346, 1)
    _Documentation = ''
semi_pitched._CF_enumeration = p_CF_enumeration(value_datatype=semi_pitched, enum_prefix=None)
semi_pitched.high = semi_pitched._CF_enumeration.addEnumeration(unicode_value='high', tag='high')
semi_pitched.medium_high = semi_pitched._CF_enumeration.addEnumeration(unicode_value='medium-high', tag='medium_high')
semi_pitched.medium = semi_pitched._CF_enumeration.addEnumeration(unicode_value='medium', tag='medium')
semi_pitched.medium_low = semi_pitched._CF_enumeration.addEnumeration(unicode_value='medium-low', tag='medium_low')
semi_pitched.low = semi_pitched._CF_enumeration.addEnumeration(unicode_value='low', tag='low')
semi_pitched.very_low = semi_pitched._CF_enumeration.addEnumeration(unicode_value='very-low', tag='very_low')
semi_pitched._InitializeFacetMap(semi_pitched._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'semi-pitched', semi_pitched)
_module_typeBindings.semi_pitched = semi_pitched

# Atomic simple type: start-note
class start_note (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'start-note')
    _XSDLocation = p_Location('musicxml.xsd', 360, 1)
    _Documentation = ''
start_note._CF_enumeration = p_CF_enumeration(value_datatype=start_note, enum_prefix=None)
start_note.upper = start_note._CF_enumeration.addEnumeration(unicode_value='upper', tag='upper')
start_note.main = start_note._CF_enumeration.addEnumeration(unicode_value='main', tag='main')
start_note.below = start_note._CF_enumeration.addEnumeration(unicode_value='below', tag='below')
start_note._InitializeFacetMap(start_note._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'start-note', start_note)
_module_typeBindings.start_note = start_note

# Atomic simple type: start-stop
class start_stop (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'start-stop')
    _XSDLocation = p_Location('musicxml.xsd', 371, 1)
    _Documentation = ''
start_stop._CF_enumeration = p_CF_enumeration(value_datatype=start_stop, enum_prefix=None)
start_stop.start = start_stop._CF_enumeration.addEnumeration(unicode_value='start', tag='start')
start_stop.stop = start_stop._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
start_stop._InitializeFacetMap(start_stop._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'start-stop', start_stop)
_module_typeBindings.start_stop = start_stop

# Atomic simple type: start-stop-continue
class start_stop_continue (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'start-stop-continue')
    _XSDLocation = p_Location('musicxml.xsd', 383, 1)
    _Documentation = ''
start_stop_continue._CF_enumeration = p_CF_enumeration(value_datatype=start_stop_continue, enum_prefix=None)
start_stop_continue.start = start_stop_continue._CF_enumeration.addEnumeration(unicode_value='start', tag='start')
start_stop_continue.stop = start_stop_continue._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
start_stop_continue.continue_ = start_stop_continue._CF_enumeration.addEnumeration(unicode_value='continue', tag='continue_')
start_stop_continue._InitializeFacetMap(start_stop_continue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'start-stop-continue', start_stop_continue)
_module_typeBindings.start_stop_continue = start_stop_continue

# Atomic simple type: start-stop-single
class start_stop_single (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'start-stop-single')
    _XSDLocation = p_Location('musicxml.xsd', 396, 1)
    _Documentation = ''
start_stop_single._CF_enumeration = p_CF_enumeration(value_datatype=start_stop_single, enum_prefix=None)
start_stop_single.start = start_stop_single._CF_enumeration.addEnumeration(unicode_value='start', tag='start')
start_stop_single.stop = start_stop_single._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
start_stop_single.single = start_stop_single._CF_enumeration.addEnumeration(unicode_value='single', tag='single')
start_stop_single._InitializeFacetMap(start_stop_single._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'start-stop-single', start_stop_single)
_module_typeBindings.start_stop_single = start_stop_single

# Atomic simple type: string-number
class string_number (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'string-number')
    _XSDLocation = p_Location('musicxml.xsd', 407, 1)
    _Documentation = ''
string_number._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'string-number', string_number)
_module_typeBindings.string_number = string_number

# Atomic simple type: symbol-size
class symbol_size (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'symbol-size')
    _XSDLocation = p_Location('musicxml.xsd', 414, 1)
    _Documentation = ''
symbol_size._CF_enumeration = p_CF_enumeration(value_datatype=symbol_size, enum_prefix=None)
symbol_size.full = symbol_size._CF_enumeration.addEnumeration(unicode_value='full', tag='full')
symbol_size.cue = symbol_size._CF_enumeration.addEnumeration(unicode_value='cue', tag='cue')
symbol_size.large = symbol_size._CF_enumeration.addEnumeration(unicode_value='large', tag='large')
symbol_size._InitializeFacetMap(symbol_size._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'symbol-size', symbol_size)
_module_typeBindings.symbol_size = symbol_size

# Atomic simple type: tenths
class tenths (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'tenths')
    _XSDLocation = p_Location('musicxml.xsd', 425, 1)
    _Documentation = ''
tenths._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'tenths', tenths)
_module_typeBindings.tenths = tenths

# Atomic simple type: text-direction
class text_direction (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'text-direction')
    _XSDLocation = p_Location('musicxml.xsd', 434, 1)
    _Documentation = ''
text_direction._CF_enumeration = p_CF_enumeration(value_datatype=text_direction, enum_prefix=None)
text_direction.ltr = text_direction._CF_enumeration.addEnumeration(unicode_value='ltr', tag='ltr')
text_direction.rtl = text_direction._CF_enumeration.addEnumeration(unicode_value='rtl', tag='rtl')
text_direction.lro = text_direction._CF_enumeration.addEnumeration(unicode_value='lro', tag='lro')
text_direction.rlo = text_direction._CF_enumeration.addEnumeration(unicode_value='rlo', tag='rlo')
text_direction._InitializeFacetMap(text_direction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'text-direction', text_direction)
_module_typeBindings.text_direction = text_direction

# Atomic simple type: time-only
class time_only (p_token):


    _ExpandedName = p_ExpandedName(Namespace, 'time-only')
    _XSDLocation = p_Location('musicxml.xsd', 446, 1)
    _Documentation = ''
time_only._CF_pattern = pyxb.binding.facets.CF_pattern()
time_only._CF_pattern.addPattern(pattern='[1-9][0-9]*(, ?[1-9][0-9]*)*')
time_only._InitializeFacetMap(time_only._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'time-only', time_only)
_module_typeBindings.time_only = time_only

# Atomic simple type: top-bottom
class top_bottom (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'top-bottom')
    _XSDLocation = p_Location('musicxml.xsd', 455, 1)
    _Documentation = ''
top_bottom._CF_enumeration = p_CF_enumeration(value_datatype=top_bottom, enum_prefix=None)
top_bottom.top = top_bottom._CF_enumeration.addEnumeration(unicode_value='top', tag='top')
top_bottom.bottom = top_bottom._CF_enumeration.addEnumeration(unicode_value='bottom', tag='bottom')
top_bottom._InitializeFacetMap(top_bottom._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'top-bottom', top_bottom)
_module_typeBindings.top_bottom = top_bottom

# Atomic simple type: trill-beats
class trill_beats (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'trill-beats')
    _XSDLocation = p_Location('musicxml.xsd', 465, 1)
    _Documentation = ''
trill_beats._CF_minInclusive = p_CF_minInclusive(value_datatype=trill_beats, value=p_decimal('2.0'))
trill_beats._InitializeFacetMap(trill_beats._CF_minInclusive)
Namespace.addCategoryObject('typeBinding', 'trill-beats', trill_beats)
_module_typeBindings.trill_beats = trill_beats

# Atomic simple type: trill-step
class trill_step (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'trill-step')
    _XSDLocation = p_Location('musicxml.xsd', 474, 1)
    _Documentation = ''
trill_step._CF_enumeration = p_CF_enumeration(value_datatype=trill_step, enum_prefix=None)
trill_step.whole = trill_step._CF_enumeration.addEnumeration(unicode_value='whole', tag='whole')
trill_step.half = trill_step._CF_enumeration.addEnumeration(unicode_value='half', tag='half')
trill_step.unison = trill_step._CF_enumeration.addEnumeration(unicode_value='unison', tag='unison')
trill_step._InitializeFacetMap(trill_step._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'trill-step', trill_step)
_module_typeBindings.trill_step = trill_step

# Atomic simple type: two-note-turn
class two_note_turn (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'two-note-turn')
    _XSDLocation = p_Location('musicxml.xsd', 485, 1)
    _Documentation = ''
two_note_turn._CF_enumeration = p_CF_enumeration(value_datatype=two_note_turn, enum_prefix=None)
two_note_turn.whole = two_note_turn._CF_enumeration.addEnumeration(unicode_value='whole', tag='whole')
two_note_turn.half = two_note_turn._CF_enumeration.addEnumeration(unicode_value='half', tag='half')
two_note_turn.none = two_note_turn._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
two_note_turn._InitializeFacetMap(two_note_turn._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'two-note-turn', two_note_turn)
_module_typeBindings.two_note_turn = two_note_turn

# Atomic simple type: up-down
class up_down (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'up-down')
    _XSDLocation = p_Location('musicxml.xsd', 496, 1)
    _Documentation = ''
up_down._CF_enumeration = p_CF_enumeration(value_datatype=up_down, enum_prefix=None)
up_down.up = up_down._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
up_down.down = up_down._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
up_down._InitializeFacetMap(up_down._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'up-down', up_down)
_module_typeBindings.up_down = up_down

# Atomic simple type: upright-inverted
class upright_inverted (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'upright-inverted')
    _XSDLocation = p_Location('musicxml.xsd', 506, 1)
    _Documentation = ''
upright_inverted._CF_enumeration = p_CF_enumeration(value_datatype=upright_inverted, enum_prefix=None)
upright_inverted.upright = upright_inverted._CF_enumeration.addEnumeration(unicode_value='upright', tag='upright')
upright_inverted.inverted = upright_inverted._CF_enumeration.addEnumeration(unicode_value='inverted', tag='inverted')
upright_inverted._InitializeFacetMap(upright_inverted._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'upright-inverted', upright_inverted)
_module_typeBindings.upright_inverted = upright_inverted

# Atomic simple type: valign
class valign (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'valign')
    _XSDLocation = p_Location('musicxml.xsd', 516, 1)
    _Documentation = ''
valign._CF_enumeration = p_CF_enumeration(value_datatype=valign, enum_prefix=None)
valign.top = valign._CF_enumeration.addEnumeration(unicode_value='top', tag='top')
valign.middle = valign._CF_enumeration.addEnumeration(unicode_value='middle', tag='middle')
valign.bottom = valign._CF_enumeration.addEnumeration(unicode_value='bottom', tag='bottom')
valign.baseline = valign._CF_enumeration.addEnumeration(unicode_value='baseline', tag='baseline')
valign._InitializeFacetMap(valign._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'valign', valign)
_module_typeBindings.valign = valign

# Atomic simple type: valign-image
class valign_image (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'valign-image')
    _XSDLocation = p_Location('musicxml.xsd', 528, 1)
    _Documentation = ''
valign_image._CF_enumeration = p_CF_enumeration(value_datatype=valign_image, enum_prefix=None)
valign_image.top = valign_image._CF_enumeration.addEnumeration(unicode_value='top', tag='top')
valign_image.middle = valign_image._CF_enumeration.addEnumeration(unicode_value='middle', tag='middle')
valign_image.bottom = valign_image._CF_enumeration.addEnumeration(unicode_value='bottom', tag='bottom')
valign_image._InitializeFacetMap(valign_image._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'valign-image', valign_image)
_module_typeBindings.valign_image = valign_image

# Atomic simple type: yes-no
class yes_no (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'yes-no')
    _XSDLocation = p_Location('musicxml.xsd', 539, 1)
    _Documentation = ''
yes_no._CF_enumeration = p_CF_enumeration(value_datatype=yes_no, enum_prefix=None)
yes_no.yes = yes_no._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
yes_no.no = yes_no._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
yes_no._InitializeFacetMap(yes_no._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'yes-no', yes_no)
_module_typeBindings.yes_no = yes_no

# Atomic simple type: yyyy-mm-dd
class yyyy_mm_dd (pyxb.binding.datatypes.date):


    _ExpandedName = p_ExpandedName(Namespace, 'yyyy-mm-dd')
    _XSDLocation = p_Location('musicxml.xsd', 556, 1)
    _Documentation = ''
yyyy_mm_dd._CF_pattern = pyxb.binding.facets.CF_pattern()
yyyy_mm_dd._CF_pattern.addPattern(pattern='[^:Z]*')
yyyy_mm_dd._InitializeFacetMap(yyyy_mm_dd._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'yyyy-mm-dd', yyyy_mm_dd)
_module_typeBindings.yyyy_mm_dd = yyyy_mm_dd

# Atomic simple type: cancel-location
class cancel_location (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'cancel-location')
    _XSDLocation = p_Location('musicxml.xsd', 567, 1)
    _Documentation = ''
cancel_location._CF_enumeration = p_CF_enumeration(value_datatype=cancel_location, enum_prefix=None)
cancel_location.left = cancel_location._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
cancel_location.right = cancel_location._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
cancel_location.before_barline = cancel_location._CF_enumeration.addEnumeration(unicode_value='before-barline', tag='before_barline')
cancel_location._InitializeFacetMap(cancel_location._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'cancel-location', cancel_location)
_module_typeBindings.cancel_location = cancel_location

# Atomic simple type: clef-sign
class clef_sign (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'clef-sign')
    _XSDLocation = p_Location('musicxml.xsd', 578, 1)
    _Documentation = ''
clef_sign._CF_enumeration = p_CF_enumeration(value_datatype=clef_sign, enum_prefix=None)
clef_sign.G = clef_sign._CF_enumeration.addEnumeration(unicode_value='G', tag='G')
clef_sign.F = clef_sign._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
clef_sign.C = clef_sign._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
clef_sign.percussion = clef_sign._CF_enumeration.addEnumeration(unicode_value='percussion', tag='percussion')
clef_sign.TAB = clef_sign._CF_enumeration.addEnumeration(unicode_value='TAB', tag='TAB')
clef_sign.jianpu = clef_sign._CF_enumeration.addEnumeration(unicode_value='jianpu', tag='jianpu')
clef_sign.none = clef_sign._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
clef_sign._InitializeFacetMap(clef_sign._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'clef-sign', clef_sign)
_module_typeBindings.clef_sign = clef_sign

# Atomic simple type: fifths
class fifths (p_integer):


    _ExpandedName = p_ExpandedName(Namespace, 'fifths')
    _XSDLocation = p_Location('musicxml.xsd', 593, 1)
    _Documentation = ''
fifths._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'fifths', fifths)
_module_typeBindings.fifths = fifths

# Atomic simple type: mode
class mode (p_string):


    _ExpandedName = p_ExpandedName(Namespace, 'mode')
    _XSDLocation = p_Location('musicxml.xsd', 600, 1)
    _Documentation = ''
mode._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'mode', mode)
_module_typeBindings.mode = mode

# Atomic simple type: show-frets
class show_frets (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'show-frets')
    _XSDLocation = p_Location('musicxml.xsd', 607, 1)
    _Documentation = ''
show_frets._CF_enumeration = p_CF_enumeration(value_datatype=show_frets, enum_prefix=None)
show_frets.numbers = show_frets._CF_enumeration.addEnumeration(unicode_value='numbers', tag='numbers')
show_frets.letters = show_frets._CF_enumeration.addEnumeration(unicode_value='letters', tag='letters')
show_frets._InitializeFacetMap(show_frets._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'show-frets', show_frets)
_module_typeBindings.show_frets = show_frets

# Atomic simple type: staff-line
class staff_line (p_integer):


    _ExpandedName = p_ExpandedName(Namespace, 'staff-line')
    _XSDLocation = p_Location('musicxml.xsd', 617, 1)
    _Documentation = ''
staff_line._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'staff-line', staff_line)
_module_typeBindings.staff_line = staff_line

# Atomic simple type: staff-number
class staff_number (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'staff-number')
    _XSDLocation = p_Location('musicxml.xsd', 624, 1)
    _Documentation = ''
staff_number._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'staff-number', staff_number)
_module_typeBindings.staff_number = staff_number

# Atomic simple type: staff-type
class staff_type (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'staff-type')
    _XSDLocation = p_Location('musicxml.xsd', 631, 1)
    _Documentation = ''
staff_type._CF_enumeration = p_CF_enumeration(value_datatype=staff_type, enum_prefix=None)
staff_type.ossia = staff_type._CF_enumeration.addEnumeration(unicode_value='ossia', tag='ossia')
staff_type.cue = staff_type._CF_enumeration.addEnumeration(unicode_value='cue', tag='cue')
staff_type.editorial = staff_type._CF_enumeration.addEnumeration(unicode_value='editorial', tag='editorial')
staff_type.regular = staff_type._CF_enumeration.addEnumeration(unicode_value='regular', tag='regular')
staff_type.alternate = staff_type._CF_enumeration.addEnumeration(unicode_value='alternate', tag='alternate')
staff_type._InitializeFacetMap(staff_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'staff-type', staff_type)
_module_typeBindings.staff_type = staff_type

# Atomic simple type: time-relation
class time_relation (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'time-relation')
    _XSDLocation = p_Location('musicxml.xsd', 644, 1)
    _Documentation = ''
time_relation._CF_enumeration = p_CF_enumeration(value_datatype=time_relation, enum_prefix=None)
time_relation.parentheses = time_relation._CF_enumeration.addEnumeration(unicode_value='parentheses', tag='parentheses')
time_relation.bracket = time_relation._CF_enumeration.addEnumeration(unicode_value='bracket', tag='bracket')
time_relation.equals = time_relation._CF_enumeration.addEnumeration(unicode_value='equals', tag='equals')
time_relation.slash = time_relation._CF_enumeration.addEnumeration(unicode_value='slash', tag='slash')
time_relation.space = time_relation._CF_enumeration.addEnumeration(unicode_value='space', tag='space')
time_relation.hyphen = time_relation._CF_enumeration.addEnumeration(unicode_value='hyphen', tag='hyphen')
time_relation._InitializeFacetMap(time_relation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'time-relation', time_relation)
_module_typeBindings.time_relation = time_relation

# Atomic simple type: time-separator
class time_separator (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'time-separator')
    _XSDLocation = p_Location('musicxml.xsd', 658, 1)
    _Documentation = ''
time_separator._CF_enumeration = p_CF_enumeration(value_datatype=time_separator, enum_prefix=None)
time_separator.none = time_separator._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
time_separator.horizontal = time_separator._CF_enumeration.addEnumeration(unicode_value='horizontal', tag='horizontal')
time_separator.diagonal = time_separator._CF_enumeration.addEnumeration(unicode_value='diagonal', tag='diagonal')
time_separator.vertical = time_separator._CF_enumeration.addEnumeration(unicode_value='vertical', tag='vertical')
time_separator.adjacent = time_separator._CF_enumeration.addEnumeration(unicode_value='adjacent', tag='adjacent')
time_separator._InitializeFacetMap(time_separator._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'time-separator', time_separator)
_module_typeBindings.time_separator = time_separator

# Atomic simple type: time-symbol
class time_symbol (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'time-symbol')
    _XSDLocation = p_Location('musicxml.xsd', 671, 1)
    _Documentation = ''
time_symbol._CF_enumeration = p_CF_enumeration(value_datatype=time_symbol, enum_prefix=None)
time_symbol.common = time_symbol._CF_enumeration.addEnumeration(unicode_value='common', tag='common')
time_symbol.cut = time_symbol._CF_enumeration.addEnumeration(unicode_value='cut', tag='cut')
time_symbol.single_number = time_symbol._CF_enumeration.addEnumeration(unicode_value='single-number', tag='single_number')
time_symbol.note = time_symbol._CF_enumeration.addEnumeration(unicode_value='note', tag='note')
time_symbol.dotted_note = time_symbol._CF_enumeration.addEnumeration(unicode_value='dotted-note', tag='dotted_note')
time_symbol.normal = time_symbol._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
time_symbol._InitializeFacetMap(time_symbol._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'time-symbol', time_symbol)
_module_typeBindings.time_symbol = time_symbol

# Atomic simple type: backward-forward
class backward_forward (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'backward-forward')
    _XSDLocation = p_Location('musicxml.xsd', 687, 1)
    _Documentation = ''
backward_forward._CF_enumeration = p_CF_enumeration(value_datatype=backward_forward, enum_prefix=None)
backward_forward.backward = backward_forward._CF_enumeration.addEnumeration(unicode_value='backward', tag='backward')
backward_forward.forward = backward_forward._CF_enumeration.addEnumeration(unicode_value='forward', tag='forward')
backward_forward._InitializeFacetMap(backward_forward._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'backward-forward', backward_forward)
_module_typeBindings.backward_forward = backward_forward

# Atomic simple type: bar-style
class bar_style (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'bar-style')
    _XSDLocation = p_Location('musicxml.xsd', 697, 1)
    _Documentation = ''
bar_style._CF_enumeration = p_CF_enumeration(value_datatype=bar_style, enum_prefix=None)
bar_style.regular = bar_style._CF_enumeration.addEnumeration(unicode_value='regular', tag='regular')
bar_style.dotted = bar_style._CF_enumeration.addEnumeration(unicode_value='dotted', tag='dotted')
bar_style.dashed = bar_style._CF_enumeration.addEnumeration(unicode_value='dashed', tag='dashed')
bar_style.heavy = bar_style._CF_enumeration.addEnumeration(unicode_value='heavy', tag='heavy')
bar_style.light_light = bar_style._CF_enumeration.addEnumeration(unicode_value='light-light', tag='light_light')
bar_style.light_heavy = bar_style._CF_enumeration.addEnumeration(unicode_value='light-heavy', tag='light_heavy')
bar_style.heavy_light = bar_style._CF_enumeration.addEnumeration(unicode_value='heavy-light', tag='heavy_light')
bar_style.heavy_heavy = bar_style._CF_enumeration.addEnumeration(unicode_value='heavy-heavy', tag='heavy_heavy')
bar_style.tick = bar_style._CF_enumeration.addEnumeration(unicode_value='tick', tag='tick')
bar_style.short = bar_style._CF_enumeration.addEnumeration(unicode_value='short', tag='short')
bar_style.none = bar_style._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
bar_style._InitializeFacetMap(bar_style._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'bar-style', bar_style)
_module_typeBindings.bar_style = bar_style

# Atomic simple type: ending-number
class ending_number (p_token):


    _ExpandedName = p_ExpandedName(Namespace, 'ending-number')
    _XSDLocation = p_Location('musicxml.xsd', 716, 1)
    _Documentation = ''
ending_number._CF_pattern = pyxb.binding.facets.CF_pattern()
ending_number._CF_pattern.addPattern(pattern='([ ]*)|([1-9][0-9]*(, ?[1-9][0-9]*)*)')
ending_number._InitializeFacetMap(ending_number._CF_pattern)
Namespace.addCategoryObject('typeBinding', 'ending-number', ending_number)
_module_typeBindings.ending_number = ending_number

# Atomic simple type: right-left-middle
class right_left_middle (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'right-left-middle')
    _XSDLocation = p_Location('musicxml.xsd', 725, 1)
    _Documentation = ''
right_left_middle._CF_enumeration = p_CF_enumeration(value_datatype=right_left_middle, enum_prefix=None)
right_left_middle.right = right_left_middle._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
right_left_middle.left = right_left_middle._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
right_left_middle.middle = right_left_middle._CF_enumeration.addEnumeration(unicode_value='middle', tag='middle')
right_left_middle._InitializeFacetMap(right_left_middle._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'right-left-middle', right_left_middle)
_module_typeBindings.right_left_middle = right_left_middle

# Atomic simple type: start-stop-discontinue
class start_stop_discontinue (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'start-stop-discontinue')
    _XSDLocation = p_Location('musicxml.xsd', 736, 1)
    _Documentation = ''
start_stop_discontinue._CF_enumeration = p_CF_enumeration(value_datatype=start_stop_discontinue, enum_prefix=None)
start_stop_discontinue.start = start_stop_discontinue._CF_enumeration.addEnumeration(unicode_value='start', tag='start')
start_stop_discontinue.stop = start_stop_discontinue._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
start_stop_discontinue.discontinue = start_stop_discontinue._CF_enumeration.addEnumeration(unicode_value='discontinue', tag='discontinue')
start_stop_discontinue._InitializeFacetMap(start_stop_discontinue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'start-stop-discontinue', start_stop_discontinue)
_module_typeBindings.start_stop_discontinue = start_stop_discontinue

# Atomic simple type: winged
class winged (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'winged')
    _XSDLocation = p_Location('musicxml.xsd', 747, 1)
    _Documentation = ''
winged._CF_enumeration = p_CF_enumeration(value_datatype=winged, enum_prefix=None)
winged.none = winged._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
winged.straight = winged._CF_enumeration.addEnumeration(unicode_value='straight', tag='straight')
winged.curved = winged._CF_enumeration.addEnumeration(unicode_value='curved', tag='curved')
winged.double_straight = winged._CF_enumeration.addEnumeration(unicode_value='double-straight', tag='double_straight')
winged.double_curved = winged._CF_enumeration.addEnumeration(unicode_value='double-curved', tag='double_curved')
winged._InitializeFacetMap(winged._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'winged', winged)
_module_typeBindings.winged = winged

# Atomic simple type: accordion-middle
class accordion_middle (p_positiveInteger):


    _ExpandedName = p_ExpandedName(Namespace, 'accordion-middle')
    _XSDLocation = p_Location('musicxml.xsd', 762, 1)
    _Documentation = ''
accordion_middle._CF_minInclusive = p_CF_minInclusive(value_datatype=accordion_middle, value=p_positiveInteger(1))
accordion_middle._CF_maxInclusive = p_CF_maxInclusive(value_datatype=accordion_middle, value=p_positiveInteger(3))
accordion_middle._InitializeFacetMap(accordion_middle._CF_minInclusive,
   accordion_middle._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'accordion-middle', accordion_middle)
_module_typeBindings.accordion_middle = accordion_middle

# Atomic simple type: beater-value
class beater_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'beater-value')
    _XSDLocation = p_Location('musicxml.xsd', 772, 1)
    _Documentation = ''
beater_value._CF_enumeration = p_CF_enumeration(value_datatype=beater_value, enum_prefix=None)
beater_value.bow = beater_value._CF_enumeration.addEnumeration(unicode_value='bow', tag='bow')
beater_value.chime_hammer = beater_value._CF_enumeration.addEnumeration(unicode_value='chime hammer', tag='chime_hammer')
beater_value.coin = beater_value._CF_enumeration.addEnumeration(unicode_value='coin', tag='coin')
beater_value.finger = beater_value._CF_enumeration.addEnumeration(unicode_value='finger', tag='finger')
beater_value.fingernail = beater_value._CF_enumeration.addEnumeration(unicode_value='fingernail', tag='fingernail')
beater_value.fist = beater_value._CF_enumeration.addEnumeration(unicode_value='fist', tag='fist')
beater_value.guiro_scraper = beater_value._CF_enumeration.addEnumeration(unicode_value='guiro scraper', tag='guiro_scraper')
beater_value.hammer = beater_value._CF_enumeration.addEnumeration(unicode_value='hammer', tag='hammer')
beater_value.hand = beater_value._CF_enumeration.addEnumeration(unicode_value='hand', tag='hand')
beater_value.jazz_stick = beater_value._CF_enumeration.addEnumeration(unicode_value='jazz stick', tag='jazz_stick')
beater_value.knitting_needle = beater_value._CF_enumeration.addEnumeration(unicode_value='knitting needle', tag='knitting_needle')
beater_value.metal_hammer = beater_value._CF_enumeration.addEnumeration(unicode_value='metal hammer', tag='metal_hammer')
beater_value.snare_stick = beater_value._CF_enumeration.addEnumeration(unicode_value='snare stick', tag='snare_stick')
beater_value.spoon_mallet = beater_value._CF_enumeration.addEnumeration(unicode_value='spoon mallet', tag='spoon_mallet')
beater_value.triangle_beater = beater_value._CF_enumeration.addEnumeration(unicode_value='triangle beater', tag='triangle_beater')
beater_value.triangle_beater_plain = beater_value._CF_enumeration.addEnumeration(unicode_value='triangle beater plain', tag='triangle_beater_plain')
beater_value.wire_brush = beater_value._CF_enumeration.addEnumeration(unicode_value='wire brush', tag='wire_brush')
beater_value._InitializeFacetMap(beater_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'beater-value', beater_value)
_module_typeBindings.beater_value = beater_value

# Atomic simple type: degree-symbol-value
class degree_symbol_value (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'degree-symbol-value')
    _XSDLocation = p_Location('musicxml.xsd', 797, 1)
    _Documentation = ''
degree_symbol_value._CF_enumeration = p_CF_enumeration(value_datatype=degree_symbol_value, enum_prefix=None)
degree_symbol_value.major = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value='major', tag='major')
degree_symbol_value.minor = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value='minor', tag='minor')
degree_symbol_value.augmented = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value='augmented', tag='augmented')
degree_symbol_value.diminished = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value='diminished', tag='diminished')
degree_symbol_value.half_diminished = degree_symbol_value._CF_enumeration.addEnumeration(unicode_value='half-diminished', tag='half_diminished')
degree_symbol_value._InitializeFacetMap(degree_symbol_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'degree-symbol-value', degree_symbol_value)
_module_typeBindings.degree_symbol_value = degree_symbol_value

# Atomic simple type: degree-type-value
class degree_type_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'degree-type-value')
    _XSDLocation = p_Location('musicxml.xsd', 810, 1)
    _Documentation = ''
degree_type_value._CF_enumeration = p_CF_enumeration(value_datatype=degree_type_value, enum_prefix=None)
degree_type_value.add = degree_type_value._CF_enumeration.addEnumeration(unicode_value='add', tag='add')
degree_type_value.alter = degree_type_value._CF_enumeration.addEnumeration(unicode_value='alter', tag='alter')
degree_type_value.subtract = degree_type_value._CF_enumeration.addEnumeration(unicode_value='subtract', tag='subtract')
degree_type_value._InitializeFacetMap(degree_type_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'degree-type-value', degree_type_value)
_module_typeBindings.degree_type_value = degree_type_value

# Atomic simple type: effect
class effect (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'effect')
    _XSDLocation = p_Location('musicxml.xsd', 821, 1)
    _Documentation = ''
effect._CF_enumeration = p_CF_enumeration(value_datatype=effect, enum_prefix=None)
effect.anvil = effect._CF_enumeration.addEnumeration(unicode_value='anvil', tag='anvil')
effect.auto_horn = effect._CF_enumeration.addEnumeration(unicode_value='auto horn', tag='auto_horn')
effect.bird_whistle = effect._CF_enumeration.addEnumeration(unicode_value='bird whistle', tag='bird_whistle')
effect.cannon = effect._CF_enumeration.addEnumeration(unicode_value='cannon', tag='cannon')
effect.duck_call = effect._CF_enumeration.addEnumeration(unicode_value='duck call', tag='duck_call')
effect.gun_shot = effect._CF_enumeration.addEnumeration(unicode_value='gun shot', tag='gun_shot')
effect.klaxon_horn = effect._CF_enumeration.addEnumeration(unicode_value='klaxon horn', tag='klaxon_horn')
effect.lions_roar = effect._CF_enumeration.addEnumeration(unicode_value='lions roar', tag='lions_roar')
effect.police_whistle = effect._CF_enumeration.addEnumeration(unicode_value='police whistle', tag='police_whistle')
effect.siren = effect._CF_enumeration.addEnumeration(unicode_value='siren', tag='siren')
effect.slide_whistle = effect._CF_enumeration.addEnumeration(unicode_value='slide whistle', tag='slide_whistle')
effect.thunder_sheet = effect._CF_enumeration.addEnumeration(unicode_value='thunder sheet', tag='thunder_sheet')
effect.wind_machine = effect._CF_enumeration.addEnumeration(unicode_value='wind machine', tag='wind_machine')
effect.wind_whistle = effect._CF_enumeration.addEnumeration(unicode_value='wind whistle', tag='wind_whistle')
effect._InitializeFacetMap(effect._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'effect', effect)
_module_typeBindings.effect = effect

# Atomic simple type: glass
class glass (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'glass')
    _XSDLocation = p_Location('musicxml.xsd', 843, 1)
    _Documentation = ''
glass._CF_enumeration = p_CF_enumeration(value_datatype=glass, enum_prefix=None)
glass.wind_chimes = glass._CF_enumeration.addEnumeration(unicode_value='wind chimes', tag='wind_chimes')
glass._InitializeFacetMap(glass._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'glass', glass)
_module_typeBindings.glass = glass

# Atomic simple type: harmony-type
class harmony_type (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'harmony-type')
    _XSDLocation = p_Location('musicxml.xsd', 852, 1)
    _Documentation = ''
harmony_type._CF_enumeration = p_CF_enumeration(value_datatype=harmony_type, enum_prefix=None)
harmony_type.explicit = harmony_type._CF_enumeration.addEnumeration(unicode_value='explicit', tag='explicit')
harmony_type.implied = harmony_type._CF_enumeration.addEnumeration(unicode_value='implied', tag='implied')
harmony_type.alternate = harmony_type._CF_enumeration.addEnumeration(unicode_value='alternate', tag='alternate')
harmony_type._InitializeFacetMap(harmony_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'harmony-type', harmony_type)
_module_typeBindings.harmony_type = harmony_type

# Atomic simple type: kind-value
class kind_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'kind-value')
    _XSDLocation = p_Location('musicxml.xsd', 863, 1)
    _Documentation = ''
kind_value._CF_enumeration = p_CF_enumeration(value_datatype=kind_value, enum_prefix=None)
kind_value.major = kind_value._CF_enumeration.addEnumeration(unicode_value='major', tag='major')
kind_value.minor = kind_value._CF_enumeration.addEnumeration(unicode_value='minor', tag='minor')
kind_value.augmented = kind_value._CF_enumeration.addEnumeration(unicode_value='augmented', tag='augmented')
kind_value.diminished = kind_value._CF_enumeration.addEnumeration(unicode_value='diminished', tag='diminished')
kind_value.dominant = kind_value._CF_enumeration.addEnumeration(unicode_value='dominant', tag='dominant')
kind_value.major_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value='major-seventh', tag='major_seventh')
kind_value.minor_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value='minor-seventh', tag='minor_seventh')
kind_value.diminished_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value='diminished-seventh', tag='diminished_seventh')
kind_value.augmented_seventh = kind_value._CF_enumeration.addEnumeration(unicode_value='augmented-seventh', tag='augmented_seventh')
kind_value.half_diminished = kind_value._CF_enumeration.addEnumeration(unicode_value='half-diminished', tag='half_diminished')
kind_value.major_minor = kind_value._CF_enumeration.addEnumeration(unicode_value='major-minor', tag='major_minor')
kind_value.major_sixth = kind_value._CF_enumeration.addEnumeration(unicode_value='major-sixth', tag='major_sixth')
kind_value.minor_sixth = kind_value._CF_enumeration.addEnumeration(unicode_value='minor-sixth', tag='minor_sixth')
kind_value.dominant_ninth = kind_value._CF_enumeration.addEnumeration(unicode_value='dominant-ninth', tag='dominant_ninth')
kind_value.major_ninth = kind_value._CF_enumeration.addEnumeration(unicode_value='major-ninth', tag='major_ninth')
kind_value.minor_ninth = kind_value._CF_enumeration.addEnumeration(unicode_value='minor-ninth', tag='minor_ninth')
kind_value.dominant_11th = kind_value._CF_enumeration.addEnumeration(unicode_value='dominant-11th', tag='dominant_11th')
kind_value.major_11th = kind_value._CF_enumeration.addEnumeration(unicode_value='major-11th', tag='major_11th')
kind_value.minor_11th = kind_value._CF_enumeration.addEnumeration(unicode_value='minor-11th', tag='minor_11th')
kind_value.dominant_13th = kind_value._CF_enumeration.addEnumeration(unicode_value='dominant-13th', tag='dominant_13th')
kind_value.major_13th = kind_value._CF_enumeration.addEnumeration(unicode_value='major-13th', tag='major_13th')
kind_value.minor_13th = kind_value._CF_enumeration.addEnumeration(unicode_value='minor-13th', tag='minor_13th')
kind_value.suspended_second = kind_value._CF_enumeration.addEnumeration(unicode_value='suspended-second', tag='suspended_second')
kind_value.suspended_fourth = kind_value._CF_enumeration.addEnumeration(unicode_value='suspended-fourth', tag='suspended_fourth')
kind_value.Neapolitan = kind_value._CF_enumeration.addEnumeration(unicode_value='Neapolitan', tag='Neapolitan')
kind_value.Italian = kind_value._CF_enumeration.addEnumeration(unicode_value='Italian', tag='Italian')
kind_value.French = kind_value._CF_enumeration.addEnumeration(unicode_value='French', tag='French')
kind_value.German = kind_value._CF_enumeration.addEnumeration(unicode_value='German', tag='German')
kind_value.pedal = kind_value._CF_enumeration.addEnumeration(unicode_value='pedal', tag='pedal')
kind_value.power = kind_value._CF_enumeration.addEnumeration(unicode_value='power', tag='power')
kind_value.Tristan = kind_value._CF_enumeration.addEnumeration(unicode_value='Tristan', tag='Tristan')
kind_value.other = kind_value._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
kind_value.none = kind_value._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
kind_value._InitializeFacetMap(kind_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'kind-value', kind_value)
_module_typeBindings.kind_value = kind_value

# Atomic simple type: line-end
class line_end (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'line-end')
    _XSDLocation = p_Location('musicxml.xsd', 947, 1)
    _Documentation = ''
line_end._CF_enumeration = p_CF_enumeration(value_datatype=line_end, enum_prefix=None)
line_end.up = line_end._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
line_end.down = line_end._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
line_end.both = line_end._CF_enumeration.addEnumeration(unicode_value='both', tag='both')
line_end.arrow = line_end._CF_enumeration.addEnumeration(unicode_value='arrow', tag='arrow')
line_end.none = line_end._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
line_end._InitializeFacetMap(line_end._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'line-end', line_end)
_module_typeBindings.line_end = line_end

# Atomic simple type: measure-numbering-value
class measure_numbering_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'measure-numbering-value')
    _XSDLocation = p_Location('musicxml.xsd', 960, 1)
    _Documentation = ''
measure_numbering_value._CF_enumeration = p_CF_enumeration(value_datatype=measure_numbering_value, enum_prefix=None)
measure_numbering_value.none = measure_numbering_value._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
measure_numbering_value.measure = measure_numbering_value._CF_enumeration.addEnumeration(unicode_value='measure', tag='measure')
measure_numbering_value.system = measure_numbering_value._CF_enumeration.addEnumeration(unicode_value='system', tag='system')
measure_numbering_value._InitializeFacetMap(measure_numbering_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'measure-numbering-value', measure_numbering_value)
_module_typeBindings.measure_numbering_value = measure_numbering_value

# Atomic simple type: membrane
class membrane (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'membrane')
    _XSDLocation = p_Location('musicxml.xsd', 971, 1)
    _Documentation = ''
membrane._CF_enumeration = p_CF_enumeration(value_datatype=membrane, enum_prefix=None)
membrane.bass_drum = membrane._CF_enumeration.addEnumeration(unicode_value='bass drum', tag='bass_drum')
membrane.bass_drum_on_side = membrane._CF_enumeration.addEnumeration(unicode_value='bass drum on side', tag='bass_drum_on_side')
membrane.bongos = membrane._CF_enumeration.addEnumeration(unicode_value='bongos', tag='bongos')
membrane.conga_drum = membrane._CF_enumeration.addEnumeration(unicode_value='conga drum', tag='conga_drum')
membrane.goblet_drum = membrane._CF_enumeration.addEnumeration(unicode_value='goblet drum', tag='goblet_drum')
membrane.military_drum = membrane._CF_enumeration.addEnumeration(unicode_value='military drum', tag='military_drum')
membrane.snare_drum = membrane._CF_enumeration.addEnumeration(unicode_value='snare drum', tag='snare_drum')
membrane.snare_drum_snares_off = membrane._CF_enumeration.addEnumeration(unicode_value='snare drum snares off', tag='snare_drum_snares_off')
membrane.tambourine = membrane._CF_enumeration.addEnumeration(unicode_value='tambourine', tag='tambourine')
membrane.tenor_drum = membrane._CF_enumeration.addEnumeration(unicode_value='tenor drum', tag='tenor_drum')
membrane.timbales = membrane._CF_enumeration.addEnumeration(unicode_value='timbales', tag='timbales')
membrane.tomtom = membrane._CF_enumeration.addEnumeration(unicode_value='tomtom', tag='tomtom')
membrane._InitializeFacetMap(membrane._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'membrane', membrane)
_module_typeBindings.membrane = membrane

# Atomic simple type: metal
class metal (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'metal')
    _XSDLocation = p_Location('musicxml.xsd', 991, 1)
    _Documentation = ''
metal._CF_enumeration = p_CF_enumeration(value_datatype=metal, enum_prefix=None)
metal.almglocken = metal._CF_enumeration.addEnumeration(unicode_value='almglocken', tag='almglocken')
metal.bell = metal._CF_enumeration.addEnumeration(unicode_value='bell', tag='bell')
metal.bell_plate = metal._CF_enumeration.addEnumeration(unicode_value='bell plate', tag='bell_plate')
metal.brake_drum = metal._CF_enumeration.addEnumeration(unicode_value='brake drum', tag='brake_drum')
metal.Chinese_cymbal = metal._CF_enumeration.addEnumeration(unicode_value='Chinese cymbal', tag='Chinese_cymbal')
metal.cowbell = metal._CF_enumeration.addEnumeration(unicode_value='cowbell', tag='cowbell')
metal.crash_cymbals = metal._CF_enumeration.addEnumeration(unicode_value='crash cymbals', tag='crash_cymbals')
metal.crotale = metal._CF_enumeration.addEnumeration(unicode_value='crotale', tag='crotale')
metal.cymbal_tongs = metal._CF_enumeration.addEnumeration(unicode_value='cymbal tongs', tag='cymbal_tongs')
metal.domed_gong = metal._CF_enumeration.addEnumeration(unicode_value='domed gong', tag='domed_gong')
metal.finger_cymbals = metal._CF_enumeration.addEnumeration(unicode_value='finger cymbals', tag='finger_cymbals')
metal.flexatone = metal._CF_enumeration.addEnumeration(unicode_value='flexatone', tag='flexatone')
metal.gong = metal._CF_enumeration.addEnumeration(unicode_value='gong', tag='gong')
metal.hi_hat = metal._CF_enumeration.addEnumeration(unicode_value='hi-hat', tag='hi_hat')
metal.high_hat_cymbals = metal._CF_enumeration.addEnumeration(unicode_value='high-hat cymbals', tag='high_hat_cymbals')
metal.handbell = metal._CF_enumeration.addEnumeration(unicode_value='handbell', tag='handbell')
metal.sistrum = metal._CF_enumeration.addEnumeration(unicode_value='sistrum', tag='sistrum')
metal.sizzle_cymbal = metal._CF_enumeration.addEnumeration(unicode_value='sizzle cymbal', tag='sizzle_cymbal')
metal.sleigh_bells = metal._CF_enumeration.addEnumeration(unicode_value='sleigh bells', tag='sleigh_bells')
metal.suspended_cymbal = metal._CF_enumeration.addEnumeration(unicode_value='suspended cymbal', tag='suspended_cymbal')
metal.tam_tam = metal._CF_enumeration.addEnumeration(unicode_value='tam tam', tag='tam_tam')
metal.triangle = metal._CF_enumeration.addEnumeration(unicode_value='triangle', tag='triangle')
metal.Vietnamese_hat = metal._CF_enumeration.addEnumeration(unicode_value='Vietnamese hat', tag='Vietnamese_hat')
metal._InitializeFacetMap(metal._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'metal', metal)
_module_typeBindings.metal = metal

# Atomic simple type: on-off
class on_off (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'on-off')
    _XSDLocation = p_Location('musicxml.xsd', 1022, 1)
    _Documentation = ''
on_off._CF_enumeration = p_CF_enumeration(value_datatype=on_off, enum_prefix=None)
on_off.on = on_off._CF_enumeration.addEnumeration(unicode_value='on', tag='on')
on_off.off = on_off._CF_enumeration.addEnumeration(unicode_value='off', tag='off')
on_off._InitializeFacetMap(on_off._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'on-off', on_off)
_module_typeBindings.on_off = on_off

# Atomic simple type: pitched
class pitched (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'pitched')
    _XSDLocation = p_Location('musicxml.xsd', 1032, 1)
    _Documentation = ''
pitched._CF_enumeration = p_CF_enumeration(value_datatype=pitched, enum_prefix=None)
pitched.chimes = pitched._CF_enumeration.addEnumeration(unicode_value='chimes', tag='chimes')
pitched.glockenspiel = pitched._CF_enumeration.addEnumeration(unicode_value='glockenspiel', tag='glockenspiel')
pitched.mallet = pitched._CF_enumeration.addEnumeration(unicode_value='mallet', tag='mallet')
pitched.marimba = pitched._CF_enumeration.addEnumeration(unicode_value='marimba', tag='marimba')
pitched.tubular_chimes = pitched._CF_enumeration.addEnumeration(unicode_value='tubular chimes', tag='tubular_chimes')
pitched.vibraphone = pitched._CF_enumeration.addEnumeration(unicode_value='vibraphone', tag='vibraphone')
pitched.xylophone = pitched._CF_enumeration.addEnumeration(unicode_value='xylophone', tag='xylophone')
pitched._InitializeFacetMap(pitched._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'pitched', pitched)
_module_typeBindings.pitched = pitched

# Atomic simple type: principal-voice-symbol
class principal_voice_symbol (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'principal-voice-symbol')
    _XSDLocation = p_Location('musicxml.xsd', 1047, 1)
    _Documentation = ''
principal_voice_symbol._CF_enumeration = p_CF_enumeration(value_datatype=principal_voice_symbol, enum_prefix=None)
principal_voice_symbol.Hauptstimme = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value='Hauptstimme', tag='Hauptstimme')
principal_voice_symbol.Nebenstimme = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value='Nebenstimme', tag='Nebenstimme')
principal_voice_symbol.plain = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value='plain', tag='plain')
principal_voice_symbol.none = principal_voice_symbol._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
principal_voice_symbol._InitializeFacetMap(principal_voice_symbol._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'principal-voice-symbol', principal_voice_symbol)
_module_typeBindings.principal_voice_symbol = principal_voice_symbol

# Atomic simple type: start-stop-change-continue
class start_stop_change_continue (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'start-stop-change-continue')
    _XSDLocation = p_Location('musicxml.xsd', 1059, 1)
    _Documentation = ''
start_stop_change_continue._CF_enumeration = p_CF_enumeration(value_datatype=start_stop_change_continue, enum_prefix=None)
start_stop_change_continue.start = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value='start', tag='start')
start_stop_change_continue.stop = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
start_stop_change_continue.change = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value='change', tag='change')
start_stop_change_continue.continue_ = start_stop_change_continue._CF_enumeration.addEnumeration(unicode_value='continue', tag='continue_')
start_stop_change_continue._InitializeFacetMap(start_stop_change_continue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'start-stop-change-continue', start_stop_change_continue)
_module_typeBindings.start_stop_change_continue = start_stop_change_continue

# Atomic simple type: tip-direction
class tip_direction (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'tip-direction')
    _XSDLocation = p_Location('musicxml.xsd', 1071, 1)
    _Documentation = ''
tip_direction._CF_enumeration = p_CF_enumeration(value_datatype=tip_direction, enum_prefix=None)
tip_direction.up = tip_direction._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
tip_direction.down = tip_direction._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
tip_direction.left = tip_direction._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
tip_direction.right = tip_direction._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
tip_direction.northwest = tip_direction._CF_enumeration.addEnumeration(unicode_value='northwest', tag='northwest')
tip_direction.northeast = tip_direction._CF_enumeration.addEnumeration(unicode_value='northeast', tag='northeast')
tip_direction.southeast = tip_direction._CF_enumeration.addEnumeration(unicode_value='southeast', tag='southeast')
tip_direction.southwest = tip_direction._CF_enumeration.addEnumeration(unicode_value='southwest', tag='southwest')
tip_direction._InitializeFacetMap(tip_direction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'tip-direction', tip_direction)
_module_typeBindings.tip_direction = tip_direction

# Atomic simple type: stick-location
class stick_location (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'stick-location')
    _XSDLocation = p_Location('musicxml.xsd', 1087, 1)
    _Documentation = ''
stick_location._CF_enumeration = p_CF_enumeration(value_datatype=stick_location, enum_prefix=None)
stick_location.center = stick_location._CF_enumeration.addEnumeration(unicode_value='center', tag='center')
stick_location.rim = stick_location._CF_enumeration.addEnumeration(unicode_value='rim', tag='rim')
stick_location.cymbal_bell = stick_location._CF_enumeration.addEnumeration(unicode_value='cymbal bell', tag='cymbal_bell')
stick_location.cymbal_edge = stick_location._CF_enumeration.addEnumeration(unicode_value='cymbal edge', tag='cymbal_edge')
stick_location._InitializeFacetMap(stick_location._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stick-location', stick_location)
_module_typeBindings.stick_location = stick_location

# Atomic simple type: stick-material
class stick_material (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'stick-material')
    _XSDLocation = p_Location('musicxml.xsd', 1099, 1)
    _Documentation = ''
stick_material._CF_enumeration = p_CF_enumeration(value_datatype=stick_material, enum_prefix=None)
stick_material.soft = stick_material._CF_enumeration.addEnumeration(unicode_value='soft', tag='soft')
stick_material.medium = stick_material._CF_enumeration.addEnumeration(unicode_value='medium', tag='medium')
stick_material.hard = stick_material._CF_enumeration.addEnumeration(unicode_value='hard', tag='hard')
stick_material.shaded = stick_material._CF_enumeration.addEnumeration(unicode_value='shaded', tag='shaded')
stick_material.x = stick_material._CF_enumeration.addEnumeration(unicode_value='x', tag='x')
stick_material._InitializeFacetMap(stick_material._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stick-material', stick_material)
_module_typeBindings.stick_material = stick_material

# Atomic simple type: stick-type
class stick_type (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'stick-type')
    _XSDLocation = p_Location('musicxml.xsd', 1112, 1)
    _Documentation = ''
stick_type._CF_enumeration = p_CF_enumeration(value_datatype=stick_type, enum_prefix=None)
stick_type.bass_drum = stick_type._CF_enumeration.addEnumeration(unicode_value='bass drum', tag='bass_drum')
stick_type.double_bass_drum = stick_type._CF_enumeration.addEnumeration(unicode_value='double bass drum', tag='double_bass_drum')
stick_type.timpani = stick_type._CF_enumeration.addEnumeration(unicode_value='timpani', tag='timpani')
stick_type.xylophone = stick_type._CF_enumeration.addEnumeration(unicode_value='xylophone', tag='xylophone')
stick_type.yarn = stick_type._CF_enumeration.addEnumeration(unicode_value='yarn', tag='yarn')
stick_type._InitializeFacetMap(stick_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stick-type', stick_type)
_module_typeBindings.stick_type = stick_type

# Atomic simple type: up-down-stop-continue
class up_down_stop_continue (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'up-down-stop-continue')
    _XSDLocation = p_Location('musicxml.xsd', 1126, 1)
    _Documentation = ''
up_down_stop_continue._CF_enumeration = p_CF_enumeration(value_datatype=up_down_stop_continue, enum_prefix=None)
up_down_stop_continue.up = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
up_down_stop_continue.down = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
up_down_stop_continue.stop = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
up_down_stop_continue.continue_ = up_down_stop_continue._CF_enumeration.addEnumeration(unicode_value='continue', tag='continue_')
up_down_stop_continue._InitializeFacetMap(up_down_stop_continue._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'up-down-stop-continue', up_down_stop_continue)
_module_typeBindings.up_down_stop_continue = up_down_stop_continue

# Atomic simple type: wedge-type
class wedge_type (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'wedge-type')
    _XSDLocation = p_Location('musicxml.xsd', 1138, 1)
    _Documentation = ''
wedge_type._CF_enumeration = p_CF_enumeration(value_datatype=wedge_type, enum_prefix=None)
wedge_type.crescendo = wedge_type._CF_enumeration.addEnumeration(unicode_value='crescendo', tag='crescendo')
wedge_type.diminuendo = wedge_type._CF_enumeration.addEnumeration(unicode_value='diminuendo', tag='diminuendo')
wedge_type.stop = wedge_type._CF_enumeration.addEnumeration(unicode_value='stop', tag='stop')
wedge_type.continue_ = wedge_type._CF_enumeration.addEnumeration(unicode_value='continue', tag='continue_')
wedge_type._InitializeFacetMap(wedge_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'wedge-type', wedge_type)
_module_typeBindings.wedge_type = wedge_type

# Atomic simple type: wood
class wood (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'wood')
    _XSDLocation = p_Location('musicxml.xsd', 1150, 1)
    _Documentation = ''
wood._CF_enumeration = p_CF_enumeration(value_datatype=wood, enum_prefix=None)
wood.board_clapper = wood._CF_enumeration.addEnumeration(unicode_value='board clapper', tag='board_clapper')
wood.cabasa = wood._CF_enumeration.addEnumeration(unicode_value='cabasa', tag='cabasa')
wood.castanets = wood._CF_enumeration.addEnumeration(unicode_value='castanets', tag='castanets')
wood.claves = wood._CF_enumeration.addEnumeration(unicode_value='claves', tag='claves')
wood.guiro = wood._CF_enumeration.addEnumeration(unicode_value='guiro', tag='guiro')
wood.log_drum = wood._CF_enumeration.addEnumeration(unicode_value='log drum', tag='log_drum')
wood.maraca = wood._CF_enumeration.addEnumeration(unicode_value='maraca', tag='maraca')
wood.maracas = wood._CF_enumeration.addEnumeration(unicode_value='maracas', tag='maracas')
wood.ratchet = wood._CF_enumeration.addEnumeration(unicode_value='ratchet', tag='ratchet')
wood.sandpaper_blocks = wood._CF_enumeration.addEnumeration(unicode_value='sandpaper blocks', tag='sandpaper_blocks')
wood.slit_drum = wood._CF_enumeration.addEnumeration(unicode_value='slit drum', tag='slit_drum')
wood.temple_block = wood._CF_enumeration.addEnumeration(unicode_value='temple block', tag='temple_block')
wood.vibraslap = wood._CF_enumeration.addEnumeration(unicode_value='vibraslap', tag='vibraslap')
wood.wood_block = wood._CF_enumeration.addEnumeration(unicode_value='wood block', tag='wood_block')
wood._InitializeFacetMap(wood._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'wood', wood)
_module_typeBindings.wood = wood

# Atomic simple type: distance-type
class distance_type (p_token):


    _ExpandedName = p_ExpandedName(Namespace, 'distance-type')
    _XSDLocation = p_Location('musicxml.xsd', 1174, 1)
    _Documentation = ''
distance_type._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'distance-type', distance_type)
_module_typeBindings.distance_type = distance_type

# Atomic simple type: line-width-type
class line_width_type (p_token):


    _ExpandedName = p_ExpandedName(Namespace, 'line-width-type')
    _XSDLocation = p_Location('musicxml.xsd', 1181, 1)
    _Documentation = ''
line_width_type._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'line-width-type', line_width_type)
_module_typeBindings.line_width_type = line_width_type

# Atomic simple type: margin-type
class margin_type (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'margin-type')
    _XSDLocation = p_Location('musicxml.xsd', 1188, 1)
    _Documentation = ''
margin_type._CF_enumeration = p_CF_enumeration(value_datatype=margin_type, enum_prefix=None)
margin_type.odd = margin_type._CF_enumeration.addEnumeration(unicode_value='odd', tag='odd')
margin_type.even = margin_type._CF_enumeration.addEnumeration(unicode_value='even', tag='even')
margin_type.both = margin_type._CF_enumeration.addEnumeration(unicode_value='both', tag='both')
margin_type._InitializeFacetMap(margin_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'margin-type', margin_type)
_module_typeBindings.margin_type = margin_type

# Atomic simple type: millimeters
class millimeters (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'millimeters')
    _XSDLocation = p_Location('musicxml.xsd', 1199, 1)
    _Documentation = ''
millimeters._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'millimeters', millimeters)
_module_typeBindings.millimeters = millimeters

# Atomic simple type: note-size-type
class note_size_type (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'note-size-type')
    _XSDLocation = p_Location('musicxml.xsd', 1206, 1)
    _Documentation = ''
note_size_type._CF_enumeration = p_CF_enumeration(value_datatype=note_size_type, enum_prefix=None)
note_size_type.cue = note_size_type._CF_enumeration.addEnumeration(unicode_value='cue', tag='cue')
note_size_type.grace = note_size_type._CF_enumeration.addEnumeration(unicode_value='grace', tag='grace')
note_size_type.large = note_size_type._CF_enumeration.addEnumeration(unicode_value='large', tag='large')
note_size_type._InitializeFacetMap(note_size_type._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'note-size-type', note_size_type)
_module_typeBindings.note_size_type = note_size_type

# Atomic simple type: accidental-value
class accidental_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'accidental-value')
    _XSDLocation = p_Location('musicxml.xsd', 1219, 1)
    _Documentation = ''
accidental_value._CF_enumeration = p_CF_enumeration(value_datatype=accidental_value, enum_prefix=None)
accidental_value.sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp', tag='sharp')
accidental_value.natural = accidental_value._CF_enumeration.addEnumeration(unicode_value='natural', tag='natural')
accidental_value.flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat', tag='flat')
accidental_value.double_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='double-sharp', tag='double_sharp')
accidental_value.sharp_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-sharp', tag='sharp_sharp')
accidental_value.flat_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-flat', tag='flat_flat')
accidental_value.natural_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='natural-sharp', tag='natural_sharp')
accidental_value.natural_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='natural-flat', tag='natural_flat')
accidental_value.quarter_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='quarter-flat', tag='quarter_flat')
accidental_value.quarter_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='quarter-sharp', tag='quarter_sharp')
accidental_value.three_quarters_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='three-quarters-flat', tag='three_quarters_flat')
accidental_value.three_quarters_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='three-quarters-sharp', tag='three_quarters_sharp')
accidental_value.sharp_down = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-down', tag='sharp_down')
accidental_value.sharp_up = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-up', tag='sharp_up')
accidental_value.natural_down = accidental_value._CF_enumeration.addEnumeration(unicode_value='natural-down', tag='natural_down')
accidental_value.natural_up = accidental_value._CF_enumeration.addEnumeration(unicode_value='natural-up', tag='natural_up')
accidental_value.flat_down = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-down', tag='flat_down')
accidental_value.flat_up = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-up', tag='flat_up')
accidental_value.triple_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='triple-sharp', tag='triple_sharp')
accidental_value.triple_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='triple-flat', tag='triple_flat')
accidental_value.slash_quarter_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='slash-quarter-sharp', tag='slash_quarter_sharp')
accidental_value.slash_sharp = accidental_value._CF_enumeration.addEnumeration(unicode_value='slash-sharp', tag='slash_sharp')
accidental_value.slash_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='slash-flat', tag='slash_flat')
accidental_value.double_slash_flat = accidental_value._CF_enumeration.addEnumeration(unicode_value='double-slash-flat', tag='double_slash_flat')
accidental_value.sharp_1 = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-1', tag='sharp_1')
accidental_value.sharp_2 = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-2', tag='sharp_2')
accidental_value.sharp_3 = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-3', tag='sharp_3')
accidental_value.sharp_5 = accidental_value._CF_enumeration.addEnumeration(unicode_value='sharp-5', tag='sharp_5')
accidental_value.flat_1 = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-1', tag='flat_1')
accidental_value.flat_2 = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-2', tag='flat_2')
accidental_value.flat_3 = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-3', tag='flat_3')
accidental_value.flat_4 = accidental_value._CF_enumeration.addEnumeration(unicode_value='flat-4', tag='flat_4')
accidental_value.sori = accidental_value._CF_enumeration.addEnumeration(unicode_value='sori', tag='sori')
accidental_value.koron = accidental_value._CF_enumeration.addEnumeration(unicode_value='koron', tag='koron')
accidental_value._InitializeFacetMap(accidental_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'accidental-value', accidental_value)
_module_typeBindings.accidental_value = accidental_value

# Atomic simple type: arrow-direction
class arrow_direction (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'arrow-direction')
    _XSDLocation = p_Location('musicxml.xsd', 1261, 1)
    _Documentation = ''
arrow_direction._CF_enumeration = p_CF_enumeration(value_datatype=arrow_direction, enum_prefix=None)
arrow_direction.left = arrow_direction._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
arrow_direction.up = arrow_direction._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
arrow_direction.right = arrow_direction._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
arrow_direction.down = arrow_direction._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
arrow_direction.northwest = arrow_direction._CF_enumeration.addEnumeration(unicode_value='northwest', tag='northwest')
arrow_direction.northeast = arrow_direction._CF_enumeration.addEnumeration(unicode_value='northeast', tag='northeast')
arrow_direction.southeast = arrow_direction._CF_enumeration.addEnumeration(unicode_value='southeast', tag='southeast')
arrow_direction.southwest = arrow_direction._CF_enumeration.addEnumeration(unicode_value='southwest', tag='southwest')
arrow_direction.left_right = arrow_direction._CF_enumeration.addEnumeration(unicode_value='left right', tag='left_right')
arrow_direction.up_down = arrow_direction._CF_enumeration.addEnumeration(unicode_value='up down', tag='up_down')
arrow_direction.northwest_southeast = arrow_direction._CF_enumeration.addEnumeration(unicode_value='northwest southeast', tag='northwest_southeast')
arrow_direction.northeast_southwest = arrow_direction._CF_enumeration.addEnumeration(unicode_value='northeast southwest', tag='northeast_southwest')
arrow_direction.other = arrow_direction._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
arrow_direction._InitializeFacetMap(arrow_direction._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'arrow-direction', arrow_direction)
_module_typeBindings.arrow_direction = arrow_direction

# Atomic simple type: arrow-style
class arrow_style (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'arrow-style')
    _XSDLocation = p_Location('musicxml.xsd', 1282, 1)
    _Documentation = ''
arrow_style._CF_enumeration = p_CF_enumeration(value_datatype=arrow_style, enum_prefix=None)
arrow_style.single = arrow_style._CF_enumeration.addEnumeration(unicode_value='single', tag='single')
arrow_style.double = arrow_style._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
arrow_style.filled = arrow_style._CF_enumeration.addEnumeration(unicode_value='filled', tag='filled')
arrow_style.hollow = arrow_style._CF_enumeration.addEnumeration(unicode_value='hollow', tag='hollow')
arrow_style.paired = arrow_style._CF_enumeration.addEnumeration(unicode_value='paired', tag='paired')
arrow_style.combined = arrow_style._CF_enumeration.addEnumeration(unicode_value='combined', tag='combined')
arrow_style.other = arrow_style._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
arrow_style._InitializeFacetMap(arrow_style._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'arrow-style', arrow_style)
_module_typeBindings.arrow_style = arrow_style

# Atomic simple type: beam-value
class beam_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'beam-value')
    _XSDLocation = p_Location('musicxml.xsd', 1297, 1)
    _Documentation = ''
beam_value._CF_enumeration = p_CF_enumeration(value_datatype=beam_value, enum_prefix=None)
beam_value.begin = beam_value._CF_enumeration.addEnumeration(unicode_value='begin', tag='begin')
beam_value.continue_ = beam_value._CF_enumeration.addEnumeration(unicode_value='continue', tag='continue_')
beam_value.end = beam_value._CF_enumeration.addEnumeration(unicode_value='end', tag='end')
beam_value.forward_hook = beam_value._CF_enumeration.addEnumeration(unicode_value='forward hook', tag='forward_hook')
beam_value.backward_hook = beam_value._CF_enumeration.addEnumeration(unicode_value='backward hook', tag='backward_hook')
beam_value._InitializeFacetMap(beam_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'beam-value', beam_value)
_module_typeBindings.beam_value = beam_value

# Atomic simple type: breath-mark-value
class breath_mark_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'breath-mark-value')
    _XSDLocation = p_Location('musicxml.xsd', 1310, 1)
    _Documentation = ''
breath_mark_value._CF_enumeration = p_CF_enumeration(value_datatype=breath_mark_value, enum_prefix=None)
breath_mark_value.emptyString = breath_mark_value._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
breath_mark_value.comma = breath_mark_value._CF_enumeration.addEnumeration(unicode_value='comma', tag='comma')
breath_mark_value.tick = breath_mark_value._CF_enumeration.addEnumeration(unicode_value='tick', tag='tick')
breath_mark_value._InitializeFacetMap(breath_mark_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'breath-mark-value', breath_mark_value)
_module_typeBindings.breath_mark_value = breath_mark_value

# Atomic simple type: circular-arrow
class circular_arrow (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'circular-arrow')
    _XSDLocation = p_Location('musicxml.xsd', 1321, 1)
    _Documentation = ''
circular_arrow._CF_enumeration = p_CF_enumeration(value_datatype=circular_arrow, enum_prefix=None)
circular_arrow.clockwise = circular_arrow._CF_enumeration.addEnumeration(unicode_value='clockwise', tag='clockwise')
circular_arrow.anticlockwise = circular_arrow._CF_enumeration.addEnumeration(unicode_value='anticlockwise', tag='anticlockwise')
circular_arrow._InitializeFacetMap(circular_arrow._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'circular-arrow', circular_arrow)
_module_typeBindings.circular_arrow = circular_arrow

# Atomic simple type: fan
class fan (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'fan')
    _XSDLocation = p_Location('musicxml.xsd', 1331, 1)
    _Documentation = ''
fan._CF_enumeration = p_CF_enumeration(value_datatype=fan, enum_prefix=None)
fan.accel = fan._CF_enumeration.addEnumeration(unicode_value='accel', tag='accel')
fan.rit = fan._CF_enumeration.addEnumeration(unicode_value='rit', tag='rit')
fan.none = fan._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
fan._InitializeFacetMap(fan._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'fan', fan)
_module_typeBindings.fan = fan

# Atomic simple type: handbell-value
class handbell_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'handbell-value')
    _XSDLocation = p_Location('musicxml.xsd', 1342, 1)
    _Documentation = ''
handbell_value._CF_enumeration = p_CF_enumeration(value_datatype=handbell_value, enum_prefix=None)
handbell_value.damp = handbell_value._CF_enumeration.addEnumeration(unicode_value='damp', tag='damp')
handbell_value.echo = handbell_value._CF_enumeration.addEnumeration(unicode_value='echo', tag='echo')
handbell_value.gyro = handbell_value._CF_enumeration.addEnumeration(unicode_value='gyro', tag='gyro')
handbell_value.hand_martellato = handbell_value._CF_enumeration.addEnumeration(unicode_value='hand martellato', tag='hand_martellato')
handbell_value.mallet_lift = handbell_value._CF_enumeration.addEnumeration(unicode_value='mallet lift', tag='mallet_lift')
handbell_value.mallet_table = handbell_value._CF_enumeration.addEnumeration(unicode_value='mallet table', tag='mallet_table')
handbell_value.martellato = handbell_value._CF_enumeration.addEnumeration(unicode_value='martellato', tag='martellato')
handbell_value.martellato_lift = handbell_value._CF_enumeration.addEnumeration(unicode_value='martellato lift', tag='martellato_lift')
handbell_value.muted_martellato = handbell_value._CF_enumeration.addEnumeration(unicode_value='muted martellato', tag='muted_martellato')
handbell_value.pluck_lift = handbell_value._CF_enumeration.addEnumeration(unicode_value='pluck lift', tag='pluck_lift')
handbell_value.swing = handbell_value._CF_enumeration.addEnumeration(unicode_value='swing', tag='swing')
handbell_value._InitializeFacetMap(handbell_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'handbell-value', handbell_value)
_module_typeBindings.handbell_value = handbell_value

# Atomic simple type: hole-closed-location
class hole_closed_location (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'hole-closed-location')
    _XSDLocation = p_Location('musicxml.xsd', 1361, 1)
    _Documentation = ''
hole_closed_location._CF_enumeration = p_CF_enumeration(value_datatype=hole_closed_location, enum_prefix=None)
hole_closed_location.right = hole_closed_location._CF_enumeration.addEnumeration(unicode_value='right', tag='right')
hole_closed_location.bottom = hole_closed_location._CF_enumeration.addEnumeration(unicode_value='bottom', tag='bottom')
hole_closed_location.left = hole_closed_location._CF_enumeration.addEnumeration(unicode_value='left', tag='left')
hole_closed_location.top = hole_closed_location._CF_enumeration.addEnumeration(unicode_value='top', tag='top')
hole_closed_location._InitializeFacetMap(hole_closed_location._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'hole-closed-location', hole_closed_location)
_module_typeBindings.hole_closed_location = hole_closed_location

# Atomic simple type: hole-closed-value
class hole_closed_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'hole-closed-value')
    _XSDLocation = p_Location('musicxml.xsd', 1373, 1)
    _Documentation = ''
hole_closed_value._CF_enumeration = p_CF_enumeration(value_datatype=hole_closed_value, enum_prefix=None)
hole_closed_value.yes = hole_closed_value._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
hole_closed_value.no = hole_closed_value._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
hole_closed_value.half = hole_closed_value._CF_enumeration.addEnumeration(unicode_value='half', tag='half')
hole_closed_value._InitializeFacetMap(hole_closed_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'hole-closed-value', hole_closed_value)
_module_typeBindings.hole_closed_value = hole_closed_value

# Atomic simple type: note-type-value
class note_type_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'note-type-value')
    _XSDLocation = p_Location('musicxml.xsd', 1384, 1)
    _Documentation = ''
note_type_value._CF_enumeration = p_CF_enumeration(value_datatype=note_type_value, enum_prefix=None)
note_type_value.n1024th = note_type_value._CF_enumeration.addEnumeration(unicode_value='1024th', tag='n1024th')
note_type_value.n512th = note_type_value._CF_enumeration.addEnumeration(unicode_value='512th', tag='n512th')
note_type_value.n256th = note_type_value._CF_enumeration.addEnumeration(unicode_value='256th', tag='n256th')
note_type_value.n128th = note_type_value._CF_enumeration.addEnumeration(unicode_value='128th', tag='n128th')
note_type_value.n64th = note_type_value._CF_enumeration.addEnumeration(unicode_value='64th', tag='n64th')
note_type_value.n32nd = note_type_value._CF_enumeration.addEnumeration(unicode_value='32nd', tag='n32nd')
note_type_value.n16th = note_type_value._CF_enumeration.addEnumeration(unicode_value='16th', tag='n16th')
note_type_value.eighth = note_type_value._CF_enumeration.addEnumeration(unicode_value='eighth', tag='eighth')
note_type_value.quarter = note_type_value._CF_enumeration.addEnumeration(unicode_value='quarter', tag='quarter')
note_type_value.half = note_type_value._CF_enumeration.addEnumeration(unicode_value='half', tag='half')
note_type_value.whole = note_type_value._CF_enumeration.addEnumeration(unicode_value='whole', tag='whole')
note_type_value.breve = note_type_value._CF_enumeration.addEnumeration(unicode_value='breve', tag='breve')
note_type_value.long = note_type_value._CF_enumeration.addEnumeration(unicode_value='long', tag='long')
note_type_value.maxima = note_type_value._CF_enumeration.addEnumeration(unicode_value='maxima', tag='maxima')
note_type_value._InitializeFacetMap(note_type_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'note-type-value', note_type_value)
_module_typeBindings.note_type_value = note_type_value

# Atomic simple type: notehead-value
class notehead_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'notehead-value')
    _XSDLocation = p_Location('musicxml.xsd', 1406, 1)
    _Documentation = ''
notehead_value._CF_enumeration = p_CF_enumeration(value_datatype=notehead_value, enum_prefix=None)
notehead_value.slash = notehead_value._CF_enumeration.addEnumeration(unicode_value='slash', tag='slash')
notehead_value.triangle = notehead_value._CF_enumeration.addEnumeration(unicode_value='triangle', tag='triangle')
notehead_value.diamond = notehead_value._CF_enumeration.addEnumeration(unicode_value='diamond', tag='diamond')
notehead_value.square = notehead_value._CF_enumeration.addEnumeration(unicode_value='square', tag='square')
notehead_value.cross = notehead_value._CF_enumeration.addEnumeration(unicode_value='cross', tag='cross')
notehead_value.x = notehead_value._CF_enumeration.addEnumeration(unicode_value='x', tag='x')
notehead_value.circle_x = notehead_value._CF_enumeration.addEnumeration(unicode_value='circle-x', tag='circle_x')
notehead_value.inverted_triangle = notehead_value._CF_enumeration.addEnumeration(unicode_value='inverted triangle', tag='inverted_triangle')
notehead_value.arrow_down = notehead_value._CF_enumeration.addEnumeration(unicode_value='arrow down', tag='arrow_down')
notehead_value.arrow_up = notehead_value._CF_enumeration.addEnumeration(unicode_value='arrow up', tag='arrow_up')
notehead_value.slashed = notehead_value._CF_enumeration.addEnumeration(unicode_value='slashed', tag='slashed')
notehead_value.back_slashed = notehead_value._CF_enumeration.addEnumeration(unicode_value='back slashed', tag='back_slashed')
notehead_value.normal = notehead_value._CF_enumeration.addEnumeration(unicode_value='normal', tag='normal')
notehead_value.cluster = notehead_value._CF_enumeration.addEnumeration(unicode_value='cluster', tag='cluster')
notehead_value.circle_dot = notehead_value._CF_enumeration.addEnumeration(unicode_value='circle dot', tag='circle_dot')
notehead_value.left_triangle = notehead_value._CF_enumeration.addEnumeration(unicode_value='left triangle', tag='left_triangle')
notehead_value.rectangle = notehead_value._CF_enumeration.addEnumeration(unicode_value='rectangle', tag='rectangle')
notehead_value.none = notehead_value._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
notehead_value.do = notehead_value._CF_enumeration.addEnumeration(unicode_value='do', tag='do')
notehead_value.re = notehead_value._CF_enumeration.addEnumeration(unicode_value='re', tag='re')
notehead_value.mi = notehead_value._CF_enumeration.addEnumeration(unicode_value='mi', tag='mi')
notehead_value.fa = notehead_value._CF_enumeration.addEnumeration(unicode_value='fa', tag='fa')
notehead_value.fa_up = notehead_value._CF_enumeration.addEnumeration(unicode_value='fa up', tag='fa_up')
notehead_value.so = notehead_value._CF_enumeration.addEnumeration(unicode_value='so', tag='so')
notehead_value.la = notehead_value._CF_enumeration.addEnumeration(unicode_value='la', tag='la')
notehead_value.ti = notehead_value._CF_enumeration.addEnumeration(unicode_value='ti', tag='ti')
notehead_value._InitializeFacetMap(notehead_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'notehead-value', notehead_value)
_module_typeBindings.notehead_value = notehead_value

# Atomic simple type: octave
class octave (p_integer):


    _ExpandedName = p_ExpandedName(Namespace, 'octave')
    _XSDLocation = p_Location('musicxml.xsd', 1443, 1)
    _Documentation = ''
octave._CF_minInclusive = p_CF_minInclusive(value_datatype=octave, value=p_integer(0))
octave._CF_maxInclusive = p_CF_maxInclusive(value_datatype=octave, value=p_integer(9))
octave._InitializeFacetMap(octave._CF_minInclusive,
   octave._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'octave', octave)
_module_typeBindings.octave = octave

# Atomic simple type: semitones
class semitones (p_decimal):


    _ExpandedName = p_ExpandedName(Namespace, 'semitones')
    _XSDLocation = p_Location('musicxml.xsd', 1453, 1)
    _Documentation = ''
semitones._InitializeFacetMap()
Namespace.addCategoryObject('typeBinding', 'semitones', semitones)
_module_typeBindings.semitones = semitones

# Atomic simple type: show-tuplet
class show_tuplet (p_token, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'show-tuplet')
    _XSDLocation = p_Location('musicxml.xsd', 1460, 1)
    _Documentation = ''
show_tuplet._CF_enumeration = p_CF_enumeration(value_datatype=show_tuplet, enum_prefix=None)
show_tuplet.actual = show_tuplet._CF_enumeration.addEnumeration(unicode_value='actual', tag='actual')
show_tuplet.both = show_tuplet._CF_enumeration.addEnumeration(unicode_value='both', tag='both')
show_tuplet.none = show_tuplet._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
show_tuplet._InitializeFacetMap(show_tuplet._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'show-tuplet', show_tuplet)
_module_typeBindings.show_tuplet = show_tuplet

# Atomic simple type: stem-value
class stem_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'stem-value')
    _XSDLocation = p_Location('musicxml.xsd', 1471, 1)
    _Documentation = ''
stem_value._CF_enumeration = p_CF_enumeration(value_datatype=stem_value, enum_prefix=None)
stem_value.down = stem_value._CF_enumeration.addEnumeration(unicode_value='down', tag='down')
stem_value.up = stem_value._CF_enumeration.addEnumeration(unicode_value='up', tag='up')
stem_value.double = stem_value._CF_enumeration.addEnumeration(unicode_value='double', tag='double')
stem_value.none = stem_value._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
stem_value._InitializeFacetMap(stem_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'stem-value', stem_value)
_module_typeBindings.stem_value = stem_value

# Atomic simple type: step
class step (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'step')
    _XSDLocation = p_Location('musicxml.xsd', 1483, 1)
    _Documentation = ''
step._CF_enumeration = p_CF_enumeration(value_datatype=step, enum_prefix=None)
step.A = step._CF_enumeration.addEnumeration(unicode_value='A', tag='A')
step.B = step._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
step.C = step._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
step.D = step._CF_enumeration.addEnumeration(unicode_value='D', tag='D')
step.E = step._CF_enumeration.addEnumeration(unicode_value='E', tag='E')
step.F = step._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
step.G = step._CF_enumeration.addEnumeration(unicode_value='G', tag='G')
step._InitializeFacetMap(step._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'step', step)
_module_typeBindings.step = step

# Atomic simple type: syllabic
class syllabic (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'syllabic')
    _XSDLocation = p_Location('musicxml.xsd', 1498, 1)
    _Documentation = ''
syllabic._CF_enumeration = p_CF_enumeration(value_datatype=syllabic, enum_prefix=None)
syllabic.single = syllabic._CF_enumeration.addEnumeration(unicode_value='single', tag='single')
syllabic.begin = syllabic._CF_enumeration.addEnumeration(unicode_value='begin', tag='begin')
syllabic.end = syllabic._CF_enumeration.addEnumeration(unicode_value='end', tag='end')
syllabic.middle = syllabic._CF_enumeration.addEnumeration(unicode_value='middle', tag='middle')
syllabic._InitializeFacetMap(syllabic._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'syllabic', syllabic)
_module_typeBindings.syllabic = syllabic

# Atomic simple type: tremolo-marks
class tremolo_marks (p_integer):


    _ExpandedName = p_ExpandedName(Namespace, 'tremolo-marks')
    _XSDLocation = p_Location('musicxml.xsd', 1510, 1)
    _Documentation = ''
tremolo_marks._CF_minInclusive = p_CF_minInclusive(value_datatype=tremolo_marks, value=p_integer(0))
tremolo_marks._CF_maxInclusive = p_CF_maxInclusive(value_datatype=tremolo_marks, value=p_integer(8))
tremolo_marks._InitializeFacetMap(tremolo_marks._CF_minInclusive,
   tremolo_marks._CF_maxInclusive)
Namespace.addCategoryObject('typeBinding', 'tremolo-marks', tremolo_marks)
_module_typeBindings.tremolo_marks = tremolo_marks

# Atomic simple type: group-barline-value
class group_barline_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'group-barline-value')
    _XSDLocation = p_Location('musicxml.xsd', 1522, 1)
    _Documentation = ''
group_barline_value._CF_enumeration = p_CF_enumeration(value_datatype=group_barline_value, enum_prefix=None)
group_barline_value.yes = group_barline_value._CF_enumeration.addEnumeration(unicode_value='yes', tag='yes')
group_barline_value.no = group_barline_value._CF_enumeration.addEnumeration(unicode_value='no', tag='no')
group_barline_value.Mensurstrich = group_barline_value._CF_enumeration.addEnumeration(unicode_value='Mensurstrich', tag='Mensurstrich')
group_barline_value._InitializeFacetMap(group_barline_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'group-barline-value', group_barline_value)
_module_typeBindings.group_barline_value = group_barline_value

# Atomic simple type: group-symbol-value
class group_symbol_value (p_string, p_enumeration_mixin):


    _ExpandedName = p_ExpandedName(Namespace, 'group-symbol-value')
    _XSDLocation = p_Location('musicxml.xsd', 1533, 1)
    _Documentation = ''
group_symbol_value._CF_enumeration = p_CF_enumeration(value_datatype=group_symbol_value, enum_prefix=None)
group_symbol_value.none = group_symbol_value._CF_enumeration.addEnumeration(unicode_value='none', tag='none')
group_symbol_value.brace = group_symbol_value._CF_enumeration.addEnumeration(unicode_value='brace', tag='brace')
group_symbol_value.line = group_symbol_value._CF_enumeration.addEnumeration(unicode_value='line', tag='line')
group_symbol_value.bracket = group_symbol_value._CF_enumeration.addEnumeration(unicode_value='bracket', tag='bracket')
group_symbol_value.square = group_symbol_value._CF_enumeration.addEnumeration(unicode_value='square', tag='square')
group_symbol_value._InitializeFacetMap(group_symbol_value._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'group-symbol-value', group_symbol_value)
_module_typeBindings.group_symbol_value = group_symbol_value

# Union simple type: font-size
# superclasses p_anySimpleType
class font_size (pyxb.binding.basis.STD_union):


    _ExpandedName = p_ExpandedName(Namespace, 'font-size')
    _XSDLocation = p_Location('musicxml.xsd', 120, 1)
    _Documentation = ''

    _MemberTypes = ( p_decimal, css_font_size, )
font_size._CF_pattern = pyxb.binding.facets.CF_pattern()
font_size._CF_enumeration = p_CF_enumeration(value_datatype=font_size)
font_size.xx_small = 'xx-small'                   # originally css_font_size.xx_small
font_size.x_small = 'x-small'                     # originally css_font_size.x_small
font_size.small = 'small'                         # originally css_font_size.small
font_size.medium = 'medium'                       # originally css_font_size.medium
font_size.large = 'large'                         # originally css_font_size.large
font_size.x_large = 'x-large'                     # originally css_font_size.x_large
font_size.xx_large = 'xx-large'                   # originally css_font_size.xx_large
font_size._InitializeFacetMap(font_size._CF_pattern,
   font_size._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'font-size', font_size)
_module_typeBindings.font_size = font_size

# Union simple type: number-or-normal
# superclasses p_anySimpleType
class number_or_normal (pyxb.binding.basis.STD_union):


    _ExpandedName = p_ExpandedName(Namespace, 'number-or-normal')
    _XSDLocation = p_Location('musicxml.xsd', 272, 1)
    _Documentation = ''

    _MemberTypes = ( p_decimal, STD_ANON, )
number_or_normal._CF_pattern = pyxb.binding.facets.CF_pattern()
number_or_normal._CF_enumeration = p_CF_enumeration(value_datatype=number_or_normal)
number_or_normal.normal = 'normal'                # originally STD_ANON.normal
number_or_normal._InitializeFacetMap(number_or_normal._CF_pattern,
   number_or_normal._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'number-or-normal', number_or_normal)
_module_typeBindings.number_or_normal = number_or_normal

# Atomic simple type: positive-divisions
class positive_divisions (divisions):


    _ExpandedName = p_ExpandedName(Namespace, 'positive-divisions')
    _XSDLocation = p_Location('musicxml.xsd', 314, 1)
    _Documentation = ''
positive_divisions._CF_minExclusive = p_CF_minExclusive(value_datatype=divisions, value=p_anySimpleType('0'))
positive_divisions._InitializeFacetMap(positive_divisions._CF_minExclusive)
Namespace.addCategoryObject('typeBinding', 'positive-divisions', positive_divisions)
_module_typeBindings.positive_divisions = positive_divisions

# Union simple type: positive-integer-or-empty
# superclasses p_anySimpleType
class positive_integer_or_empty (pyxb.binding.basis.STD_union):


    _ExpandedName = p_ExpandedName(Namespace, 'positive-integer-or-empty')
    _XSDLocation = p_Location('musicxml.xsd', 323, 1)
    _Documentation = ''

    _MemberTypes = ( p_positiveInteger, STD_ANON_, )
positive_integer_or_empty._CF_pattern = pyxb.binding.facets.CF_pattern()
positive_integer_or_empty._CF_enumeration = p_CF_enumeration(value_datatype=positive_integer_or_empty)
positive_integer_or_empty.emptyString = ''        # originally STD_ANON_.emptyString
positive_integer_or_empty._InitializeFacetMap(positive_integer_or_empty._CF_pattern,
   positive_integer_or_empty._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'positive-integer-or-empty', positive_integer_or_empty)
_module_typeBindings.positive_integer_or_empty = positive_integer_or_empty

# Union simple type: yes-no-number
# superclasses p_anySimpleType
class yes_no_number (pyxb.binding.basis.STD_union):


    _ExpandedName = p_ExpandedName(Namespace, 'yes-no-number')
    _XSDLocation = p_Location('musicxml.xsd', 549, 1)
    _Documentation = ''

    _MemberTypes = ( yes_no, p_decimal, )
yes_no_number._CF_pattern = pyxb.binding.facets.CF_pattern()
yes_no_number._CF_enumeration = p_CF_enumeration(value_datatype=yes_no_number)
yes_no_number.yes = 'yes'                         # originally yes_no.yes
yes_no_number.no = 'no'                           # originally yes_no.no
yes_no_number._InitializeFacetMap(yes_no_number._CF_pattern,
   yes_no_number._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'yes-no-number', yes_no_number)
_module_typeBindings.yes_no_number = yes_no_number

# Complex type empty with content type EMPTY
class empty (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty')
    _XSDLocation = p_Location('musicxml.xsd', 2029, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType
    _ElementMap.update({

    })
    _AttributeMap.update({

    })
_module_typeBindings.empty = empty
Namespace.addCategoryObject('typeBinding', 'empty', empty)


# Complex type midi-instrument with content type ELEMENT_ONLY
class midi_instrument (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'midi-instrument')
    _XSDLocation = p_Location('musicxml.xsd', 2157, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element midi-channel uses Python identifier midi_channel
    __midi_channel = p_ElementDeclaration(p_ExpandedName(None, 'midi-channel'), 'midi_channel', '__AbsentNamespace0_midi_instrument_midi_channel', False, p_Location('musicxml.xsd', 2162, 3), )


    midi_channel = property(__midi_channel.value, __midi_channel.set, None, 'The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16.')


    # Element midi-name uses Python identifier midi_name
    __midi_name = p_ElementDeclaration(p_ExpandedName(None, 'midi-name'), 'midi_name', '__AbsentNamespace0_midi_instrument_midi_name', False, p_Location('musicxml.xsd', 2167, 3), )


    midi_name = property(__midi_name.value, __midi_name.set, None, 'The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File.')


    # Element midi-bank uses Python identifier midi_bank
    __midi_bank = p_ElementDeclaration(p_ExpandedName(None, 'midi-bank'), 'midi_bank', '__AbsentNamespace0_midi_instrument_midi_bank', False, p_Location('musicxml.xsd', 2172, 3), )


    midi_bank = property(__midi_bank.value, __midi_bank.set, None, 'The midi-bank element specified a MIDI 1.0 bank number ranging from 1 to 16,384.')


    # Element midi-program uses Python identifier midi_program
    __midi_program = p_ElementDeclaration(p_ExpandedName(None, 'midi-program'), 'midi_program', '__AbsentNamespace0_midi_instrument_midi_program', False, p_Location('musicxml.xsd', 2177, 3), )


    midi_program = property(__midi_program.value, __midi_program.set, None, 'The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128.')


    # Element midi-unpitched uses Python identifier midi_unpitched
    __midi_unpitched = p_ElementDeclaration(p_ExpandedName(None, 'midi-unpitched'), 'midi_unpitched', '__AbsentNamespace0_midi_instrument_midi_unpitched', False, p_Location('musicxml.xsd', 2182, 3), )


    midi_unpitched = property(__midi_unpitched.value, __midi_unpitched.set, None, 'For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element.')


    # Element volume uses Python identifier volume
    __volume = p_ElementDeclaration(p_ExpandedName(None, 'volume'), 'volume', '__AbsentNamespace0_midi_instrument_volume', False, p_Location('musicxml.xsd', 2187, 3), )


    volume = property(__volume.value, __volume.set, None, 'The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller.')


    # Element pan uses Python identifier pan
    __pan = p_ElementDeclaration(p_ExpandedName(None, 'pan'), 'pan', '__AbsentNamespace0_midi_instrument_pan', False, p_Location('musicxml.xsd', 2192, 3), )


    pan = property(__pan.value, __pan.set, None, 'The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.')


    # Element elevation uses Python identifier elevation
    __elevation = p_ElementDeclaration(p_ExpandedName(None, 'elevation'), 'elevation', '__AbsentNamespace0_midi_instrument_elevation', False, p_Location('musicxml.xsd', 2197, 3), )


    elevation = property(__elevation.value, __elevation.set, None, 'The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below.')


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_midi_instrument_id', p_IDREF, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 2203, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 2203, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __midi_channel.name() : __midi_channel,
        __midi_name.name() : __midi_name,
        __midi_bank.name() : __midi_bank,
        __midi_program.name() : __midi_program,
        __midi_unpitched.name() : __midi_unpitched,
        __volume.name() : __volume,
        __pan.name() : __pan,
        __elevation.name() : __elevation
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.midi_instrument = midi_instrument
Namespace.addCategoryObject('typeBinding', 'midi-instrument', midi_instrument)


# Complex type other-play with content type SIMPLE
class other_play (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'other-play')
    _XSDLocation = p_Location('musicxml.xsd', 2219, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_other_play_type', p_token, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2225, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 2225, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.other_play = other_play
Namespace.addCategoryObject('typeBinding', 'other-play', other_play)


# Complex type play with content type ELEMENT_ONLY
class play (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'play')
    _XSDLocation = p_Location('musicxml.xsd', 2230, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element ipa uses Python identifier ipa
    __ipa = p_ElementDeclaration(p_ExpandedName(None, 'ipa'), 'ipa', '__AbsentNamespace0_play_ipa', True, p_Location('musicxml.xsd', 2236, 4), )


    ipa = property(__ipa.value, __ipa.set, None, 'The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal music. String content is limited to IPA 2005 symbols represented in Unicode 6.0.')


    # Element mute uses Python identifier mute
    __mute = p_ElementDeclaration(p_ExpandedName(None, 'mute'), 'mute', '__AbsentNamespace0_play_mute', True, p_Location('musicxml.xsd', 2241, 4), )


    mute = property(__mute.value, __mute.set, None, None)


    # Element semi-pitched uses Python identifier semi_pitched
    __semi_pitched = p_ElementDeclaration(p_ExpandedName(None, 'semi-pitched'), 'semi_pitched', '__AbsentNamespace0_play_semi_pitched', True, p_Location('musicxml.xsd', 2242, 4), )


    semi_pitched = property(__semi_pitched.value, __semi_pitched.set, None, None)


    # Element other-play uses Python identifier other_play
    __other_play = p_ElementDeclaration(p_ExpandedName(None, 'other-play'), 'other_play', '__AbsentNamespace0_play_other_play', True, p_Location('musicxml.xsd', 2243, 4), )


    other_play = property(__other_play.value, __other_play.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_play_id', p_IDREF)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 2246, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 2246, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __ipa.name() : __ipa,
        __mute.name() : __mute,
        __semi_pitched.name() : __semi_pitched,
        __other_play.name() : __other_play
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.play = play
Namespace.addCategoryObject('typeBinding', 'play', play)


# Complex type typed-text with content type SIMPLE
class typed_text (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'typed-text')
    _XSDLocation = p_Location('musicxml.xsd', 2261, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_typed_text_type', p_token)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2267, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 2267, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.typed_text = typed_text
Namespace.addCategoryObject('typeBinding', 'typed-text', typed_text)


# Complex type attributes with content type ELEMENT_ONLY
class attributes (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'attributes')
    _XSDLocation = p_Location('musicxml.xsd', 2286, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element divisions uses Python identifier divisions
    __divisions = p_ElementDeclaration(p_ExpandedName(None, 'divisions'), 'divisions', '__AbsentNamespace0_attributes_divisions', False, p_Location('musicxml.xsd', 2293, 3), )


    divisions = property(__divisions.value, __divisions.set, None, "Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.")


    # Element key uses Python identifier key
    __key = p_ElementDeclaration(p_ExpandedName(None, 'key'), 'key', '__AbsentNamespace0_attributes_key', True, p_Location('musicxml.xsd', 2299, 3), )


    key = property(__key.value, __key.set, None, 'The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.')


    # Element time uses Python identifier time
    __time = p_ElementDeclaration(p_ExpandedName(None, 'time'), 'time', '__AbsentNamespace0_attributes_time', True, p_Location('musicxml.xsd', 2305, 3), )


    time = property(__time.value, __time.set, None, 'Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.')


    # Element staves uses Python identifier staves
    __staves = p_ElementDeclaration(p_ExpandedName(None, 'staves'), 'staves', '__AbsentNamespace0_attributes_staves', False, p_Location('musicxml.xsd', 2311, 3), )


    staves = property(__staves.value, __staves.set, None, 'The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.')


    # Element part-symbol uses Python identifier part_symbol
    __part_symbol = p_ElementDeclaration(p_ExpandedName(None, 'part-symbol'), 'part_symbol', '__AbsentNamespace0_attributes_part_symbol', False, p_Location('musicxml.xsd', 2317, 3), )


    part_symbol = property(__part_symbol.value, __part_symbol.set, None, 'The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score.')


    # Element instruments uses Python identifier instruments
    __instruments = p_ElementDeclaration(p_ExpandedName(None, 'instruments'), 'instruments', '__AbsentNamespace0_attributes_instruments', False, p_Location('musicxml.xsd', 2323, 3), )


    instruments = property(__instruments.value, __instruments.set, None, 'The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.')


    # Element clef uses Python identifier clef
    __clef = p_ElementDeclaration(p_ExpandedName(None, 'clef'), 'clef', '__AbsentNamespace0_attributes_clef', True, p_Location('musicxml.xsd', 2329, 3), )


    clef = property(__clef.value, __clef.set, None, 'Clefs are represented by a combination of sign, line, and clef-octave-change elements.')


    # Element staff-details uses Python identifier staff_details
    __staff_details = p_ElementDeclaration(p_ExpandedName(None, 'staff-details'), 'staff_details', '__AbsentNamespace0_attributes_staff_details', True, p_Location('musicxml.xsd', 2335, 3), )


    staff_details = property(__staff_details.value, __staff_details.set, None, 'The staff-details element is used to indicate different types of staves.')


    # Element transpose uses Python identifier transpose
    __transpose = p_ElementDeclaration(p_ExpandedName(None, 'transpose'), 'transpose', '__AbsentNamespace0_attributes_transpose', True, p_Location('musicxml.xsd', 2341, 3), )


    transpose = property(__transpose.value, __transpose.set, None, 'If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.')


    # Element directive uses Python identifier directive
    __directive = p_ElementDeclaration(p_ExpandedName(None, 'directive'), 'directive', '__AbsentNamespace0_attributes_directive', True, p_Location('musicxml.xsd', 2347, 3), )


    directive = property(__directive.value, __directive.set, None, 'Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166.')


    # Element measure-style uses Python identifier measure_style
    __measure_style = p_ElementDeclaration(p_ExpandedName(None, 'measure-style'), 'measure_style', '__AbsentNamespace0_attributes_measure_style', True, p_Location('musicxml.xsd', 2361, 3), )


    measure_style = property(__measure_style.value, __measure_style.set, None, 'A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.')


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_attributes_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_attributes_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)

    _ElementMap.update({
        __divisions.name() : __divisions,
        __key.name() : __key,
        __time.name() : __time,
        __staves.name() : __staves,
        __part_symbol.name() : __part_symbol,
        __instruments.name() : __instruments,
        __clef.name() : __clef,
        __staff_details.name() : __staff_details,
        __transpose.name() : __transpose,
        __directive.name() : __directive,
        __measure_style.name() : __measure_style,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({

    })
_module_typeBindings.attributes = attributes
Namespace.addCategoryObject('typeBinding', 'attributes', attributes)


# Complex type bass with content type ELEMENT_ONLY
class bass (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bass')
    _XSDLocation = p_Location('musicxml.xsd', 2733, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element bass-step uses Python identifier bass_step
    __bass_step = p_ElementDeclaration(p_ExpandedName(None, 'bass-step'), 'bass_step', '__AbsentNamespace0_bass_bass_step', False, p_Location('musicxml.xsd', 2738, 3), )


    bass_step = property(__bass_step.value, __bass_step.set, None, None)


    # Element bass-alter uses Python identifier bass_alter
    __bass_alter = p_ElementDeclaration(p_ExpandedName(None, 'bass-alter'), 'bass_alter', '__AbsentNamespace0_bass_bass_alter', False, p_Location('musicxml.xsd', 2739, 3), )


    bass_alter = property(__bass_alter.value, __bass_alter.set, None, None)

    _ElementMap.update({
        __bass_step.name() : __bass_step,
        __bass_alter.name() : __bass_alter
    })
    _AttributeMap.update({

    })
_module_typeBindings.bass = bass
Namespace.addCategoryObject('typeBinding', 'bass', bass)


# Complex type direction-type with content type ELEMENT_ONLY
class direction_type (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'direction-type')
    _XSDLocation = p_Location('musicxml.xsd', 2872, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element rehearsal uses Python identifier rehearsal
    __rehearsal = p_ElementDeclaration(p_ExpandedName(None, 'rehearsal'), 'rehearsal', '__AbsentNamespace0_direction_type_rehearsal', True, p_Location('musicxml.xsd', 2877, 3), )


    rehearsal = property(__rehearsal.value, __rehearsal.set, None, 'The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default. Left justification is assumed if not specified.')


    # Element segno uses Python identifier segno
    __segno = p_ElementDeclaration(p_ExpandedName(None, 'segno'), 'segno', '__AbsentNamespace0_direction_type_segno', True, p_Location('musicxml.xsd', 2882, 3), )


    segno = property(__segno.value, __segno.set, None, 'The segno element is the visual indicator of a segno sign. A sound element is needed to guide playback applications reliably.')


    # Element words uses Python identifier words
    __words = p_ElementDeclaration(p_ExpandedName(None, 'words'), 'words', '__AbsentNamespace0_direction_type_words', True, p_Location('musicxml.xsd', 2887, 3), )


    words = property(__words.value, __words.set, None, 'The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.')


    # Element coda uses Python identifier coda
    __coda = p_ElementDeclaration(p_ExpandedName(None, 'coda'), 'coda', '__AbsentNamespace0_direction_type_coda', True, p_Location('musicxml.xsd', 2892, 3), )


    coda = property(__coda.value, __coda.set, None, 'The coda element is the visual indicator of a coda sign. A sound element is needed to guide playback applications reliably.')


    # Element wedge uses Python identifier wedge
    __wedge = p_ElementDeclaration(p_ExpandedName(None, 'wedge'), 'wedge', '__AbsentNamespace0_direction_type_wedge', False, p_Location('musicxml.xsd', 2897, 3), )


    wedge = property(__wedge.value, __wedge.set, None, None)


    # Element dynamics uses Python identifier dynamics
    __dynamics = p_ElementDeclaration(p_ExpandedName(None, 'dynamics'), 'dynamics', '__AbsentNamespace0_direction_type_dynamics', True, p_Location('musicxml.xsd', 2898, 3), )


    dynamics = property(__dynamics.value, __dynamics.set, None, None)


    # Element dashes uses Python identifier dashes
    __dashes = p_ElementDeclaration(p_ExpandedName(None, 'dashes'), 'dashes', '__AbsentNamespace0_direction_type_dashes', False, p_Location('musicxml.xsd', 2899, 3), )


    dashes = property(__dashes.value, __dashes.set, None, None)


    # Element bracket uses Python identifier bracket
    __bracket = p_ElementDeclaration(p_ExpandedName(None, 'bracket'), 'bracket', '__AbsentNamespace0_direction_type_bracket', False, p_Location('musicxml.xsd', 2900, 3), )


    bracket = property(__bracket.value, __bracket.set, None, None)


    # Element pedal uses Python identifier pedal
    __pedal = p_ElementDeclaration(p_ExpandedName(None, 'pedal'), 'pedal', '__AbsentNamespace0_direction_type_pedal', False, p_Location('musicxml.xsd', 2901, 3), )


    pedal = property(__pedal.value, __pedal.set, None, None)


    # Element metronome uses Python identifier metronome
    __metronome = p_ElementDeclaration(p_ExpandedName(None, 'metronome'), 'metronome', '__AbsentNamespace0_direction_type_metronome', False, p_Location('musicxml.xsd', 2902, 3), )


    metronome = property(__metronome.value, __metronome.set, None, None)


    # Element octave-shift uses Python identifier octave_shift
    __octave_shift = p_ElementDeclaration(p_ExpandedName(None, 'octave-shift'), 'octave_shift', '__AbsentNamespace0_direction_type_octave_shift', False, p_Location('musicxml.xsd', 2903, 3), )


    octave_shift = property(__octave_shift.value, __octave_shift.set, None, None)


    # Element harp-pedals uses Python identifier harp_pedals
    __harp_pedals = p_ElementDeclaration(p_ExpandedName(None, 'harp-pedals'), 'harp_pedals', '__AbsentNamespace0_direction_type_harp_pedals', False, p_Location('musicxml.xsd', 2904, 3), )


    harp_pedals = property(__harp_pedals.value, __harp_pedals.set, None, None)


    # Element damp uses Python identifier damp
    __damp = p_ElementDeclaration(p_ExpandedName(None, 'damp'), 'damp', '__AbsentNamespace0_direction_type_damp', False, p_Location('musicxml.xsd', 2905, 3), )


    damp = property(__damp.value, __damp.set, None, 'The damp element specifies a harp damping mark.')


    # Element damp-all uses Python identifier damp_all
    __damp_all = p_ElementDeclaration(p_ExpandedName(None, 'damp-all'), 'damp_all', '__AbsentNamespace0_direction_type_damp_all', False, p_Location('musicxml.xsd', 2910, 3), )


    damp_all = property(__damp_all.value, __damp_all.set, None, 'The damp-all element specifies a harp damping mark for all strings.')


    # Element eyeglasses uses Python identifier eyeglasses
    __eyeglasses = p_ElementDeclaration(p_ExpandedName(None, 'eyeglasses'), 'eyeglasses', '__AbsentNamespace0_direction_type_eyeglasses', False, p_Location('musicxml.xsd', 2915, 3), )


    eyeglasses = property(__eyeglasses.value, __eyeglasses.set, None, 'The eyeglasses element specifies the eyeglasses symbol, common in commercial music.')


    # Element string-mute uses Python identifier string_mute
    __string_mute = p_ElementDeclaration(p_ExpandedName(None, 'string-mute'), 'string_mute', '__AbsentNamespace0_direction_type_string_mute', False, p_Location('musicxml.xsd', 2920, 3), )


    string_mute = property(__string_mute.value, __string_mute.set, None, None)


    # Element scordatura uses Python identifier scordatura
    __scordatura = p_ElementDeclaration(p_ExpandedName(None, 'scordatura'), 'scordatura', '__AbsentNamespace0_direction_type_scordatura', False, p_Location('musicxml.xsd', 2921, 3), )


    scordatura = property(__scordatura.value, __scordatura.set, None, None)


    # Element image uses Python identifier image
    __image = p_ElementDeclaration(p_ExpandedName(None, 'image'), 'image', '__AbsentNamespace0_direction_type_image', False, p_Location('musicxml.xsd', 2922, 3), )


    image = property(__image.value, __image.set, None, None)


    # Element principal-voice uses Python identifier principal_voice
    __principal_voice = p_ElementDeclaration(p_ExpandedName(None, 'principal-voice'), 'principal_voice', '__AbsentNamespace0_direction_type_principal_voice', False, p_Location('musicxml.xsd', 2923, 3), )


    principal_voice = property(__principal_voice.value, __principal_voice.set, None, None)


    # Element accordion-registration uses Python identifier accordion_registration
    __accordion_registration = p_ElementDeclaration(p_ExpandedName(None, 'accordion-registration'), 'accordion_registration', '__AbsentNamespace0_direction_type_accordion_registration', False, p_Location('musicxml.xsd', 2924, 3), )


    accordion_registration = property(__accordion_registration.value, __accordion_registration.set, None, None)


    # Element percussion uses Python identifier percussion
    __percussion = p_ElementDeclaration(p_ExpandedName(None, 'percussion'), 'percussion', '__AbsentNamespace0_direction_type_percussion', True, p_Location('musicxml.xsd', 2925, 3), )


    percussion = property(__percussion.value, __percussion.set, None, None)


    # Element other-direction uses Python identifier other_direction
    __other_direction = p_ElementDeclaration(p_ExpandedName(None, 'other-direction'), 'other_direction', '__AbsentNamespace0_direction_type_other_direction', False, p_Location('musicxml.xsd', 2926, 3), )


    other_direction = property(__other_direction.value, __other_direction.set, None, None)

    _ElementMap.update({
        __rehearsal.name() : __rehearsal,
        __segno.name() : __segno,
        __words.name() : __words,
        __coda.name() : __coda,
        __wedge.name() : __wedge,
        __dynamics.name() : __dynamics,
        __dashes.name() : __dashes,
        __bracket.name() : __bracket,
        __pedal.name() : __pedal,
        __metronome.name() : __metronome,
        __octave_shift.name() : __octave_shift,
        __harp_pedals.name() : __harp_pedals,
        __damp.name() : __damp,
        __damp_all.name() : __damp_all,
        __eyeglasses.name() : __eyeglasses,
        __string_mute.name() : __string_mute,
        __scordatura.name() : __scordatura,
        __image.name() : __image,
        __principal_voice.name() : __principal_voice,
        __accordion_registration.name() : __accordion_registration,
        __percussion.name() : __percussion,
        __other_direction.name() : __other_direction
    })
    _AttributeMap.update({

    })
_module_typeBindings.direction_type = direction_type
Namespace.addCategoryObject('typeBinding', 'direction-type', direction_type)


# Complex type feature with content type SIMPLE
class feature (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'feature')
    _XSDLocation = p_Location('musicxml.xsd', 2930, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_feature_type', p_token)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2936, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 2936, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.feature = feature
Namespace.addCategoryObject('typeBinding', 'feature', feature)


# Complex type frame-note with content type ELEMENT_ONLY
class frame_note (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'frame-note')
    _XSDLocation = p_Location('musicxml.xsd', 2980, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element string uses Python identifier string
    __string = p_ElementDeclaration(p_ExpandedName(None, 'string'), 'string', '__AbsentNamespace0_frame_note_string', False, p_Location('musicxml.xsd', 2985, 3), )


    string = property(__string.value, __string.set, None, None)


    # Element fret uses Python identifier fret
    __fret = p_ElementDeclaration(p_ExpandedName(None, 'fret'), 'fret', '__AbsentNamespace0_frame_note_fret', False, p_Location('musicxml.xsd', 2986, 3), )


    fret = property(__fret.value, __fret.set, None, None)


    # Element fingering uses Python identifier fingering
    __fingering = p_ElementDeclaration(p_ExpandedName(None, 'fingering'), 'fingering', '__AbsentNamespace0_frame_note_fingering', False, p_Location('musicxml.xsd', 2987, 3), )


    fingering = property(__fingering.value, __fingering.set, None, None)


    # Element barre uses Python identifier barre
    __barre = p_ElementDeclaration(p_ExpandedName(None, 'barre'), 'barre', '__AbsentNamespace0_frame_note_barre', False, p_Location('musicxml.xsd', 2988, 3), )


    barre = property(__barre.value, __barre.set, None, None)

    _ElementMap.update({
        __string.name() : __string,
        __fret.name() : __fret,
        __fingering.name() : __fingering,
        __barre.name() : __barre
    })
    _AttributeMap.update({

    })
_module_typeBindings.frame_note = frame_note
Namespace.addCategoryObject('typeBinding', 'frame-note', frame_note)


# Complex type metronome-note with content type ELEMENT_ONLY
class metronome_note (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'metronome-note')
    _XSDLocation = p_Location('musicxml.xsd', 3139, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element metronome-type uses Python identifier metronome_type
    __metronome_type = p_ElementDeclaration(p_ExpandedName(None, 'metronome-type'), 'metronome_type', '__AbsentNamespace0_metronome_note_metronome_type', False, p_Location('musicxml.xsd', 3144, 3), )


    metronome_type = property(__metronome_type.value, __metronome_type.set, None, 'The metronome-type element works like the type element in defining metric relationships.')


    # Element metronome-dot uses Python identifier metronome_dot
    __metronome_dot = p_ElementDeclaration(p_ExpandedName(None, 'metronome-dot'), 'metronome_dot', '__AbsentNamespace0_metronome_note_metronome_dot', True, p_Location('musicxml.xsd', 3149, 3), )


    metronome_dot = property(__metronome_dot.value, __metronome_dot.set, None, 'The metronome-dot element works like the dot element in defining metric relationships.')


    # Element metronome-beam uses Python identifier metronome_beam
    __metronome_beam = p_ElementDeclaration(p_ExpandedName(None, 'metronome-beam'), 'metronome_beam', '__AbsentNamespace0_metronome_note_metronome_beam', True, p_Location('musicxml.xsd', 3154, 3), )


    metronome_beam = property(__metronome_beam.value, __metronome_beam.set, None, None)


    # Element metronome-tuplet uses Python identifier metronome_tuplet
    __metronome_tuplet = p_ElementDeclaration(p_ExpandedName(None, 'metronome-tuplet'), 'metronome_tuplet', '__AbsentNamespace0_metronome_note_metronome_tuplet', False, p_Location('musicxml.xsd', 3155, 3), )


    metronome_tuplet = property(__metronome_tuplet.value, __metronome_tuplet.set, None, None)

    _ElementMap.update({
        __metronome_type.name() : __metronome_type,
        __metronome_dot.name() : __metronome_dot,
        __metronome_beam.name() : __metronome_beam,
        __metronome_tuplet.name() : __metronome_tuplet
    })
    _AttributeMap.update({

    })
_module_typeBindings.metronome_note = metronome_note
Namespace.addCategoryObject('typeBinding', 'metronome-note', metronome_note)


# Complex type pedal-tuning with content type ELEMENT_ONLY
class pedal_tuning (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'pedal-tuning')
    _XSDLocation = p_Location('musicxml.xsd', 3216, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element pedal-step uses Python identifier pedal_step
    __pedal_step = p_ElementDeclaration(p_ExpandedName(None, 'pedal-step'), 'pedal_step', '__AbsentNamespace0_pedal_tuning_pedal_step', False, p_Location('musicxml.xsd', 3221, 3), )


    pedal_step = property(__pedal_step.value, __pedal_step.set, None, 'The pedal-step element defines the pitch step for a single harp pedal.')


    # Element pedal-alter uses Python identifier pedal_alter
    __pedal_alter = p_ElementDeclaration(p_ExpandedName(None, 'pedal-alter'), 'pedal_alter', '__AbsentNamespace0_pedal_tuning_pedal_alter', False, p_Location('musicxml.xsd', 3226, 3), )


    pedal_alter = property(__pedal_alter.value, __pedal_alter.set, None, 'The pedal-alter element defines the chromatic alteration for a single harp pedal.')

    _ElementMap.update({
        __pedal_step.name() : __pedal_step,
        __pedal_alter.name() : __pedal_alter
    })
    _AttributeMap.update({

    })
_module_typeBindings.pedal_tuning = pedal_tuning
Namespace.addCategoryObject('typeBinding', 'pedal-tuning', pedal_tuning)


# Complex type root with content type ELEMENT_ONLY
class root (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'root')
    _XSDLocation = p_Location('musicxml.xsd', 3295, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element root-step uses Python identifier root_step
    __root_step = p_ElementDeclaration(p_ExpandedName(None, 'root-step'), 'root_step', '__AbsentNamespace0_root_root_step', False, p_Location('musicxml.xsd', 3300, 3), )


    root_step = property(__root_step.value, __root_step.set, None, None)


    # Element root-alter uses Python identifier root_alter
    __root_alter = p_ElementDeclaration(p_ExpandedName(None, 'root-alter'), 'root_alter', '__AbsentNamespace0_root_root_alter', False, p_Location('musicxml.xsd', 3301, 3), )


    root_alter = property(__root_alter.value, __root_alter.set, None, None)

    _ElementMap.update({
        __root_step.name() : __root_step,
        __root_alter.name() : __root_alter
    })
    _AttributeMap.update({

    })
_module_typeBindings.root = root
Namespace.addCategoryObject('typeBinding', 'root', root)


# Complex type scordatura with content type ELEMENT_ONLY
class scordatura (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'scordatura')
    _XSDLocation = p_Location('musicxml.xsd', 3330, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element accord uses Python identifier accord
    __accord = p_ElementDeclaration(p_ExpandedName(None, 'accord'), 'accord', '__AbsentNamespace0_scordatura_accord', True, p_Location('musicxml.xsd', 3335, 3), )


    accord = property(__accord.value, __accord.set, None, None)

    _ElementMap.update({
        __accord.name() : __accord
    })
    _AttributeMap.update({

    })
_module_typeBindings.scordatura = scordatura
Namespace.addCategoryObject('typeBinding', 'scordatura', scordatura)


# Complex type encoding with content type ELEMENT_ONLY
class encoding (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'encoding')
    _XSDLocation = p_Location('musicxml.xsd', 3431, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element encoding-date uses Python identifier encoding_date
    __encoding_date = p_ElementDeclaration(p_ExpandedName(None, 'encoding-date'), 'encoding_date', '__AbsentNamespace0_encoding_encoding_date', True, p_Location('musicxml.xsd', 3436, 3), )


    encoding_date = property(__encoding_date.value, __encoding_date.set, None, None)


    # Element encoder uses Python identifier encoder
    __encoder = p_ElementDeclaration(p_ExpandedName(None, 'encoder'), 'encoder', '__AbsentNamespace0_encoding_encoder', True, p_Location('musicxml.xsd', 3437, 3), )


    encoder = property(__encoder.value, __encoder.set, None, None)


    # Element software uses Python identifier software
    __software = p_ElementDeclaration(p_ExpandedName(None, 'software'), 'software', '__AbsentNamespace0_encoding_software', True, p_Location('musicxml.xsd', 3438, 3), )


    software = property(__software.value, __software.set, None, None)


    # Element encoding-description uses Python identifier encoding_description
    __encoding_description = p_ElementDeclaration(p_ExpandedName(None, 'encoding-description'), 'encoding_description', '__AbsentNamespace0_encoding_encoding_description', True, p_Location('musicxml.xsd', 3439, 3), )


    encoding_description = property(__encoding_description.value, __encoding_description.set, None, None)


    # Element supports uses Python identifier supports
    __supports = p_ElementDeclaration(p_ExpandedName(None, 'supports'), 'supports', '__AbsentNamespace0_encoding_supports', True, p_Location('musicxml.xsd', 3440, 3), )


    supports = property(__supports.value, __supports.set, None, None)

    _ElementMap.update({
        __encoding_date.name() : __encoding_date,
        __encoder.name() : __encoder,
        __software.name() : __software,
        __encoding_description.name() : __encoding_description,
        __supports.name() : __supports
    })
    _AttributeMap.update({

    })
_module_typeBindings.encoding = encoding
Namespace.addCategoryObject('typeBinding', 'encoding', encoding)


# Complex type identification with content type ELEMENT_ONLY
class identification (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'identification')
    _XSDLocation = p_Location('musicxml.xsd', 3444, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element creator uses Python identifier creator
    __creator = p_ElementDeclaration(p_ExpandedName(None, 'creator'), 'creator', '__AbsentNamespace0_identification_creator', True, p_Location('musicxml.xsd', 3449, 3), )


    creator = property(__creator.value, __creator.set, None, 'The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.')


    # Element rights uses Python identifier rights
    __rights = p_ElementDeclaration(p_ExpandedName(None, 'rights'), 'rights', '__AbsentNamespace0_identification_rights', True, p_Location('musicxml.xsd', 3454, 3), )


    rights = property(__rights.value, __rights.set, None, 'The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.')


    # Element encoding uses Python identifier encoding
    __encoding = p_ElementDeclaration(p_ExpandedName(None, 'encoding'), 'encoding', '__AbsentNamespace0_identification_encoding', False, p_Location('musicxml.xsd', 3459, 3), )


    encoding = property(__encoding.value, __encoding.set, None, None)


    # Element source uses Python identifier source
    __source = p_ElementDeclaration(p_ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_identification_source', False, p_Location('musicxml.xsd', 3460, 3), )


    source = property(__source.value, __source.set, None, 'The source for the music that is encoded. This is similar to the Dublin Core source element.')


    # Element relation uses Python identifier relation
    __relation = p_ElementDeclaration(p_ExpandedName(None, 'relation'), 'relation', '__AbsentNamespace0_identification_relation', True, p_Location('musicxml.xsd', 3465, 3), )


    relation = property(__relation.value, __relation.set, None, 'A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.')


    # Element miscellaneous uses Python identifier miscellaneous
    __miscellaneous = p_ElementDeclaration(p_ExpandedName(None, 'miscellaneous'), 'miscellaneous', '__AbsentNamespace0_identification_miscellaneous', False, p_Location('musicxml.xsd', 3470, 3), )


    miscellaneous = property(__miscellaneous.value, __miscellaneous.set, None, None)

    _ElementMap.update({
        __creator.name() : __creator,
        __rights.name() : __rights,
        __encoding.name() : __encoding,
        __source.name() : __source,
        __relation.name() : __relation,
        __miscellaneous.name() : __miscellaneous
    })
    _AttributeMap.update({

    })
_module_typeBindings.identification = identification
Namespace.addCategoryObject('typeBinding', 'identification', identification)


# Complex type miscellaneous with content type ELEMENT_ONLY
class miscellaneous (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'miscellaneous')
    _XSDLocation = p_Location('musicxml.xsd', 3474, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element miscellaneous-field uses Python identifier miscellaneous_field
    __miscellaneous_field = p_ElementDeclaration(p_ExpandedName(None, 'miscellaneous-field'), 'miscellaneous_field', '__AbsentNamespace0_miscellaneous_miscellaneous_field', True, p_Location('musicxml.xsd', 3479, 3), )


    miscellaneous_field = property(__miscellaneous_field.value, __miscellaneous_field.set, None, None)

    _ElementMap.update({
        __miscellaneous_field.name() : __miscellaneous_field
    })
    _AttributeMap.update({

    })
_module_typeBindings.miscellaneous = miscellaneous
Namespace.addCategoryObject('typeBinding', 'miscellaneous', miscellaneous)


# Complex type miscellaneous-field with content type SIMPLE
class miscellaneous_field (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'miscellaneous-field')
    _XSDLocation = p_Location('musicxml.xsd', 3483, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute name uses Python identifier name
    __name = p_AttributeUse(p_ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_miscellaneous_field_name', p_token, required=True)
    __name._DeclarationLocation = p_Location('musicxml.xsd', 3489, 4)
    __name._UseLocation = p_Location('musicxml.xsd', 3489, 4)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.miscellaneous_field = miscellaneous_field
Namespace.addCategoryObject('typeBinding', 'miscellaneous-field', miscellaneous_field)


# Complex type appearance with content type ELEMENT_ONLY
class appearance (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'appearance')
    _XSDLocation = p_Location('musicxml.xsd', 3506, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element line-width uses Python identifier line_width
    __line_width = p_ElementDeclaration(p_ExpandedName(None, 'line-width'), 'line_width', '__AbsentNamespace0_appearance_line_width', True, p_Location('musicxml.xsd', 3511, 3), )


    line_width = property(__line_width.value, __line_width.set, None, None)


    # Element note-size uses Python identifier note_size
    __note_size = p_ElementDeclaration(p_ExpandedName(None, 'note-size'), 'note_size', '__AbsentNamespace0_appearance_note_size', True, p_Location('musicxml.xsd', 3512, 3), )


    note_size = property(__note_size.value, __note_size.set, None, None)


    # Element distance uses Python identifier distance
    __distance = p_ElementDeclaration(p_ExpandedName(None, 'distance'), 'distance', '__AbsentNamespace0_appearance_distance', True, p_Location('musicxml.xsd', 3513, 3), )


    distance = property(__distance.value, __distance.set, None, None)


    # Element other-appearance uses Python identifier other_appearance
    __other_appearance = p_ElementDeclaration(p_ExpandedName(None, 'other-appearance'), 'other_appearance', '__AbsentNamespace0_appearance_other_appearance', True, p_Location('musicxml.xsd', 3514, 3), )


    other_appearance = property(__other_appearance.value, __other_appearance.set, None, None)

    _ElementMap.update({
        __line_width.name() : __line_width,
        __note_size.name() : __note_size,
        __distance.name() : __distance,
        __other_appearance.name() : __other_appearance
    })
    _AttributeMap.update({

    })
_module_typeBindings.appearance = appearance
Namespace.addCategoryObject('typeBinding', 'appearance', appearance)


# Complex type measure-layout with content type ELEMENT_ONLY
class measure_layout (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'measure-layout')
    _XSDLocation = p_Location('musicxml.xsd', 3540, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element measure-distance uses Python identifier measure_distance
    __measure_distance = p_ElementDeclaration(p_ExpandedName(None, 'measure-distance'), 'measure_distance', '__AbsentNamespace0_measure_layout_measure_distance', False, p_Location('musicxml.xsd', 3545, 3), )


    measure_distance = property(__measure_distance.value, __measure_distance.set, None, 'The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.')

    _ElementMap.update({
        __measure_distance.name() : __measure_distance
    })
    _AttributeMap.update({

    })
_module_typeBindings.measure_layout = measure_layout
Namespace.addCategoryObject('typeBinding', 'measure-layout', measure_layout)


# Complex type other-appearance with content type SIMPLE
class other_appearance (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'other-appearance')
    _XSDLocation = p_Location('musicxml.xsd', 3564, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_other_appearance_type', p_token, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3570, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3570, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.other_appearance = other_appearance
Namespace.addCategoryObject('typeBinding', 'other-appearance', other_appearance)


# Complex type page-layout with content type ELEMENT_ONLY
class page_layout (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'page-layout')
    _XSDLocation = p_Location('musicxml.xsd', 3575, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element page-height uses Python identifier page_height
    __page_height = p_ElementDeclaration(p_ExpandedName(None, 'page-height'), 'page_height', '__AbsentNamespace0_page_layout_page_height', False, p_Location('musicxml.xsd', 3581, 4), )


    page_height = property(__page_height.value, __page_height.set, None, None)


    # Element page-width uses Python identifier page_width
    __page_width = p_ElementDeclaration(p_ExpandedName(None, 'page-width'), 'page_width', '__AbsentNamespace0_page_layout_page_width', False, p_Location('musicxml.xsd', 3582, 4), )


    page_width = property(__page_width.value, __page_width.set, None, None)


    # Element page-margins uses Python identifier page_margins
    __page_margins = p_ElementDeclaration(p_ExpandedName(None, 'page-margins'), 'page_margins', '__AbsentNamespace0_page_layout_page_margins', True, p_Location('musicxml.xsd', 3584, 3), )


    page_margins = property(__page_margins.value, __page_margins.set, None, None)

    _ElementMap.update({
        __page_height.name() : __page_height,
        __page_width.name() : __page_width,
        __page_margins.name() : __page_margins
    })
    _AttributeMap.update({

    })
_module_typeBindings.page_layout = page_layout
Namespace.addCategoryObject('typeBinding', 'page-layout', page_layout)


# Complex type scaling with content type ELEMENT_ONLY
class scaling (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'scaling')
    _XSDLocation = p_Location('musicxml.xsd', 3596, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element millimeters uses Python identifier millimeters
    __millimeters = p_ElementDeclaration(p_ExpandedName(None, 'millimeters'), 'millimeters', '__AbsentNamespace0_scaling_millimeters', False, p_Location('musicxml.xsd', 3601, 3), )


    millimeters = property(__millimeters.value, __millimeters.set, None, None)


    # Element tenths uses Python identifier tenths
    __tenths = p_ElementDeclaration(p_ExpandedName(None, 'tenths'), 'tenths', '__AbsentNamespace0_scaling_tenths', False, p_Location('musicxml.xsd', 3602, 3), )


    tenths = property(__tenths.value, __tenths.set, None, None)

    _ElementMap.update({
        __millimeters.name() : __millimeters,
        __tenths.name() : __tenths
    })
    _AttributeMap.update({

    })
_module_typeBindings.scaling = scaling
Namespace.addCategoryObject('typeBinding', 'scaling', scaling)


# Complex type system-dividers with content type ELEMENT_ONLY
class system_dividers (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'system-dividers')
    _XSDLocation = p_Location('musicxml.xsd', 3616, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element left-divider uses Python identifier left_divider
    __left_divider = p_ElementDeclaration(p_ExpandedName(None, 'left-divider'), 'left_divider', '__AbsentNamespace0_system_dividers_left_divider', False, p_Location('musicxml.xsd', 3623, 3), )


    left_divider = property(__left_divider.value, __left_divider.set, None, None)


    # Element right-divider uses Python identifier right_divider
    __right_divider = p_ElementDeclaration(p_ExpandedName(None, 'right-divider'), 'right_divider', '__AbsentNamespace0_system_dividers_right_divider', False, p_Location('musicxml.xsd', 3624, 3), )


    right_divider = property(__right_divider.value, __right_divider.set, None, None)

    _ElementMap.update({
        __left_divider.name() : __left_divider,
        __right_divider.name() : __right_divider
    })
    _AttributeMap.update({

    })
_module_typeBindings.system_dividers = system_dividers
Namespace.addCategoryObject('typeBinding', 'system-dividers', system_dividers)


# Complex type system-layout with content type ELEMENT_ONLY
class system_layout (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'system-layout')
    _XSDLocation = p_Location('musicxml.xsd', 3628, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element system-margins uses Python identifier system_margins
    __system_margins = p_ElementDeclaration(p_ExpandedName(None, 'system-margins'), 'system_margins', '__AbsentNamespace0_system_layout_system_margins', False, p_Location('musicxml.xsd', 3635, 3), )


    system_margins = property(__system_margins.value, __system_margins.set, None, None)


    # Element system-distance uses Python identifier system_distance
    __system_distance = p_ElementDeclaration(p_ExpandedName(None, 'system-distance'), 'system_distance', '__AbsentNamespace0_system_layout_system_distance', False, p_Location('musicxml.xsd', 3636, 3), )


    system_distance = property(__system_distance.value, __system_distance.set, None, None)


    # Element top-system-distance uses Python identifier top_system_distance
    __top_system_distance = p_ElementDeclaration(p_ExpandedName(None, 'top-system-distance'), 'top_system_distance', '__AbsentNamespace0_system_layout_top_system_distance', False, p_Location('musicxml.xsd', 3637, 3), )


    top_system_distance = property(__top_system_distance.value, __top_system_distance.set, None, None)


    # Element system-dividers uses Python identifier system_dividers
    __system_dividers = p_ElementDeclaration(p_ExpandedName(None, 'system-dividers'), 'system_dividers', '__AbsentNamespace0_system_layout_system_dividers', False, p_Location('musicxml.xsd', 3638, 3), )


    system_dividers = property(__system_dividers.value, __system_dividers.set, None, None)

    _ElementMap.update({
        __system_margins.name() : __system_margins,
        __system_distance.name() : __system_distance,
        __top_system_distance.name() : __top_system_distance,
        __system_dividers.name() : __system_dividers
    })
    _AttributeMap.update({

    })
_module_typeBindings.system_layout = system_layout
Namespace.addCategoryObject('typeBinding', 'system-layout', system_layout)


# Complex type system-margins with content type ELEMENT_ONLY
class system_margins (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'system-margins')
    _XSDLocation = p_Location('musicxml.xsd', 3642, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element left-margin uses Python identifier left_margin
    __left_margin = p_ElementDeclaration(p_ExpandedName(None, 'left-margin'), 'left_margin', '__AbsentNamespace0_system_margins_left_margin', False, p_Location('musicxml.xsd', 5255, 3), )


    left_margin = property(__left_margin.value, __left_margin.set, None, None)


    # Element right-margin uses Python identifier right_margin
    __right_margin = p_ElementDeclaration(p_ExpandedName(None, 'right-margin'), 'right_margin', '__AbsentNamespace0_system_margins_right_margin', False, p_Location('musicxml.xsd', 5256, 3), )


    right_margin = property(__right_margin.value, __right_margin.set, None, None)

    _ElementMap.update({
        __left_margin.name() : __left_margin,
        __right_margin.name() : __right_margin
    })
    _AttributeMap.update({

    })
_module_typeBindings.system_margins = system_margins
Namespace.addCategoryObject('typeBinding', 'system-margins', system_margins)


# Complex type bookmark with content type EMPTY
class bookmark (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bookmark')
    _XSDLocation = p_Location('musicxml.xsd', 3651, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute element uses Python identifier element
    __element = p_AttributeUse(p_ExpandedName(None, 'element'), 'element', '__AbsentNamespace0_bookmark_element', p_NMTOKEN)
    __element._DeclarationLocation = p_Location('musicxml.xsd', 1917, 2)
    __element._UseLocation = p_Location('musicxml.xsd', 1917, 2)

    element = property(__element.value, __element.set, None, None)


    # Attribute position uses Python identifier position
    __position = p_AttributeUse(p_ExpandedName(None, 'position'), 'position', '__AbsentNamespace0_bookmark_position', p_positiveInteger)
    __position._DeclarationLocation = p_Location('musicxml.xsd', 1918, 2)
    __position._UseLocation = p_Location('musicxml.xsd', 1918, 2)

    position = property(__position.value, __position.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_bookmark_id', p_ID, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 3655, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 3655, 2)

    id = property(__id.value, __id.set, None, None)


    # Attribute name uses Python identifier name
    __name = p_AttributeUse(p_ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_bookmark_name', p_token)
    __name._DeclarationLocation = p_Location('musicxml.xsd', 3656, 2)
    __name._UseLocation = p_Location('musicxml.xsd', 3656, 2)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __element.name() : __element,
        __position.name() : __position,
        __id.name() : __id,
        __name.name() : __name
    })
_module_typeBindings.bookmark = bookmark
Namespace.addCategoryObject('typeBinding', 'bookmark', bookmark)


# Complex type articulations with content type ELEMENT_ONLY
class articulations (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'articulations')
    _XSDLocation = p_Location('musicxml.xsd', 3709, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element accent uses Python identifier accent
    __accent = p_ElementDeclaration(p_ExpandedName(None, 'accent'), 'accent', '__AbsentNamespace0_articulations_accent', True, p_Location('musicxml.xsd', 3714, 3), )


    accent = property(__accent.value, __accent.set, None, 'The accent element indicates a regular horizontal accent mark.')


    # Element strong-accent uses Python identifier strong_accent
    __strong_accent = p_ElementDeclaration(p_ExpandedName(None, 'strong-accent'), 'strong_accent', '__AbsentNamespace0_articulations_strong_accent', True, p_Location('musicxml.xsd', 3719, 3), )


    strong_accent = property(__strong_accent.value, __strong_accent.set, None, 'The strong-accent element indicates a vertical accent mark.')


    # Element staccato uses Python identifier staccato
    __staccato = p_ElementDeclaration(p_ExpandedName(None, 'staccato'), 'staccato', '__AbsentNamespace0_articulations_staccato', True, p_Location('musicxml.xsd', 3724, 3), )


    staccato = property(__staccato.value, __staccato.set, None, 'The staccato element is used for a dot articulation, as opposed to a stroke or a wedge.')


    # Element tenuto uses Python identifier tenuto
    __tenuto = p_ElementDeclaration(p_ExpandedName(None, 'tenuto'), 'tenuto', '__AbsentNamespace0_articulations_tenuto', True, p_Location('musicxml.xsd', 3729, 3), )


    tenuto = property(__tenuto.value, __tenuto.set, None, 'The tenuto element indicates a tenuto line symbol.')


    # Element detached-legato uses Python identifier detached_legato
    __detached_legato = p_ElementDeclaration(p_ExpandedName(None, 'detached-legato'), 'detached_legato', '__AbsentNamespace0_articulations_detached_legato', True, p_Location('musicxml.xsd', 3734, 3), )


    detached_legato = property(__detached_legato.value, __detached_legato.set, None, 'The detached-legato element indicates the combination of a tenuto line and staccato dot symbol.')


    # Element staccatissimo uses Python identifier staccatissimo
    __staccatissimo = p_ElementDeclaration(p_ExpandedName(None, 'staccatissimo'), 'staccatissimo', '__AbsentNamespace0_articulations_staccatissimo', True, p_Location('musicxml.xsd', 3739, 3), )


    staccatissimo = property(__staccatissimo.value, __staccatissimo.set, None, 'The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke.')


    # Element spiccato uses Python identifier spiccato
    __spiccato = p_ElementDeclaration(p_ExpandedName(None, 'spiccato'), 'spiccato', '__AbsentNamespace0_articulations_spiccato', True, p_Location('musicxml.xsd', 3744, 3), )


    spiccato = property(__spiccato.value, __spiccato.set, None, 'The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge.')


    # Element scoop uses Python identifier scoop
    __scoop = p_ElementDeclaration(p_ExpandedName(None, 'scoop'), 'scoop', '__AbsentNamespace0_articulations_scoop', True, p_Location('musicxml.xsd', 3749, 3), )


    scoop = property(__scoop.value, __scoop.set, None, 'The scoop element is an indeterminate slide attached to a single note. The scoop element appears before the main note and comes from below the main pitch.')


    # Element plop uses Python identifier plop
    __plop = p_ElementDeclaration(p_ExpandedName(None, 'plop'), 'plop', '__AbsentNamespace0_articulations_plop', True, p_Location('musicxml.xsd', 3754, 3), )


    plop = property(__plop.value, __plop.set, None, 'The plop element is an indeterminate slide attached to a single note. The plop element appears before the main note and comes from above the main pitch.')


    # Element doit uses Python identifier doit
    __doit = p_ElementDeclaration(p_ExpandedName(None, 'doit'), 'doit', '__AbsentNamespace0_articulations_doit', True, p_Location('musicxml.xsd', 3759, 3), )


    doit = property(__doit.value, __doit.set, None, 'The doit element is an indeterminate slide attached to a single note. The doit element appears after the main note and goes above the main pitch.')


    # Element falloff uses Python identifier falloff
    __falloff = p_ElementDeclaration(p_ExpandedName(None, 'falloff'), 'falloff', '__AbsentNamespace0_articulations_falloff', True, p_Location('musicxml.xsd', 3764, 3), )


    falloff = property(__falloff.value, __falloff.set, None, 'The falloff element is an indeterminate slide attached to a single note. The falloff element appears before the main note and goes below the main pitch.')


    # Element breath-mark uses Python identifier breath_mark
    __breath_mark = p_ElementDeclaration(p_ExpandedName(None, 'breath-mark'), 'breath_mark', '__AbsentNamespace0_articulations_breath_mark', True, p_Location('musicxml.xsd', 3769, 3), )


    breath_mark = property(__breath_mark.value, __breath_mark.set, None, None)


    # Element caesura uses Python identifier caesura
    __caesura = p_ElementDeclaration(p_ExpandedName(None, 'caesura'), 'caesura', '__AbsentNamespace0_articulations_caesura', True, p_Location('musicxml.xsd', 3770, 3), )


    caesura = property(__caesura.value, __caesura.set, None, 'The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol.')


    # Element stress uses Python identifier stress
    __stress = p_ElementDeclaration(p_ExpandedName(None, 'stress'), 'stress', '__AbsentNamespace0_articulations_stress', True, p_Location('musicxml.xsd', 3775, 3), )


    stress = property(__stress.value, __stress.set, None, 'The stress element indicates a stressed note.')


    # Element unstress uses Python identifier unstress
    __unstress = p_ElementDeclaration(p_ExpandedName(None, 'unstress'), 'unstress', '__AbsentNamespace0_articulations_unstress', True, p_Location('musicxml.xsd', 3780, 3), )


    unstress = property(__unstress.value, __unstress.set, None, 'The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol.')


    # Element other-articulation uses Python identifier other_articulation
    __other_articulation = p_ElementDeclaration(p_ExpandedName(None, 'other-articulation'), 'other_articulation', '__AbsentNamespace0_articulations_other_articulation', True, p_Location('musicxml.xsd', 3785, 3), )


    other_articulation = property(__other_articulation.value, __other_articulation.set, None, 'The other-articulation element is used to define any articulations not yet in the MusicXML format. This allows extended representation, though without application interoperability.')

    _ElementMap.update({
        __accent.name() : __accent,
        __strong_accent.name() : __strong_accent,
        __staccato.name() : __staccato,
        __tenuto.name() : __tenuto,
        __detached_legato.name() : __detached_legato,
        __staccatissimo.name() : __staccatissimo,
        __spiccato.name() : __spiccato,
        __scoop.name() : __scoop,
        __plop.name() : __plop,
        __doit.name() : __doit,
        __falloff.name() : __falloff,
        __breath_mark.name() : __breath_mark,
        __caesura.name() : __caesura,
        __stress.name() : __stress,
        __unstress.name() : __unstress,
        __other_articulation.name() : __other_articulation
    })
    _AttributeMap.update({

    })
_module_typeBindings.articulations = articulations
Namespace.addCategoryObject('typeBinding', 'articulations', articulations)


# Complex type backup with content type ELEMENT_ONLY
class backup (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'backup')
    _XSDLocation = p_Location('musicxml.xsd', 3808, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_backup_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_backup_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Element duration uses Python identifier duration
    __duration = p_ElementDeclaration(p_ExpandedName(None, 'duration'), 'duration', '__AbsentNamespace0_backup_duration', False, p_Location('musicxml.xsd', 5267, 3), )


    duration = property(__duration.value, __duration.set, None, "Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")

    _ElementMap.update({
        __footnote.name() : __footnote,
        __level.name() : __level,
        __duration.name() : __duration
    })
    _AttributeMap.update({

    })
_module_typeBindings.backup = backup
Namespace.addCategoryObject('typeBinding', 'backup', backup)


# Complex type figure with content type ELEMENT_ONLY
class figure (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'figure')
    _XSDLocation = p_Location('musicxml.xsd', 3901, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element prefix uses Python identifier prefix
    __prefix = p_ElementDeclaration(p_ExpandedName(None, 'prefix'), 'prefix', '__AbsentNamespace0_figure_prefix', False, p_Location('musicxml.xsd', 3906, 3), )


    prefix = property(__prefix.value, __prefix.set, None, 'Values for the prefix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles.')


    # Element figure-number uses Python identifier figure_number
    __figure_number = p_ElementDeclaration(p_ExpandedName(None, 'figure-number'), 'figure_number', '__AbsentNamespace0_figure_figure_number', False, p_Location('musicxml.xsd', 3911, 3), )


    figure_number = property(__figure_number.value, __figure_number.set, None, 'A figure-number is a number. Overstrikes of the figure number are represented in the suffix element.')


    # Element suffix uses Python identifier suffix
    __suffix = p_ElementDeclaration(p_ExpandedName(None, 'suffix'), 'suffix', '__AbsentNamespace0_figure_suffix', False, p_Location('musicxml.xsd', 3916, 3), )


    suffix = property(__suffix.value, __suffix.set, None, 'Values for the suffix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix value slash is used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.')


    # Element extend uses Python identifier extend_
    __extend = p_ElementDeclaration(p_ExpandedName(None, 'extend'), 'extend_', '__AbsentNamespace0_figure_extend', False, p_Location('musicxml.xsd', 3921, 3), )


    extend_ = property(__extend.value, __extend.set, None, None)

    _ElementMap.update({
        __prefix.name() : __prefix,
        __figure_number.name() : __figure_number,
        __suffix.name() : __suffix,
        __extend.name() : __extend
    })
    _AttributeMap.update({

    })
_module_typeBindings.figure = figure
Namespace.addCategoryObject('typeBinding', 'figure', figure)


# Complex type forward with content type ELEMENT_ONLY
class forward (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'forward')
    _XSDLocation = p_Location('musicxml.xsd', 3941, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_forward_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_forward_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Element staff uses Python identifier staff
    __staff = p_ElementDeclaration(p_ExpandedName(None, 'staff'), 'staff', '__AbsentNamespace0_forward_staff', False, p_Location('musicxml.xsd', 5072, 3), )


    staff = property(__staff.value, __staff.set, None, 'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')


    # Element voice uses Python identifier voice
    __voice = p_ElementDeclaration(p_ExpandedName(None, 'voice'), 'voice', '__AbsentNamespace0_forward_voice', False, p_Location('musicxml.xsd', 5108, 3), )


    voice = property(__voice.value, __voice.set, None, None)


    # Element duration uses Python identifier duration
    __duration = p_ElementDeclaration(p_ExpandedName(None, 'duration'), 'duration', '__AbsentNamespace0_forward_duration', False, p_Location('musicxml.xsd', 5267, 3), )


    duration = property(__duration.value, __duration.set, None, "Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")

    _ElementMap.update({
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __voice.name() : __voice,
        __duration.name() : __duration
    })
    _AttributeMap.update({

    })
_module_typeBindings.forward = forward
Namespace.addCategoryObject('typeBinding', 'forward', forward)


# Complex type instrument with content type EMPTY
class instrument (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'instrument')
    _XSDLocation = p_Location('musicxml.xsd', 4086, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_instrument_id', p_IDREF, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 4090, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 4090, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.instrument = instrument
Namespace.addCategoryObject('typeBinding', 'instrument', instrument)


# Complex type notehead-text with content type ELEMENT_ONLY
class notehead_text (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'notehead-text')
    _XSDLocation = p_Location('musicxml.xsd', 4282, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element display-text uses Python identifier display_text
    __display_text = p_ElementDeclaration(p_ExpandedName(None, 'display-text'), 'display_text', '__AbsentNamespace0_notehead_text_display_text', True, p_Location('musicxml.xsd', 4288, 4), )


    display_text = property(__display_text.value, __display_text.set, None, None)


    # Element accidental-text uses Python identifier accidental_text
    __accidental_text = p_ElementDeclaration(p_ExpandedName(None, 'accidental-text'), 'accidental_text', '__AbsentNamespace0_notehead_text_accidental_text', True, p_Location('musicxml.xsd', 4289, 4), )


    accidental_text = property(__accidental_text.value, __accidental_text.set, None, None)

    _ElementMap.update({
        __display_text.name() : __display_text,
        __accidental_text.name() : __accidental_text
    })
    _AttributeMap.update({

    })
_module_typeBindings.notehead_text = notehead_text
Namespace.addCategoryObject('typeBinding', 'notehead-text', notehead_text)


# Complex type ornaments with content type ELEMENT_ONLY
class ornaments (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'ornaments')
    _XSDLocation = p_Location('musicxml.xsd', 4294, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element trill-mark uses Python identifier trill_mark
    __trill_mark = p_ElementDeclaration(p_ExpandedName(None, 'trill-mark'), 'trill_mark', '__AbsentNamespace0_ornaments_trill_mark', True, p_Location('musicxml.xsd', 4300, 4), )


    trill_mark = property(__trill_mark.value, __trill_mark.set, None, 'The trill-mark element represents the trill-mark symbol.')


    # Element turn uses Python identifier turn
    __turn = p_ElementDeclaration(p_ExpandedName(None, 'turn'), 'turn', '__AbsentNamespace0_ornaments_turn', True, p_Location('musicxml.xsd', 4305, 4), )


    turn = property(__turn.value, __turn.set, None, 'The turn element is the normal turn shape which goes up then down.')


    # Element delayed-turn uses Python identifier delayed_turn
    __delayed_turn = p_ElementDeclaration(p_ExpandedName(None, 'delayed-turn'), 'delayed_turn', '__AbsentNamespace0_ornaments_delayed_turn', True, p_Location('musicxml.xsd', 4310, 4), )


    delayed_turn = property(__delayed_turn.value, __delayed_turn.set, None, 'The delayed-turn element indicates a normal turn that is delayed until the end of the current note.')


    # Element inverted-turn uses Python identifier inverted_turn
    __inverted_turn = p_ElementDeclaration(p_ExpandedName(None, 'inverted-turn'), 'inverted_turn', '__AbsentNamespace0_ornaments_inverted_turn', True, p_Location('musicxml.xsd', 4315, 4), )


    inverted_turn = property(__inverted_turn.value, __inverted_turn.set, None, 'The inverted-turn element has the shape which goes down and then up.')


    # Element delayed-inverted-turn uses Python identifier delayed_inverted_turn
    __delayed_inverted_turn = p_ElementDeclaration(p_ExpandedName(None, 'delayed-inverted-turn'), 'delayed_inverted_turn', '__AbsentNamespace0_ornaments_delayed_inverted_turn', True, p_Location('musicxml.xsd', 4320, 4), )


    delayed_inverted_turn = property(__delayed_inverted_turn.value, __delayed_inverted_turn.set, None, 'The delayed-inverted-turn element indicates an inverted turn that is delayed until the end of the current note.')


    # Element vertical-turn uses Python identifier vertical_turn
    __vertical_turn = p_ElementDeclaration(p_ExpandedName(None, 'vertical-turn'), 'vertical_turn', '__AbsentNamespace0_ornaments_vertical_turn', True, p_Location('musicxml.xsd', 4325, 4), )


    vertical_turn = property(__vertical_turn.value, __vertical_turn.set, None, 'The vertical-turn element has the turn symbol shape arranged vertically going from upper left to lower right.')


    # Element shake uses Python identifier shake
    __shake = p_ElementDeclaration(p_ExpandedName(None, 'shake'), 'shake', '__AbsentNamespace0_ornaments_shake', True, p_Location('musicxml.xsd', 4330, 4), )


    shake = property(__shake.value, __shake.set, None, 'The shake element has a similar appearance to an inverted-mordent element.')


    # Element wavy-line uses Python identifier wavy_line
    __wavy_line = p_ElementDeclaration(p_ExpandedName(None, 'wavy-line'), 'wavy_line', '__AbsentNamespace0_ornaments_wavy_line', True, p_Location('musicxml.xsd', 4335, 4), )


    wavy_line = property(__wavy_line.value, __wavy_line.set, None, None)


    # Element mordent uses Python identifier mordent
    __mordent = p_ElementDeclaration(p_ExpandedName(None, 'mordent'), 'mordent', '__AbsentNamespace0_ornaments_mordent', True, p_Location('musicxml.xsd', 4336, 4), )


    mordent = property(__mordent.value, __mordent.set, None, 'The mordent element represents the sign with the vertical line. The long attribute is "no" by default.')


    # Element inverted-mordent uses Python identifier inverted_mordent
    __inverted_mordent = p_ElementDeclaration(p_ExpandedName(None, 'inverted-mordent'), 'inverted_mordent', '__AbsentNamespace0_ornaments_inverted_mordent', True, p_Location('musicxml.xsd', 4341, 4), )


    inverted_mordent = property(__inverted_mordent.value, __inverted_mordent.set, None, 'The inverted-mordent element represents the sign without the vertical line. The long attribute is "no" by default.')


    # Element schleifer uses Python identifier schleifer
    __schleifer = p_ElementDeclaration(p_ExpandedName(None, 'schleifer'), 'schleifer', '__AbsentNamespace0_ornaments_schleifer', True, p_Location('musicxml.xsd', 4346, 4), )


    schleifer = property(__schleifer.value, __schleifer.set, None, 'The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier.')


    # Element tremolo uses Python identifier tremolo
    __tremolo = p_ElementDeclaration(p_ExpandedName(None, 'tremolo'), 'tremolo', '__AbsentNamespace0_ornaments_tremolo', True, p_Location('musicxml.xsd', 4351, 4), )


    tremolo = property(__tremolo.value, __tremolo.set, None, None)


    # Element other-ornament uses Python identifier other_ornament
    __other_ornament = p_ElementDeclaration(p_ExpandedName(None, 'other-ornament'), 'other_ornament', '__AbsentNamespace0_ornaments_other_ornament', True, p_Location('musicxml.xsd', 4352, 4), )


    other_ornament = property(__other_ornament.value, __other_ornament.set, None, 'The other-ornament element is used to define any ornaments not yet in the MusicXML format. This allows extended representation, though without application interoperability.')


    # Element accidental-mark uses Python identifier accidental_mark
    __accidental_mark = p_ElementDeclaration(p_ExpandedName(None, 'accidental-mark'), 'accidental_mark', '__AbsentNamespace0_ornaments_accidental_mark', True, p_Location('musicxml.xsd', 4358, 3), )


    accidental_mark = property(__accidental_mark.value, __accidental_mark.set, None, None)

    _ElementMap.update({
        __trill_mark.name() : __trill_mark,
        __turn.name() : __turn,
        __delayed_turn.name() : __delayed_turn,
        __inverted_turn.name() : __inverted_turn,
        __delayed_inverted_turn.name() : __delayed_inverted_turn,
        __vertical_turn.name() : __vertical_turn,
        __shake.name() : __shake,
        __wavy_line.name() : __wavy_line,
        __mordent.name() : __mordent,
        __inverted_mordent.name() : __inverted_mordent,
        __schleifer.name() : __schleifer,
        __tremolo.name() : __tremolo,
        __other_ornament.name() : __other_ornament,
        __accidental_mark.name() : __accidental_mark
    })
    _AttributeMap.update({

    })
_module_typeBindings.ornaments = ornaments
Namespace.addCategoryObject('typeBinding', 'ornaments', ornaments)


# Complex type pitch with content type ELEMENT_ONLY
class pitch (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'pitch')
    _XSDLocation = p_Location('musicxml.xsd', 4377, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element step uses Python identifier step
    __step = p_ElementDeclaration(p_ExpandedName(None, 'step'), 'step', '__AbsentNamespace0_pitch_step', False, p_Location('musicxml.xsd', 4382, 3), )


    step = property(__step.value, __step.set, None, None)


    # Element alter uses Python identifier alter
    __alter = p_ElementDeclaration(p_ExpandedName(None, 'alter'), 'alter', '__AbsentNamespace0_pitch_alter', False, p_Location('musicxml.xsd', 4383, 3), )


    alter = property(__alter.value, __alter.set, None, None)


    # Element octave uses Python identifier octave
    __octave = p_ElementDeclaration(p_ExpandedName(None, 'octave'), 'octave', '__AbsentNamespace0_pitch_octave', False, p_Location('musicxml.xsd', 4384, 3), )


    octave = property(__octave.value, __octave.set, None, None)

    _ElementMap.update({
        __step.name() : __step,
        __alter.name() : __alter,
        __octave.name() : __octave
    })
    _AttributeMap.update({

    })
_module_typeBindings.pitch = pitch
Namespace.addCategoryObject('typeBinding', 'pitch', pitch)


# Complex type technical with content type ELEMENT_ONLY
class technical (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'technical')
    _XSDLocation = p_Location('musicxml.xsd', 4475, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element up-bow uses Python identifier up_bow
    __up_bow = p_ElementDeclaration(p_ExpandedName(None, 'up-bow'), 'up_bow', '__AbsentNamespace0_technical_up_bow', True, p_Location('musicxml.xsd', 4480, 3), )


    up_bow = property(__up_bow.value, __up_bow.set, None, 'The up-bow element represents the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments.')


    # Element down-bow uses Python identifier down_bow
    __down_bow = p_ElementDeclaration(p_ExpandedName(None, 'down-bow'), 'down_bow', '__AbsentNamespace0_technical_down_bow', True, p_Location('musicxml.xsd', 4485, 3), )


    down_bow = property(__down_bow.value, __down_bow.set, None, 'The down-bow element represents the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments.')


    # Element harmonic uses Python identifier harmonic
    __harmonic = p_ElementDeclaration(p_ExpandedName(None, 'harmonic'), 'harmonic', '__AbsentNamespace0_technical_harmonic', True, p_Location('musicxml.xsd', 4490, 3), )


    harmonic = property(__harmonic.value, __harmonic.set, None, None)


    # Element open-string uses Python identifier open_string
    __open_string = p_ElementDeclaration(p_ExpandedName(None, 'open-string'), 'open_string', '__AbsentNamespace0_technical_open_string', True, p_Location('musicxml.xsd', 4491, 3), )


    open_string = property(__open_string.value, __open_string.set, None, 'The open-string element represents the zero-shaped open string symbol.')


    # Element thumb-position uses Python identifier thumb_position
    __thumb_position = p_ElementDeclaration(p_ExpandedName(None, 'thumb-position'), 'thumb_position', '__AbsentNamespace0_technical_thumb_position', True, p_Location('musicxml.xsd', 4496, 3), )


    thumb_position = property(__thumb_position.value, __thumb_position.set, None, 'The thumb-position element represents the thumb position symbol. This is a circle with a line, where the line does not come within the circle. It is distinct from the snap pizzicato symbol, where the line comes inside the circle.')


    # Element fingering uses Python identifier fingering
    __fingering = p_ElementDeclaration(p_ExpandedName(None, 'fingering'), 'fingering', '__AbsentNamespace0_technical_fingering', True, p_Location('musicxml.xsd', 4501, 3), )


    fingering = property(__fingering.value, __fingering.set, None, None)


    # Element pluck uses Python identifier pluck
    __pluck = p_ElementDeclaration(p_ExpandedName(None, 'pluck'), 'pluck', '__AbsentNamespace0_technical_pluck', True, p_Location('musicxml.xsd', 4502, 3), )


    pluck = property(__pluck.value, __pluck.set, None, 'The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers.')


    # Element double-tongue uses Python identifier double_tongue
    __double_tongue = p_ElementDeclaration(p_ExpandedName(None, 'double-tongue'), 'double_tongue', '__AbsentNamespace0_technical_double_tongue', True, p_Location('musicxml.xsd', 4507, 3), )


    double_tongue = property(__double_tongue.value, __double_tongue.set, None, 'The double-tongue element represents the double tongue symbol (two dots arranged horizontally).')


    # Element triple-tongue uses Python identifier triple_tongue
    __triple_tongue = p_ElementDeclaration(p_ExpandedName(None, 'triple-tongue'), 'triple_tongue', '__AbsentNamespace0_technical_triple_tongue', True, p_Location('musicxml.xsd', 4512, 3), )


    triple_tongue = property(__triple_tongue.value, __triple_tongue.set, None, 'The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally).')


    # Element stopped uses Python identifier stopped
    __stopped = p_ElementDeclaration(p_ExpandedName(None, 'stopped'), 'stopped', '__AbsentNamespace0_technical_stopped', True, p_Location('musicxml.xsd', 4517, 3), )


    stopped = property(__stopped.value, __stopped.set, None, 'The stopped element represents the stopped symbol, which looks like a plus sign.')


    # Element snap-pizzicato uses Python identifier snap_pizzicato
    __snap_pizzicato = p_ElementDeclaration(p_ExpandedName(None, 'snap-pizzicato'), 'snap_pizzicato', '__AbsentNamespace0_technical_snap_pizzicato', True, p_Location('musicxml.xsd', 4522, 3), )


    snap_pizzicato = property(__snap_pizzicato.value, __snap_pizzicato.set, None, '\tThe snap-pizzicato element represents the snap pizzicato symbol. This is a circle with a line, where the line comes inside the circle. It is distinct from the thumb-position symbol, where the line does not come inside the circle.')


    # Element fret uses Python identifier fret
    __fret = p_ElementDeclaration(p_ExpandedName(None, 'fret'), 'fret', '__AbsentNamespace0_technical_fret', True, p_Location('musicxml.xsd', 4527, 3), )


    fret = property(__fret.value, __fret.set, None, None)


    # Element string uses Python identifier string
    __string = p_ElementDeclaration(p_ExpandedName(None, 'string'), 'string', '__AbsentNamespace0_technical_string', True, p_Location('musicxml.xsd', 4528, 3), )


    string = property(__string.value, __string.set, None, None)


    # Element hammer-on uses Python identifier hammer_on
    __hammer_on = p_ElementDeclaration(p_ExpandedName(None, 'hammer-on'), 'hammer_on', '__AbsentNamespace0_technical_hammer_on', True, p_Location('musicxml.xsd', 4529, 3), )


    hammer_on = property(__hammer_on.value, __hammer_on.set, None, None)


    # Element pull-off uses Python identifier pull_off
    __pull_off = p_ElementDeclaration(p_ExpandedName(None, 'pull-off'), 'pull_off', '__AbsentNamespace0_technical_pull_off', True, p_Location('musicxml.xsd', 4530, 3), )


    pull_off = property(__pull_off.value, __pull_off.set, None, None)


    # Element bend uses Python identifier bend
    __bend = p_ElementDeclaration(p_ExpandedName(None, 'bend'), 'bend', '__AbsentNamespace0_technical_bend', True, p_Location('musicxml.xsd', 4531, 3), )


    bend = property(__bend.value, __bend.set, None, None)


    # Element tap uses Python identifier tap
    __tap = p_ElementDeclaration(p_ExpandedName(None, 'tap'), 'tap', '__AbsentNamespace0_technical_tap', True, p_Location('musicxml.xsd', 4532, 3), )


    tap = property(__tap.value, __tap.set, None, 'The tap element indicates a tap on the fretboard. The element content allows specification of the notation; + and T are common choices. If empty, the display is application-specific.')


    # Element heel uses Python identifier heel
    __heel = p_ElementDeclaration(p_ExpandedName(None, 'heel'), 'heel', '__AbsentNamespace0_technical_heel', True, p_Location('musicxml.xsd', 4537, 3), )


    heel = property(__heel.value, __heel.set, None, None)


    # Element toe uses Python identifier toe
    __toe = p_ElementDeclaration(p_ExpandedName(None, 'toe'), 'toe', '__AbsentNamespace0_technical_toe', True, p_Location('musicxml.xsd', 4538, 3), )


    toe = property(__toe.value, __toe.set, None, None)


    # Element fingernails uses Python identifier fingernails
    __fingernails = p_ElementDeclaration(p_ExpandedName(None, 'fingernails'), 'fingernails', '__AbsentNamespace0_technical_fingernails', True, p_Location('musicxml.xsd', 4539, 3), )


    fingernails = property(__fingernails.value, __fingernails.set, None, 'The fingernails element is used in notation for harp and other plucked string instruments.')


    # Element hole uses Python identifier hole
    __hole = p_ElementDeclaration(p_ExpandedName(None, 'hole'), 'hole', '__AbsentNamespace0_technical_hole', True, p_Location('musicxml.xsd', 4544, 3), )


    hole = property(__hole.value, __hole.set, None, None)


    # Element arrow uses Python identifier arrow
    __arrow = p_ElementDeclaration(p_ExpandedName(None, 'arrow'), 'arrow', '__AbsentNamespace0_technical_arrow', True, p_Location('musicxml.xsd', 4545, 3), )


    arrow = property(__arrow.value, __arrow.set, None, None)


    # Element handbell uses Python identifier handbell
    __handbell = p_ElementDeclaration(p_ExpandedName(None, 'handbell'), 'handbell', '__AbsentNamespace0_technical_handbell', True, p_Location('musicxml.xsd', 4546, 3), )


    handbell = property(__handbell.value, __handbell.set, None, None)


    # Element other-technical uses Python identifier other_technical
    __other_technical = p_ElementDeclaration(p_ExpandedName(None, 'other-technical'), 'other_technical', '__AbsentNamespace0_technical_other_technical', True, p_Location('musicxml.xsd', 4547, 3), )


    other_technical = property(__other_technical.value, __other_technical.set, None, 'The other-technical element is used to define any technical indications not yet in the MusicXML format. This allows extended representation, though without application interoperability.')

    _ElementMap.update({
        __up_bow.name() : __up_bow,
        __down_bow.name() : __down_bow,
        __harmonic.name() : __harmonic,
        __open_string.name() : __open_string,
        __thumb_position.name() : __thumb_position,
        __fingering.name() : __fingering,
        __pluck.name() : __pluck,
        __double_tongue.name() : __double_tongue,
        __triple_tongue.name() : __triple_tongue,
        __stopped.name() : __stopped,
        __snap_pizzicato.name() : __snap_pizzicato,
        __fret.name() : __fret,
        __string.name() : __string,
        __hammer_on.name() : __hammer_on,
        __pull_off.name() : __pull_off,
        __bend.name() : __bend,
        __tap.name() : __tap,
        __heel.name() : __heel,
        __toe.name() : __toe,
        __fingernails.name() : __fingernails,
        __hole.name() : __hole,
        __arrow.name() : __arrow,
        __handbell.name() : __handbell,
        __other_technical.name() : __other_technical
    })
    _AttributeMap.update({

    })
_module_typeBindings.technical = technical
Namespace.addCategoryObject('typeBinding', 'technical', technical)


# Complex type time-modification with content type ELEMENT_ONLY
class time_modification (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'time-modification')
    _XSDLocation = p_Location('musicxml.xsd', 4614, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element actual-notes uses Python identifier actual_notes
    __actual_notes = p_ElementDeclaration(p_ExpandedName(None, 'actual-notes'), 'actual_notes', '__AbsentNamespace0_time_modification_actual_notes', False, p_Location('musicxml.xsd', 4619, 3), )


    actual_notes = property(__actual_notes.value, __actual_notes.set, None, 'The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element.')


    # Element normal-notes uses Python identifier normal_notes
    __normal_notes = p_ElementDeclaration(p_ExpandedName(None, 'normal-notes'), 'normal_notes', '__AbsentNamespace0_time_modification_normal_notes', False, p_Location('musicxml.xsd', 4624, 3), )


    normal_notes = property(__normal_notes.value, __normal_notes.set, None, 'The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element.')


    # Element normal-type uses Python identifier normal_type
    __normal_type = p_ElementDeclaration(p_ExpandedName(None, 'normal-type'), 'normal_type', '__AbsentNamespace0_time_modification_normal_type', False, p_Location('musicxml.xsd', 4630, 4), )


    normal_type = property(__normal_type.value, __normal_type.set, None, 'If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.')


    # Element normal-dot uses Python identifier normal_dot
    __normal_dot = p_ElementDeclaration(p_ExpandedName(None, 'normal-dot'), 'normal_dot', '__AbsentNamespace0_time_modification_normal_dot', True, p_Location('musicxml.xsd', 4635, 4), )


    normal_dot = property(__normal_dot.value, __normal_dot.set, None, 'The normal-dot element is used to specify dotted normal tuplet types.')

    _ElementMap.update({
        __actual_notes.name() : __actual_notes,
        __normal_notes.name() : __normal_notes,
        __normal_type.name() : __normal_type,
        __normal_dot.name() : __normal_dot
    })
    _AttributeMap.update({

    })
_module_typeBindings.time_modification = time_modification
Namespace.addCategoryObject('typeBinding', 'time-modification', time_modification)


# Complex type tuplet-portion with content type ELEMENT_ONLY
class tuplet_portion (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tuplet-portion')
    _XSDLocation = p_Location('musicxml.xsd', 4711, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element tuplet-number uses Python identifier tuplet_number
    __tuplet_number = p_ElementDeclaration(p_ExpandedName(None, 'tuplet-number'), 'tuplet_number', '__AbsentNamespace0_tuplet_portion_tuplet_number', False, p_Location('musicxml.xsd', 4716, 3), )


    tuplet_number = property(__tuplet_number.value, __tuplet_number.set, None, None)


    # Element tuplet-type uses Python identifier tuplet_type
    __tuplet_type = p_ElementDeclaration(p_ExpandedName(None, 'tuplet-type'), 'tuplet_type', '__AbsentNamespace0_tuplet_portion_tuplet_type', False, p_Location('musicxml.xsd', 4717, 3), )


    tuplet_type = property(__tuplet_type.value, __tuplet_type.set, None, None)


    # Element tuplet-dot uses Python identifier tuplet_dot
    __tuplet_dot = p_ElementDeclaration(p_ExpandedName(None, 'tuplet-dot'), 'tuplet_dot', '__AbsentNamespace0_tuplet_portion_tuplet_dot', True, p_Location('musicxml.xsd', 4718, 3), )


    tuplet_dot = property(__tuplet_dot.value, __tuplet_dot.set, None, None)

    _ElementMap.update({
        __tuplet_number.name() : __tuplet_number,
        __tuplet_type.name() : __tuplet_type,
        __tuplet_dot.name() : __tuplet_dot
    })
    _AttributeMap.update({

    })
_module_typeBindings.tuplet_portion = tuplet_portion
Namespace.addCategoryObject('typeBinding', 'tuplet-portion', tuplet_portion)


# Complex type unpitched with content type ELEMENT_ONLY
class unpitched (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'unpitched')
    _XSDLocation = p_Location('musicxml.xsd', 4734, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element display-step uses Python identifier display_step
    __display_step = p_ElementDeclaration(p_ExpandedName(None, 'display-step'), 'display_step', '__AbsentNamespace0_unpitched_display_step', False, p_Location('musicxml.xsd', 5280, 3), )


    display_step = property(__display_step.value, __display_step.set, None, None)


    # Element display-octave uses Python identifier display_octave
    __display_octave = p_ElementDeclaration(p_ExpandedName(None, 'display-octave'), 'display_octave', '__AbsentNamespace0_unpitched_display_octave', False, p_Location('musicxml.xsd', 5281, 3), )


    display_octave = property(__display_octave.value, __display_octave.set, None, None)

    _ElementMap.update({
        __display_step.name() : __display_step,
        __display_octave.name() : __display_octave
    })
    _AttributeMap.update({

    })
_module_typeBindings.unpitched = unpitched
Namespace.addCategoryObject('typeBinding', 'unpitched', unpitched)


# Complex type credit with content type ELEMENT_ONLY
class credit (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'credit')
    _XSDLocation = p_Location('musicxml.xsd', 4745, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element credit-type uses Python identifier credit_type
    __credit_type = p_ElementDeclaration(p_ExpandedName(None, 'credit-type'), 'credit_type', '__AbsentNamespace0_credit_credit_type', True, p_Location('musicxml.xsd', 4757, 3), )


    credit_type = property(__credit_type.value, __credit_type.set, None, None)


    # Element link uses Python identifier link
    __link = p_ElementDeclaration(p_ExpandedName(None, 'link'), 'link', '__AbsentNamespace0_credit_link', True, p_Location('musicxml.xsd', 4758, 3), )


    link = property(__link.value, __link.set, None, None)


    # Element bookmark uses Python identifier bookmark
    __bookmark = p_ElementDeclaration(p_ExpandedName(None, 'bookmark'), 'bookmark', '__AbsentNamespace0_credit_bookmark', True, p_Location('musicxml.xsd', 4759, 3), )


    bookmark = property(__bookmark.value, __bookmark.set, None, None)


    # Element credit-image uses Python identifier credit_image
    __credit_image = p_ElementDeclaration(p_ExpandedName(None, 'credit-image'), 'credit_image', '__AbsentNamespace0_credit_credit_image', False, p_Location('musicxml.xsd', 4761, 4), )


    credit_image = property(__credit_image.value, __credit_image.set, None, None)


    # Element credit-words uses Python identifier credit_words
    __credit_words = p_ElementDeclaration(p_ExpandedName(None, 'credit-words'), 'credit_words', '__AbsentNamespace0_credit_credit_words', True, p_Location('musicxml.xsd', 4763, 5), )


    credit_words = property(__credit_words.value, __credit_words.set, None, None)


    # Attribute page uses Python identifier page
    __page = p_AttributeUse(p_ExpandedName(None, 'page'), 'page', '__AbsentNamespace0_credit_page', p_positiveInteger)
    __page._DeclarationLocation = p_Location('musicxml.xsd', 4772, 2)
    __page._UseLocation = p_Location('musicxml.xsd', 4772, 2)

    page = property(__page.value, __page.set, None, None)

    _ElementMap.update({
        __credit_type.name() : __credit_type,
        __link.name() : __link,
        __bookmark.name() : __bookmark,
        __credit_image.name() : __credit_image,
        __credit_words.name() : __credit_words
    })
    _AttributeMap.update({
        __page.name() : __page
    })
_module_typeBindings.credit = credit
Namespace.addCategoryObject('typeBinding', 'credit', credit)


# Complex type defaults with content type ELEMENT_ONLY
class defaults (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'defaults')
    _XSDLocation = p_Location('musicxml.xsd', 4775, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element scaling uses Python identifier scaling
    __scaling = p_ElementDeclaration(p_ExpandedName(None, 'scaling'), 'scaling', '__AbsentNamespace0_defaults_scaling', False, p_Location('musicxml.xsd', 4780, 3), )


    scaling = property(__scaling.value, __scaling.set, None, None)


    # Element appearance uses Python identifier appearance
    __appearance = p_ElementDeclaration(p_ExpandedName(None, 'appearance'), 'appearance', '__AbsentNamespace0_defaults_appearance', False, p_Location('musicxml.xsd', 4782, 3), )


    appearance = property(__appearance.value, __appearance.set, None, None)


    # Element music-font uses Python identifier music_font
    __music_font = p_ElementDeclaration(p_ExpandedName(None, 'music-font'), 'music_font', '__AbsentNamespace0_defaults_music_font', False, p_Location('musicxml.xsd', 4783, 3), )


    music_font = property(__music_font.value, __music_font.set, None, None)


    # Element word-font uses Python identifier word_font
    __word_font = p_ElementDeclaration(p_ExpandedName(None, 'word-font'), 'word_font', '__AbsentNamespace0_defaults_word_font', False, p_Location('musicxml.xsd', 4784, 3), )


    word_font = property(__word_font.value, __word_font.set, None, None)


    # Element lyric-font uses Python identifier lyric_font
    __lyric_font = p_ElementDeclaration(p_ExpandedName(None, 'lyric-font'), 'lyric_font', '__AbsentNamespace0_defaults_lyric_font', True, p_Location('musicxml.xsd', 4785, 3), )


    lyric_font = property(__lyric_font.value, __lyric_font.set, None, None)


    # Element lyric-language uses Python identifier lyric_language
    __lyric_language = p_ElementDeclaration(p_ExpandedName(None, 'lyric-language'), 'lyric_language', '__AbsentNamespace0_defaults_lyric_language', True, p_Location('musicxml.xsd', 4786, 3), )


    lyric_language = property(__lyric_language.value, __lyric_language.set, None, None)


    # Element page-layout uses Python identifier page_layout
    __page_layout = p_ElementDeclaration(p_ExpandedName(None, 'page-layout'), 'page_layout', '__AbsentNamespace0_defaults_page_layout', False, p_Location('musicxml.xsd', 5244, 3), )


    page_layout = property(__page_layout.value, __page_layout.set, None, None)


    # Element system-layout uses Python identifier system_layout
    __system_layout = p_ElementDeclaration(p_ExpandedName(None, 'system-layout'), 'system_layout', '__AbsentNamespace0_defaults_system_layout', False, p_Location('musicxml.xsd', 5245, 3), )


    system_layout = property(__system_layout.value, __system_layout.set, None, None)


    # Element staff-layout uses Python identifier staff_layout
    __staff_layout = p_ElementDeclaration(p_ExpandedName(None, 'staff-layout'), 'staff_layout', '__AbsentNamespace0_defaults_staff_layout', True, p_Location('musicxml.xsd', 5246, 3), )


    staff_layout = property(__staff_layout.value, __staff_layout.set, None, None)

    _ElementMap.update({
        __scaling.name() : __scaling,
        __appearance.name() : __appearance,
        __music_font.name() : __music_font,
        __word_font.name() : __word_font,
        __lyric_font.name() : __lyric_font,
        __lyric_language.name() : __lyric_language,
        __page_layout.name() : __page_layout,
        __system_layout.name() : __system_layout,
        __staff_layout.name() : __staff_layout
    })
    _AttributeMap.update({

    })
_module_typeBindings.defaults = defaults
Namespace.addCategoryObject('typeBinding', 'defaults', defaults)


# Complex type lyric-language with content type EMPTY
class lyric_language (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'lyric-language')
    _XSDLocation = p_Location('musicxml.xsd', 4840, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_lyric_language_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang, required=True)
    __lang._DeclarationLocation = None
    __lang._UseLocation = p_Location('musicxml.xsd', 4846, 2)

    lang = property(__lang.value, __lang.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_lyric_language_number', p_NMTOKEN)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4844, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4844, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute name uses Python identifier name
    __name = p_AttributeUse(p_ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_lyric_language_name', p_token)
    __name._DeclarationLocation = p_Location('musicxml.xsd', 4845, 2)
    __name._UseLocation = p_Location('musicxml.xsd', 4845, 2)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __number.name() : __number,
        __name.name() : __name
    })
_module_typeBindings.lyric_language = lyric_language
Namespace.addCategoryObject('typeBinding', 'lyric-language', lyric_language)


# Complex type part-list with content type ELEMENT_ONLY
class part_list (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'part-list')
    _XSDLocation = p_Location('musicxml.xsd', 4890, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element part-group uses Python identifier part_group
    __part_group = p_ElementDeclaration(p_ExpandedName(None, 'part-group'), 'part_group', '__AbsentNamespace0_part_list_part_group', True, p_Location('musicxml.xsd', 5333, 3), )


    part_group = property(__part_group.value, __part_group.set, None, None)


    # Element score-part uses Python identifier score_part
    __score_part = p_ElementDeclaration(p_ExpandedName(None, 'score-part'), 'score_part', '__AbsentNamespace0_part_list_score_part', True, p_Location('musicxml.xsd', 5366, 3), )


    score_part = property(__score_part.value, __score_part.set, None, 'Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.')

    _ElementMap.update({
        __part_group.name() : __part_group,
        __score_part.name() : __score_part
    })
    _AttributeMap.update({

    })
_module_typeBindings.part_list = part_list
Namespace.addCategoryObject('typeBinding', 'part-list', part_list)


# Complex type score-instrument with content type ELEMENT_ONLY
class score_instrument (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'score-instrument')
    _XSDLocation = p_Location('musicxml.xsd', 4915, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element instrument-name uses Python identifier instrument_name
    __instrument_name = p_ElementDeclaration(p_ExpandedName(None, 'instrument-name'), 'instrument_name', '__AbsentNamespace0_score_instrument_instrument_name', False, p_Location('musicxml.xsd', 4922, 3), )


    instrument_name = property(__instrument_name.value, __instrument_name.set, None, 'The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score.')


    # Element instrument-abbreviation uses Python identifier instrument_abbreviation
    __instrument_abbreviation = p_ElementDeclaration(p_ExpandedName(None, 'instrument-abbreviation'), 'instrument_abbreviation', '__AbsentNamespace0_score_instrument_instrument_abbreviation', False, p_Location('musicxml.xsd', 4927, 3), )


    instrument_abbreviation = property(__instrument_abbreviation.value, __instrument_abbreviation.set, None, 'The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score.')


    # Element instrument-sound uses Python identifier instrument_sound
    __instrument_sound = p_ElementDeclaration(p_ExpandedName(None, 'instrument-sound'), 'instrument_sound', '__AbsentNamespace0_score_instrument_instrument_sound', False, p_Location('musicxml.xsd', 4932, 3), )


    instrument_sound = property(__instrument_sound.value, __instrument_sound.set, None, 'The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.')


    # Element solo uses Python identifier solo
    __solo = p_ElementDeclaration(p_ExpandedName(None, 'solo'), 'solo', '__AbsentNamespace0_score_instrument_solo', False, p_Location('musicxml.xsd', 4938, 4), )


    solo = property(__solo.value, __solo.set, None, 'The solo element was added in Version 2.0. It is present if performance is intended by a solo instrument.')


    # Element ensemble uses Python identifier ensemble
    __ensemble = p_ElementDeclaration(p_ExpandedName(None, 'ensemble'), 'ensemble', '__AbsentNamespace0_score_instrument_ensemble', False, p_Location('musicxml.xsd', 4943, 4), )


    ensemble = property(__ensemble.value, __ensemble.set, None, 'The ensemble element was added in Version 2.0. It is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.')


    # Element virtual-instrument uses Python identifier virtual_instrument
    __virtual_instrument = p_ElementDeclaration(p_ExpandedName(None, 'virtual-instrument'), 'virtual_instrument', '__AbsentNamespace0_score_instrument_virtual_instrument', False, p_Location('musicxml.xsd', 4949, 3), )


    virtual_instrument = property(__virtual_instrument.value, __virtual_instrument.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_score_instrument_id', p_ID, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 4951, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 4951, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __instrument_name.name() : __instrument_name,
        __instrument_abbreviation.name() : __instrument_abbreviation,
        __instrument_sound.name() : __instrument_sound,
        __solo.name() : __solo,
        __ensemble.name() : __ensemble,
        __virtual_instrument.name() : __virtual_instrument
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.score_instrument = score_instrument
Namespace.addCategoryObject('typeBinding', 'score-instrument', score_instrument)


# Complex type score-part with content type ELEMENT_ONLY
class score_part (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'score-part')
    _XSDLocation = p_Location('musicxml.xsd', 4954, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element identification uses Python identifier identification
    __identification = p_ElementDeclaration(p_ExpandedName(None, 'identification'), 'identification', '__AbsentNamespace0_score_part_identification', False, p_Location('musicxml.xsd', 4959, 3), )


    identification = property(__identification.value, __identification.set, None, None)


    # Element part-name uses Python identifier part_name
    __part_name = p_ElementDeclaration(p_ExpandedName(None, 'part-name'), 'part_name', '__AbsentNamespace0_score_part_part_name', False, p_Location('musicxml.xsd', 4960, 3), )


    part_name = property(__part_name.value, __part_name.set, None, None)


    # Element part-name-display uses Python identifier part_name_display
    __part_name_display = p_ElementDeclaration(p_ExpandedName(None, 'part-name-display'), 'part_name_display', '__AbsentNamespace0_score_part_part_name_display', False, p_Location('musicxml.xsd', 4961, 3), )


    part_name_display = property(__part_name_display.value, __part_name_display.set, None, None)


    # Element part-abbreviation uses Python identifier part_abbreviation
    __part_abbreviation = p_ElementDeclaration(p_ExpandedName(None, 'part-abbreviation'), 'part_abbreviation', '__AbsentNamespace0_score_part_part_abbreviation', False, p_Location('musicxml.xsd', 4962, 3), )


    part_abbreviation = property(__part_abbreviation.value, __part_abbreviation.set, None, None)


    # Element part-abbreviation-display uses Python identifier part_abbreviation_display
    __part_abbreviation_display = p_ElementDeclaration(p_ExpandedName(None, 'part-abbreviation-display'), 'part_abbreviation_display', '__AbsentNamespace0_score_part_part_abbreviation_display', False, p_Location('musicxml.xsd', 4963, 3), )


    part_abbreviation_display = property(__part_abbreviation_display.value, __part_abbreviation_display.set, None, None)


    # Element group uses Python identifier group
    __group = p_ElementDeclaration(p_ExpandedName(None, 'group'), 'group', '__AbsentNamespace0_score_part_group', True, p_Location('musicxml.xsd', 4964, 3), )


    group = property(__group.value, __group.set, None, 'The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information that is directly encoded in MuseData can be derived from the ordering within a MusicXML score or opus.')


    # Element score-instrument uses Python identifier score_instrument
    __score_instrument = p_ElementDeclaration(p_ExpandedName(None, 'score-instrument'), 'score_instrument', '__AbsentNamespace0_score_part_score_instrument', True, p_Location('musicxml.xsd', 4969, 3), )


    score_instrument = property(__score_instrument.value, __score_instrument.set, None, None)


    # Element midi-device uses Python identifier midi_device
    __midi_device = p_ElementDeclaration(p_ExpandedName(None, 'midi-device'), 'midi_device', '__AbsentNamespace0_score_part_midi_device', True, p_Location('musicxml.xsd', 4971, 4), )


    midi_device = property(__midi_device.value, __midi_device.set, None, None)


    # Element midi-instrument uses Python identifier midi_instrument
    __midi_instrument = p_ElementDeclaration(p_ExpandedName(None, 'midi-instrument'), 'midi_instrument', '__AbsentNamespace0_score_part_midi_instrument', True, p_Location('musicxml.xsd', 4972, 4), )


    midi_instrument = property(__midi_instrument.value, __midi_instrument.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_score_part_id', p_ID, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 4975, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 4975, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __identification.name() : __identification,
        __part_name.name() : __part_name,
        __part_name_display.name() : __part_name_display,
        __part_abbreviation.name() : __part_abbreviation,
        __part_abbreviation_display.name() : __part_abbreviation_display,
        __group.name() : __group,
        __score_instrument.name() : __score_instrument,
        __midi_device.name() : __midi_device,
        __midi_instrument.name() : __midi_instrument
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.score_part = score_part
Namespace.addCategoryObject('typeBinding', 'score-part', score_part)


# Complex type virtual-instrument with content type ELEMENT_ONLY
class virtual_instrument (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'virtual-instrument')
    _XSDLocation = p_Location('musicxml.xsd', 4978, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element virtual-library uses Python identifier virtual_library
    __virtual_library = p_ElementDeclaration(p_ExpandedName(None, 'virtual-library'), 'virtual_library', '__AbsentNamespace0_virtual_instrument_virtual_library', False, p_Location('musicxml.xsd', 4983, 3), )


    virtual_library = property(__virtual_library.value, __virtual_library.set, None, 'The virtual-library element indicates the virtual instrument library name.')


    # Element virtual-name uses Python identifier virtual_name
    __virtual_name = p_ElementDeclaration(p_ExpandedName(None, 'virtual-name'), 'virtual_name', '__AbsentNamespace0_virtual_instrument_virtual_name', False, p_Location('musicxml.xsd', 4988, 3), )


    virtual_name = property(__virtual_name.value, __virtual_name.set, None, 'The virtual-name element indicates the library-specific name for the virtual instrument.')

    _ElementMap.update({
        __virtual_library.name() : __virtual_library,
        __virtual_name.name() : __virtual_name
    })
    _AttributeMap.update({

    })
_module_typeBindings.virtual_instrument = virtual_instrument
Namespace.addCategoryObject('typeBinding', 'virtual-instrument', virtual_instrument)


# Complex type work with content type ELEMENT_ONLY
class work (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'work')
    _XSDLocation = p_Location('musicxml.xsd', 4996, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element work-number uses Python identifier work_number
    __work_number = p_ElementDeclaration(p_ExpandedName(None, 'work-number'), 'work_number', '__AbsentNamespace0_work_work_number', False, p_Location('musicxml.xsd', 5001, 3), )


    work_number = property(__work_number.value, __work_number.set, None, 'The work-number element specifies the number of a work, such as its opus number.')


    # Element work-title uses Python identifier work_title
    __work_title = p_ElementDeclaration(p_ExpandedName(None, 'work-title'), 'work_title', '__AbsentNamespace0_work_work_title', False, p_Location('musicxml.xsd', 5006, 3), )


    work_title = property(__work_title.value, __work_title.set, None, 'The work-title element specifies the title of a work, not including its opus or other work number.')


    # Element opus uses Python identifier opus
    __opus = p_ElementDeclaration(p_ExpandedName(None, 'opus'), 'opus', '__AbsentNamespace0_work_opus', False, p_Location('musicxml.xsd', 5011, 3), )


    opus = property(__opus.value, __opus.set, None, None)

    _ElementMap.update({
        __work_number.name() : __work_number,
        __work_title.name() : __work_title,
        __opus.name() : __opus
    })
    _AttributeMap.update({

    })
_module_typeBindings.work = work
Namespace.addCategoryObject('typeBinding', 'work', work)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 5382, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element work uses Python identifier work
    __work = p_ElementDeclaration(p_ExpandedName(None, 'work'), 'work', '__AbsentNamespace0_CTD_ANON_work', False, p_Location('musicxml.xsd', 5343, 3), )


    work = property(__work.value, __work.set, None, None)


    # Element movement-number uses Python identifier movement_number
    __movement_number = p_ElementDeclaration(p_ExpandedName(None, 'movement-number'), 'movement_number', '__AbsentNamespace0_CTD_ANON_movement_number', False, p_Location('musicxml.xsd', 5344, 3), )


    movement_number = property(__movement_number.value, __movement_number.set, None, 'The movement-number element specifies the number of a movement.')


    # Element movement-title uses Python identifier movement_title
    __movement_title = p_ElementDeclaration(p_ExpandedName(None, 'movement-title'), 'movement_title', '__AbsentNamespace0_CTD_ANON_movement_title', False, p_Location('musicxml.xsd', 5349, 3), )


    movement_title = property(__movement_title.value, __movement_title.set, None, 'The movement-title element specifies the title of a movement, not including its number.')


    # Element identification uses Python identifier identification
    __identification = p_ElementDeclaration(p_ExpandedName(None, 'identification'), 'identification', '__AbsentNamespace0_CTD_ANON_identification', False, p_Location('musicxml.xsd', 5354, 3), )


    identification = property(__identification.value, __identification.set, None, None)


    # Element defaults uses Python identifier defaults
    __defaults = p_ElementDeclaration(p_ExpandedName(None, 'defaults'), 'defaults', '__AbsentNamespace0_CTD_ANON_defaults', False, p_Location('musicxml.xsd', 5355, 3), )


    defaults = property(__defaults.value, __defaults.set, None, None)


    # Element credit uses Python identifier credit
    __credit = p_ElementDeclaration(p_ExpandedName(None, 'credit'), 'credit', '__AbsentNamespace0_CTD_ANON_credit', True, p_Location('musicxml.xsd', 5356, 3), )


    credit = property(__credit.value, __credit.set, None, None)


    # Element part-list uses Python identifier part_list
    __part_list = p_ElementDeclaration(p_ExpandedName(None, 'part-list'), 'part_list', '__AbsentNamespace0_CTD_ANON_part_list', False, p_Location('musicxml.xsd', 5357, 3), )


    part_list = property(__part_list.value, __part_list.set, None, None)


    # Element part uses Python identifier part
    __part = p_ElementDeclaration(p_ExpandedName(None, 'part'), 'part', '__AbsentNamespace0_CTD_ANON_part', True, p_Location('musicxml.xsd', 5385, 4), )


    part = property(__part.value, __part.set, None, None)


    # Attribute version uses Python identifier version
    __version = p_AttributeUse(p_ExpandedName(None, 'version'), 'version', '__AbsentNamespace0_CTD_ANON_version', p_token, unicode_default='1.0')
    __version._DeclarationLocation = p_Location('musicxml.xsd', 1609, 2)
    __version._UseLocation = p_Location('musicxml.xsd', 1609, 2)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __work.name() : __work,
        __movement_number.name() : __movement_number,
        __movement_title.name() : __movement_title,
        __identification.name() : __identification,
        __defaults.name() : __defaults,
        __credit.name() : __credit,
        __part_list.name() : __part_list,
        __part.name() : __part
    })
    _AttributeMap.update({
        __version.name() : __version
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 5386, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element measure uses Python identifier measure
    __measure = p_ElementDeclaration(p_ExpandedName(None, 'measure'), 'measure', '__AbsentNamespace0_CTD_ANON__measure', True, p_Location('musicxml.xsd', 5388, 7), )


    measure = property(__measure.value, __measure.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_CTD_ANON__id', p_IDREF, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 1966, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 1966, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __measure.name() : __measure
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 5407, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element work uses Python identifier work
    __work = p_ElementDeclaration(p_ExpandedName(None, 'work'), 'work', '__AbsentNamespace0_CTD_ANON_2_work', False, p_Location('musicxml.xsd', 5343, 3), )


    work = property(__work.value, __work.set, None, None)


    # Element movement-number uses Python identifier movement_number
    __movement_number = p_ElementDeclaration(p_ExpandedName(None, 'movement-number'), 'movement_number', '__AbsentNamespace0_CTD_ANON_2_movement_number', False, p_Location('musicxml.xsd', 5344, 3), )


    movement_number = property(__movement_number.value, __movement_number.set, None, 'The movement-number element specifies the number of a movement.')


    # Element movement-title uses Python identifier movement_title
    __movement_title = p_ElementDeclaration(p_ExpandedName(None, 'movement-title'), 'movement_title', '__AbsentNamespace0_CTD_ANON_2_movement_title', False, p_Location('musicxml.xsd', 5349, 3), )


    movement_title = property(__movement_title.value, __movement_title.set, None, 'The movement-title element specifies the title of a movement, not including its number.')


    # Element identification uses Python identifier identification
    __identification = p_ElementDeclaration(p_ExpandedName(None, 'identification'), 'identification', '__AbsentNamespace0_CTD_ANON_2_identification', False, p_Location('musicxml.xsd', 5354, 3), )


    identification = property(__identification.value, __identification.set, None, None)


    # Element defaults uses Python identifier defaults
    __defaults = p_ElementDeclaration(p_ExpandedName(None, 'defaults'), 'defaults', '__AbsentNamespace0_CTD_ANON_2_defaults', False, p_Location('musicxml.xsd', 5355, 3), )


    defaults = property(__defaults.value, __defaults.set, None, None)


    # Element credit uses Python identifier credit
    __credit = p_ElementDeclaration(p_ExpandedName(None, 'credit'), 'credit', '__AbsentNamespace0_CTD_ANON_2_credit', True, p_Location('musicxml.xsd', 5356, 3), )


    credit = property(__credit.value, __credit.set, None, None)


    # Element part-list uses Python identifier part_list
    __part_list = p_ElementDeclaration(p_ExpandedName(None, 'part-list'), 'part_list', '__AbsentNamespace0_CTD_ANON_2_part_list', False, p_Location('musicxml.xsd', 5357, 3), )


    part_list = property(__part_list.value, __part_list.set, None, None)


    # Element measure uses Python identifier measure
    __measure = p_ElementDeclaration(p_ExpandedName(None, 'measure'), 'measure', '__AbsentNamespace0_CTD_ANON_2_measure', True, p_Location('musicxml.xsd', 5410, 4), )


    measure = property(__measure.value, __measure.set, None, None)


    # Attribute version uses Python identifier version
    __version = p_AttributeUse(p_ExpandedName(None, 'version'), 'version', '__AbsentNamespace0_CTD_ANON_2_version', p_token, unicode_default='1.0')
    __version._DeclarationLocation = p_Location('musicxml.xsd', 1609, 2)
    __version._UseLocation = p_Location('musicxml.xsd', 1609, 2)

    version = property(__version.value, __version.set, None, None)

    _ElementMap.update({
        __work.name() : __work,
        __movement_number.name() : __movement_number,
        __movement_title.name() : __movement_title,
        __identification.name() : __identification,
        __defaults.name() : __defaults,
        __credit.name() : __credit,
        __part_list.name() : __part_list,
        __measure.name() : __measure
    })
    _AttributeMap.update({
        __version.name() : __version
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 5414, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element note uses Python identifier note
    __note = p_ElementDeclaration(p_ExpandedName(None, 'note'), 'note', '__AbsentNamespace0_CTD_ANON_3_note', True, p_Location('musicxml.xsd', 5311, 4), )


    note = property(__note.value, __note.set, None, None)


    # Element backup uses Python identifier backup
    __backup = p_ElementDeclaration(p_ExpandedName(None, 'backup'), 'backup', '__AbsentNamespace0_CTD_ANON_3_backup', True, p_Location('musicxml.xsd', 5312, 4), )


    backup = property(__backup.value, __backup.set, None, None)


    # Element forward uses Python identifier forward
    __forward = p_ElementDeclaration(p_ExpandedName(None, 'forward'), 'forward', '__AbsentNamespace0_CTD_ANON_3_forward', True, p_Location('musicxml.xsd', 5313, 4), )


    forward = property(__forward.value, __forward.set, None, None)


    # Element direction uses Python identifier direction
    __direction = p_ElementDeclaration(p_ExpandedName(None, 'direction'), 'direction', '__AbsentNamespace0_CTD_ANON_3_direction', True, p_Location('musicxml.xsd', 5314, 4), )


    direction = property(__direction.value, __direction.set, None, None)


    # Element attributes uses Python identifier attributes
    __attributes = p_ElementDeclaration(p_ExpandedName(None, 'attributes'), 'attributes', '__AbsentNamespace0_CTD_ANON_3_attributes', True, p_Location('musicxml.xsd', 5315, 4), )


    attributes = property(__attributes.value, __attributes.set, None, None)


    # Element harmony uses Python identifier harmony
    __harmony = p_ElementDeclaration(p_ExpandedName(None, 'harmony'), 'harmony', '__AbsentNamespace0_CTD_ANON_3_harmony', True, p_Location('musicxml.xsd', 5316, 4), )


    harmony = property(__harmony.value, __harmony.set, None, None)


    # Element figured-bass uses Python identifier figured_bass
    __figured_bass = p_ElementDeclaration(p_ExpandedName(None, 'figured-bass'), 'figured_bass', '__AbsentNamespace0_CTD_ANON_3_figured_bass', True, p_Location('musicxml.xsd', 5317, 4), )


    figured_bass = property(__figured_bass.value, __figured_bass.set, None, None)


    # Element print uses Python identifier print_
    __print = p_ElementDeclaration(p_ExpandedName(None, 'print'), 'print_', '__AbsentNamespace0_CTD_ANON_3_print', True, p_Location('musicxml.xsd', 5318, 4), )


    print_ = property(__print.value, __print.set, None, None)


    # Element sound uses Python identifier sound
    __sound = p_ElementDeclaration(p_ExpandedName(None, 'sound'), 'sound', '__AbsentNamespace0_CTD_ANON_3_sound', True, p_Location('musicxml.xsd', 5319, 4), )


    sound = property(__sound.value, __sound.set, None, None)


    # Element barline uses Python identifier barline
    __barline = p_ElementDeclaration(p_ExpandedName(None, 'barline'), 'barline', '__AbsentNamespace0_CTD_ANON_3_barline', True, p_Location('musicxml.xsd', 5320, 4), )


    barline = property(__barline.value, __barline.set, None, None)


    # Element grouping uses Python identifier grouping
    __grouping = p_ElementDeclaration(p_ExpandedName(None, 'grouping'), 'grouping', '__AbsentNamespace0_CTD_ANON_3_grouping', True, p_Location('musicxml.xsd', 5321, 4), )


    grouping = property(__grouping.value, __grouping.set, None, None)


    # Element link uses Python identifier link
    __link = p_ElementDeclaration(p_ExpandedName(None, 'link'), 'link', '__AbsentNamespace0_CTD_ANON_3_link', True, p_Location('musicxml.xsd', 5322, 4), )


    link = property(__link.value, __link.set, None, None)


    # Element bookmark uses Python identifier bookmark
    __bookmark = p_ElementDeclaration(p_ExpandedName(None, 'bookmark'), 'bookmark', '__AbsentNamespace0_CTD_ANON_3_bookmark', True, p_Location('musicxml.xsd', 5323, 4), )


    bookmark = property(__bookmark.value, __bookmark.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_CTD_ANON_3_id', p_IDREF, required=True)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 1966, 2)
    __id._UseLocation = p_Location('musicxml.xsd', 1966, 2)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __note.name() : __note,
        __backup.name() : __backup,
        __forward.name() : __forward,
        __direction.name() : __direction,
        __attributes.name() : __attributes,
        __harmony.name() : __harmony,
        __figured_bass.name() : __figured_bass,
        __print.name() : __print,
        __sound.name() : __sound,
        __barline.name() : __barline,
        __grouping.name() : __grouping,
        __link.name() : __link,
        __bookmark.name() : __bookmark
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type level with content type SIMPLE
class level (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'level')
    _XSDLocation = p_Location('musicxml.xsd', 2133, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute parentheses uses Python identifier parentheses
    __parentheses = p_AttributeUse(p_ExpandedName(None, 'parentheses'), 'parentheses', '__AbsentNamespace0_level_parentheses', _module_typeBindings.yes_no)
    __parentheses._DeclarationLocation = p_Location('musicxml.xsd', 1661, 2)
    __parentheses._UseLocation = p_Location('musicxml.xsd', 1661, 2)

    parentheses = property(__parentheses.value, __parentheses.set, None, None)


    # Attribute bracket uses Python identifier bracket
    __bracket = p_AttributeUse(p_ExpandedName(None, 'bracket'), 'bracket', '__AbsentNamespace0_level_bracket', _module_typeBindings.yes_no)
    __bracket._DeclarationLocation = p_Location('musicxml.xsd', 1662, 2)
    __bracket._UseLocation = p_Location('musicxml.xsd', 1662, 2)

    bracket = property(__bracket.value, __bracket.set, None, None)


    # Attribute size uses Python identifier size
    __size = p_AttributeUse(p_ExpandedName(None, 'size'), 'size', '__AbsentNamespace0_level_size', _module_typeBindings.symbol_size)
    __size._DeclarationLocation = p_Location('musicxml.xsd', 1663, 2)
    __size._UseLocation = p_Location('musicxml.xsd', 1663, 2)

    size = property(__size.value, __size.set, None, None)


    # Attribute reference uses Python identifier reference
    __reference = p_AttributeUse(p_ExpandedName(None, 'reference'), 'reference', '__AbsentNamespace0_level_reference', _module_typeBindings.yes_no)
    __reference._DeclarationLocation = p_Location('musicxml.xsd', 2139, 4)
    __reference._UseLocation = p_Location('musicxml.xsd', 2139, 4)

    reference = property(__reference.value, __reference.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __parentheses.name() : __parentheses,
        __bracket.name() : __bracket,
        __size.name() : __size,
        __reference.name() : __reference
    })
_module_typeBindings.level = level
Namespace.addCategoryObject('typeBinding', 'level', level)


# Complex type midi-device with content type SIMPLE
class midi_device (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'midi-device')
    _XSDLocation = p_Location('musicxml.xsd', 2145, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute port uses Python identifier port
    __port = p_AttributeUse(p_ExpandedName(None, 'port'), 'port', '__AbsentNamespace0_midi_device_port', _module_typeBindings.midi_16)
    __port._DeclarationLocation = p_Location('musicxml.xsd', 2151, 4)
    __port._UseLocation = p_Location('musicxml.xsd', 2151, 4)

    port = property(__port.value, __port.set, None, None)


    # Attribute id uses Python identifier id
    __id = p_AttributeUse(p_ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_midi_device_id', p_IDREF)
    __id._DeclarationLocation = p_Location('musicxml.xsd', 2152, 4)
    __id._UseLocation = p_Location('musicxml.xsd', 2152, 4)

    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __port.name() : __port,
        __id.name() : __id
    })
_module_typeBindings.midi_device = midi_device
Namespace.addCategoryObject('typeBinding', 'midi-device', midi_device)


# Complex type name-display with content type ELEMENT_ONLY
class name_display (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'name-display')
    _XSDLocation = p_Location('musicxml.xsd', 2206, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element display-text uses Python identifier display_text
    __display_text = p_ElementDeclaration(p_ExpandedName(None, 'display-text'), 'display_text', '__AbsentNamespace0_name_display_display_text', True, p_Location('musicxml.xsd', 2212, 4), )


    display_text = property(__display_text.value, __display_text.set, None, None)


    # Element accidental-text uses Python identifier accidental_text
    __accidental_text = p_ElementDeclaration(p_ExpandedName(None, 'accidental-text'), 'accidental_text', '__AbsentNamespace0_name_display_accidental_text', True, p_Location('musicxml.xsd', 2213, 4), )


    accidental_text = property(__accidental_text.value, __accidental_text.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_name_display_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __display_text.name() : __display_text,
        __accidental_text.name() : __accidental_text
    })
    _AttributeMap.update({
        __print_object.name() : __print_object
    })
_module_typeBindings.name_display = name_display
Namespace.addCategoryObject('typeBinding', 'name-display', name_display)


# Complex type wavy-line with content type EMPTY
class wavy_line (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'wavy-line')
    _XSDLocation = p_Location('musicxml.xsd', 2272, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_wavy_line_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_wavy_line_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_wavy_line_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_wavy_line_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_wavy_line_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_wavy_line_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute start-note uses Python identifier start_note
    __start_note = p_AttributeUse(p_ExpandedName(None, 'start-note'), 'start_note', '__AbsentNamespace0_wavy_line_start_note', _module_typeBindings.start_note)
    __start_note._DeclarationLocation = p_Location('musicxml.xsd', 1842, 2)
    __start_note._UseLocation = p_Location('musicxml.xsd', 1842, 2)

    start_note = property(__start_note.value, __start_note.set, None, None)


    # Attribute trill-step uses Python identifier trill_step
    __trill_step = p_AttributeUse(p_ExpandedName(None, 'trill-step'), 'trill_step', '__AbsentNamespace0_wavy_line_trill_step', _module_typeBindings.trill_step)
    __trill_step._DeclarationLocation = p_Location('musicxml.xsd', 1843, 2)
    __trill_step._UseLocation = p_Location('musicxml.xsd', 1843, 2)

    trill_step = property(__trill_step.value, __trill_step.set, None, None)


    # Attribute two-note-turn uses Python identifier two_note_turn
    __two_note_turn = p_AttributeUse(p_ExpandedName(None, 'two-note-turn'), 'two_note_turn', '__AbsentNamespace0_wavy_line_two_note_turn', _module_typeBindings.two_note_turn)
    __two_note_turn._DeclarationLocation = p_Location('musicxml.xsd', 1844, 2)
    __two_note_turn._UseLocation = p_Location('musicxml.xsd', 1844, 2)

    two_note_turn = property(__two_note_turn.value, __two_note_turn.set, None, None)


    # Attribute accelerate uses Python identifier accelerate
    __accelerate = p_AttributeUse(p_ExpandedName(None, 'accelerate'), 'accelerate', '__AbsentNamespace0_wavy_line_accelerate', _module_typeBindings.yes_no)
    __accelerate._DeclarationLocation = p_Location('musicxml.xsd', 1845, 2)
    __accelerate._UseLocation = p_Location('musicxml.xsd', 1845, 2)

    accelerate = property(__accelerate.value, __accelerate.set, None, None)


    # Attribute beats uses Python identifier beats
    __beats = p_AttributeUse(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_wavy_line_beats', _module_typeBindings.trill_beats)
    __beats._DeclarationLocation = p_Location('musicxml.xsd', 1846, 2)
    __beats._UseLocation = p_Location('musicxml.xsd', 1846, 2)

    beats = property(__beats.value, __beats.set, None, None)


    # Attribute second-beat uses Python identifier second_beat
    __second_beat = p_AttributeUse(p_ExpandedName(None, 'second-beat'), 'second_beat', '__AbsentNamespace0_wavy_line_second_beat', _module_typeBindings.percent)
    __second_beat._DeclarationLocation = p_Location('musicxml.xsd', 1847, 2)
    __second_beat._UseLocation = p_Location('musicxml.xsd', 1847, 2)

    second_beat = property(__second_beat.value, __second_beat.set, None, None)


    # Attribute last-beat uses Python identifier last_beat
    __last_beat = p_AttributeUse(p_ExpandedName(None, 'last-beat'), 'last_beat', '__AbsentNamespace0_wavy_line_last_beat', _module_typeBindings.percent)
    __last_beat._DeclarationLocation = p_Location('musicxml.xsd', 1848, 2)
    __last_beat._UseLocation = p_Location('musicxml.xsd', 1848, 2)

    last_beat = property(__last_beat.value, __last_beat.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_wavy_line_type', _module_typeBindings.start_stop_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2276, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 2276, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_wavy_line_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2277, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2277, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __start_note.name() : __start_note,
        __trill_step.name() : __trill_step,
        __two_note_turn.name() : __two_note_turn,
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __second_beat.name() : __second_beat,
        __last_beat.name() : __last_beat,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.wavy_line = wavy_line
Namespace.addCategoryObject('typeBinding', 'wavy-line', wavy_line)


# Complex type beat-repeat with content type ELEMENT_ONLY
class beat_repeat (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'beat-repeat')
    _XSDLocation = p_Location('musicxml.xsd', 2370, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element slash-type uses Python identifier slash_type
    __slash_type = p_ElementDeclaration(p_ExpandedName(None, 'slash-type'), 'slash_type', '__AbsentNamespace0_beat_repeat_slash_type', False, p_Location('musicxml.xsd', 5142, 3), )


    slash_type = property(__slash_type.value, __slash_type.set, None, 'The slash-type element indicates the graphical note type to use for the display of repetition marks.')


    # Element slash-dot uses Python identifier slash_dot
    __slash_dot = p_ElementDeclaration(p_ExpandedName(None, 'slash-dot'), 'slash_dot', '__AbsentNamespace0_beat_repeat_slash_dot', True, p_Location('musicxml.xsd', 5147, 3), )


    slash_dot = property(__slash_dot.value, __slash_dot.set, None, 'The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.')


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_beat_repeat_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2377, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 2377, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute slashes uses Python identifier slashes
    __slashes = p_AttributeUse(p_ExpandedName(None, 'slashes'), 'slashes', '__AbsentNamespace0_beat_repeat_slashes', p_positiveInteger)
    __slashes._DeclarationLocation = p_Location('musicxml.xsd', 2378, 2)
    __slashes._UseLocation = p_Location('musicxml.xsd', 2378, 2)

    slashes = property(__slashes.value, __slashes.set, None, None)


    # Attribute use-dots uses Python identifier use_dots
    __use_dots = p_AttributeUse(p_ExpandedName(None, 'use-dots'), 'use_dots', '__AbsentNamespace0_beat_repeat_use_dots', _module_typeBindings.yes_no)
    __use_dots._DeclarationLocation = p_Location('musicxml.xsd', 2379, 2)
    __use_dots._UseLocation = p_Location('musicxml.xsd', 2379, 2)

    use_dots = property(__use_dots.value, __use_dots.set, None, None)

    _ElementMap.update({
        __slash_type.name() : __slash_type,
        __slash_dot.name() : __slash_dot
    })
    _AttributeMap.update({
        __type.name() : __type,
        __slashes.name() : __slashes,
        __use_dots.name() : __use_dots
    })
_module_typeBindings.beat_repeat = beat_repeat
Namespace.addCategoryObject('typeBinding', 'beat-repeat', beat_repeat)


# Complex type cancel with content type SIMPLE
class cancel (p_complexTypeDefinition):
    _TypeDefinition = fifths
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'cancel')
    _XSDLocation = p_Location('musicxml.xsd', 2382, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is fifths

    # Attribute location uses Python identifier location
    __location = p_AttributeUse(p_ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_cancel_location', _module_typeBindings.cancel_location)
    __location._DeclarationLocation = p_Location('musicxml.xsd', 2388, 4)
    __location._UseLocation = p_Location('musicxml.xsd', 2388, 4)

    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __location.name() : __location
    })
_module_typeBindings.cancel = cancel
Namespace.addCategoryObject('typeBinding', 'cancel', cancel)


# Complex type interchangeable with content type ELEMENT_ONLY
class interchangeable (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'interchangeable')
    _XSDLocation = p_Location('musicxml.xsd', 2428, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element time-relation uses Python identifier time_relation
    __time_relation = p_ElementDeclaration(p_ExpandedName(None, 'time-relation'), 'time_relation', '__AbsentNamespace0_interchangeable_time_relation', False, p_Location('musicxml.xsd', 2433, 3), )


    time_relation = property(__time_relation.value, __time_relation.set, None, None)


    # Element beats uses Python identifier beats
    __beats = p_ElementDeclaration(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_interchangeable_beats', True, p_Location('musicxml.xsd', 5160, 3), )


    beats = property(__beats.value, __beats.set, None, 'The beats element indicates the number of beats, as found in the numerator of a time signature.')


    # Element beat-type uses Python identifier beat_type
    __beat_type = p_ElementDeclaration(p_ExpandedName(None, 'beat-type'), 'beat_type', '__AbsentNamespace0_interchangeable_beat_type', True, p_Location('musicxml.xsd', 5165, 3), )


    beat_type = property(__beat_type.value, __beat_type.set, None, 'The beat-type element indicates the beat unit, as found in the denominator of a time signature.')


    # Attribute symbol uses Python identifier symbol
    __symbol = p_AttributeUse(p_ExpandedName(None, 'symbol'), 'symbol', '__AbsentNamespace0_interchangeable_symbol', _module_typeBindings.time_symbol)
    __symbol._DeclarationLocation = p_Location('musicxml.xsd', 2436, 2)
    __symbol._UseLocation = p_Location('musicxml.xsd', 2436, 2)

    symbol = property(__symbol.value, __symbol.set, None, None)


    # Attribute separator uses Python identifier separator
    __separator = p_AttributeUse(p_ExpandedName(None, 'separator'), 'separator', '__AbsentNamespace0_interchangeable_separator', _module_typeBindings.time_separator)
    __separator._DeclarationLocation = p_Location('musicxml.xsd', 2437, 2)
    __separator._UseLocation = p_Location('musicxml.xsd', 2437, 2)

    separator = property(__separator.value, __separator.set, None, None)

    _ElementMap.update({
        __time_relation.name() : __time_relation,
        __beats.name() : __beats,
        __beat_type.name() : __beat_type
    })
    _AttributeMap.update({
        __symbol.name() : __symbol,
        __separator.name() : __separator
    })
_module_typeBindings.interchangeable = interchangeable
Namespace.addCategoryObject('typeBinding', 'interchangeable', interchangeable)


# Complex type key-octave with content type SIMPLE
class key_octave (p_complexTypeDefinition):
    _TypeDefinition = octave
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'key-octave')
    _XSDLocation = p_Location('musicxml.xsd', 2460, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is octave

    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_key_octave_number', p_positiveInteger, required=True)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2466, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 2466, 4)

    number = property(__number.value, __number.set, None, None)


    # Attribute cancel uses Python identifier cancel
    __cancel = p_AttributeUse(p_ExpandedName(None, 'cancel'), 'cancel', '__AbsentNamespace0_key_octave_cancel', _module_typeBindings.yes_no)
    __cancel._DeclarationLocation = p_Location('musicxml.xsd', 2467, 4)
    __cancel._UseLocation = p_Location('musicxml.xsd', 2467, 4)

    cancel = property(__cancel.value, __cancel.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __number.name() : __number,
        __cancel.name() : __cancel
    })
_module_typeBindings.key_octave = key_octave
Namespace.addCategoryObject('typeBinding', 'key-octave', key_octave)


# Complex type part-symbol with content type SIMPLE
class part_symbol (p_complexTypeDefinition):
    _TypeDefinition = group_symbol_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'part-symbol')
    _XSDLocation = p_Location('musicxml.xsd', 2514, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is group_symbol_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_part_symbol_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_part_symbol_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_part_symbol_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_part_symbol_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_part_symbol_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute top-staff uses Python identifier top_staff
    __top_staff = p_AttributeUse(p_ExpandedName(None, 'top-staff'), 'top_staff', '__AbsentNamespace0_part_symbol_top_staff', _module_typeBindings.staff_number)
    __top_staff._DeclarationLocation = p_Location('musicxml.xsd', 2520, 4)
    __top_staff._UseLocation = p_Location('musicxml.xsd', 2520, 4)

    top_staff = property(__top_staff.value, __top_staff.set, None, None)


    # Attribute bottom-staff uses Python identifier bottom_staff
    __bottom_staff = p_AttributeUse(p_ExpandedName(None, 'bottom-staff'), 'bottom_staff', '__AbsentNamespace0_part_symbol_bottom_staff', _module_typeBindings.staff_number)
    __bottom_staff._DeclarationLocation = p_Location('musicxml.xsd', 2521, 4)
    __bottom_staff._UseLocation = p_Location('musicxml.xsd', 2521, 4)

    bottom_staff = property(__bottom_staff.value, __bottom_staff.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __top_staff.name() : __top_staff,
        __bottom_staff.name() : __bottom_staff
    })
_module_typeBindings.part_symbol = part_symbol
Namespace.addCategoryObject('typeBinding', 'part-symbol', part_symbol)


# Complex type slash with content type ELEMENT_ONLY
class slash (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'slash')
    _XSDLocation = p_Location('musicxml.xsd', 2528, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element slash-type uses Python identifier slash_type
    __slash_type = p_ElementDeclaration(p_ExpandedName(None, 'slash-type'), 'slash_type', '__AbsentNamespace0_slash_slash_type', False, p_Location('musicxml.xsd', 5142, 3), )


    slash_type = property(__slash_type.value, __slash_type.set, None, 'The slash-type element indicates the graphical note type to use for the display of repetition marks.')


    # Element slash-dot uses Python identifier slash_dot
    __slash_dot = p_ElementDeclaration(p_ExpandedName(None, 'slash-dot'), 'slash_dot', '__AbsentNamespace0_slash_slash_dot', True, p_Location('musicxml.xsd', 5147, 3), )


    slash_dot = property(__slash_dot.value, __slash_dot.set, None, 'The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.')


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_slash_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2533, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 2533, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute use-dots uses Python identifier use_dots
    __use_dots = p_AttributeUse(p_ExpandedName(None, 'use-dots'), 'use_dots', '__AbsentNamespace0_slash_use_dots', _module_typeBindings.yes_no)
    __use_dots._DeclarationLocation = p_Location('musicxml.xsd', 2534, 2)
    __use_dots._UseLocation = p_Location('musicxml.xsd', 2534, 2)

    use_dots = property(__use_dots.value, __use_dots.set, None, None)


    # Attribute use-stems uses Python identifier use_stems
    __use_stems = p_AttributeUse(p_ExpandedName(None, 'use-stems'), 'use_stems', '__AbsentNamespace0_slash_use_stems', _module_typeBindings.yes_no)
    __use_stems._DeclarationLocation = p_Location('musicxml.xsd', 2535, 2)
    __use_stems._UseLocation = p_Location('musicxml.xsd', 2535, 2)

    use_stems = property(__use_stems.value, __use_stems.set, None, None)

    _ElementMap.update({
        __slash_type.name() : __slash_type,
        __slash_dot.name() : __slash_dot
    })
    _AttributeMap.update({
        __type.name() : __type,
        __use_dots.name() : __use_dots,
        __use_stems.name() : __use_stems
    })
_module_typeBindings.slash = slash
Namespace.addCategoryObject('typeBinding', 'slash', slash)


# Complex type staff-details with content type ELEMENT_ONLY
class staff_details (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'staff-details')
    _XSDLocation = p_Location('musicxml.xsd', 2538, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element staff-type uses Python identifier staff_type
    __staff_type = p_ElementDeclaration(p_ExpandedName(None, 'staff-type'), 'staff_type', '__AbsentNamespace0_staff_details_staff_type', False, p_Location('musicxml.xsd', 2543, 3), )


    staff_type = property(__staff_type.value, __staff_type.set, None, None)


    # Element staff-lines uses Python identifier staff_lines
    __staff_lines = p_ElementDeclaration(p_ExpandedName(None, 'staff-lines'), 'staff_lines', '__AbsentNamespace0_staff_details_staff_lines', False, p_Location('musicxml.xsd', 2544, 3), )


    staff_lines = property(__staff_lines.value, __staff_lines.set, None, 'The staff-lines element specifies the number of lines for a non 5-line staff.')


    # Element staff-tuning uses Python identifier staff_tuning
    __staff_tuning = p_ElementDeclaration(p_ExpandedName(None, 'staff-tuning'), 'staff_tuning', '__AbsentNamespace0_staff_details_staff_tuning', True, p_Location('musicxml.xsd', 2549, 3), )


    staff_tuning = property(__staff_tuning.value, __staff_tuning.set, None, None)


    # Element capo uses Python identifier capo
    __capo = p_ElementDeclaration(p_ExpandedName(None, 'capo'), 'capo', '__AbsentNamespace0_staff_details_capo', False, p_Location('musicxml.xsd', 2550, 3), )


    capo = property(__capo.value, __capo.set, None, 'The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps.')


    # Element staff-size uses Python identifier staff_size
    __staff_size = p_ElementDeclaration(p_ExpandedName(None, 'staff-size'), 'staff_size', '__AbsentNamespace0_staff_details_staff_size', False, p_Location('musicxml.xsd', 2555, 3), )


    staff_size = property(__staff_size.value, __staff_size.set, None, "The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins.")


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_staff_details_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute print-spacing uses Python identifier print_spacing
    __print_spacing = p_AttributeUse(p_ExpandedName(None, 'print-spacing'), 'print_spacing', '__AbsentNamespace0_staff_details_print_spacing', _module_typeBindings.yes_no)
    __print_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1751, 2)
    __print_spacing._UseLocation = p_Location('musicxml.xsd', 1751, 2)

    print_spacing = property(__print_spacing.value, __print_spacing.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_staff_details_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2561, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2561, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute show-frets uses Python identifier show_frets
    __show_frets = p_AttributeUse(p_ExpandedName(None, 'show-frets'), 'show_frets', '__AbsentNamespace0_staff_details_show_frets', _module_typeBindings.show_frets)
    __show_frets._DeclarationLocation = p_Location('musicxml.xsd', 2562, 2)
    __show_frets._UseLocation = p_Location('musicxml.xsd', 2562, 2)

    show_frets = property(__show_frets.value, __show_frets.set, None, None)

    _ElementMap.update({
        __staff_type.name() : __staff_type,
        __staff_lines.name() : __staff_lines,
        __staff_tuning.name() : __staff_tuning,
        __capo.name() : __capo,
        __staff_size.name() : __staff_size
    })
    _AttributeMap.update({
        __print_object.name() : __print_object,
        __print_spacing.name() : __print_spacing,
        __number.name() : __number,
        __show_frets.name() : __show_frets
    })
_module_typeBindings.staff_details = staff_details
Namespace.addCategoryObject('typeBinding', 'staff-details', staff_details)


# Complex type staff-tuning with content type ELEMENT_ONLY
class staff_tuning (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'staff-tuning')
    _XSDLocation = p_Location('musicxml.xsd', 2567, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element tuning-step uses Python identifier tuning_step
    __tuning_step = p_ElementDeclaration(p_ExpandedName(None, 'tuning-step'), 'tuning_step', '__AbsentNamespace0_staff_tuning_tuning_step', False, p_Location('musicxml.xsd', 5085, 3), )


    tuning_step = property(__tuning_step.value, __tuning_step.set, None, 'The tuning-step element is represented like the step element, with a different name to reflect is different function.')


    # Element tuning-alter uses Python identifier tuning_alter
    __tuning_alter = p_ElementDeclaration(p_ExpandedName(None, 'tuning-alter'), 'tuning_alter', '__AbsentNamespace0_staff_tuning_tuning_alter', False, p_Location('musicxml.xsd', 5090, 3), )


    tuning_alter = property(__tuning_alter.value, __tuning_alter.set, None, 'The tuning-alter element is represented like the alter element, with a different name to reflect is different function.')


    # Element tuning-octave uses Python identifier tuning_octave
    __tuning_octave = p_ElementDeclaration(p_ExpandedName(None, 'tuning-octave'), 'tuning_octave', '__AbsentNamespace0_staff_tuning_tuning_octave', False, p_Location('musicxml.xsd', 5095, 3), )


    tuning_octave = property(__tuning_octave.value, __tuning_octave.set, None, 'The tuning-octave element is represented like the octave element, with a different name to reflect is different function.')


    # Attribute line uses Python identifier line
    __line = p_AttributeUse(p_ExpandedName(None, 'line'), 'line', '__AbsentNamespace0_staff_tuning_line', _module_typeBindings.staff_line)
    __line._DeclarationLocation = p_Location('musicxml.xsd', 2572, 2)
    __line._UseLocation = p_Location('musicxml.xsd', 2572, 2)

    line = property(__line.value, __line.set, None, None)

    _ElementMap.update({
        __tuning_step.name() : __tuning_step,
        __tuning_alter.name() : __tuning_alter,
        __tuning_octave.name() : __tuning_octave
    })
    _AttributeMap.update({
        __line.name() : __line
    })
_module_typeBindings.staff_tuning = staff_tuning
Namespace.addCategoryObject('typeBinding', 'staff-tuning', staff_tuning)


# Complex type transpose with content type ELEMENT_ONLY
class transpose (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'transpose')
    _XSDLocation = p_Location('musicxml.xsd', 2599, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element diatonic uses Python identifier diatonic
    __diatonic = p_ElementDeclaration(p_ExpandedName(None, 'diatonic'), 'diatonic', '__AbsentNamespace0_transpose_diatonic', False, p_Location('musicxml.xsd', 2604, 3), )


    diatonic = property(__diatonic.value, __diatonic.set, None, 'The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions.')


    # Element chromatic uses Python identifier chromatic
    __chromatic = p_ElementDeclaration(p_ExpandedName(None, 'chromatic'), 'chromatic', '__AbsentNamespace0_transpose_chromatic', False, p_Location('musicxml.xsd', 2609, 3), )


    chromatic = property(__chromatic.value, __chromatic.set, None, 'The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.')


    # Element octave-change uses Python identifier octave_change
    __octave_change = p_ElementDeclaration(p_ExpandedName(None, 'octave-change'), 'octave_change', '__AbsentNamespace0_transpose_octave_change', False, p_Location('musicxml.xsd', 2614, 3), )


    octave_change = property(__octave_change.value, __octave_change.set, None, 'The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch.')


    # Element double uses Python identifier double
    __double = p_ElementDeclaration(p_ExpandedName(None, 'double'), 'double', '__AbsentNamespace0_transpose_double', False, p_Location('musicxml.xsd', 2619, 3), )


    double = property(__double.value, __double.set, None, 'If the double element is present, it indicates that the music is doubled one octave down from what is currently written (as is the case for mixed cello / bass parts in orchestral literature).')


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_transpose_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2625, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2625, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __diatonic.name() : __diatonic,
        __chromatic.name() : __chromatic,
        __octave_change.name() : __octave_change,
        __double.name() : __double
    })
    _AttributeMap.update({
        __number.name() : __number
    })
_module_typeBindings.transpose = transpose
Namespace.addCategoryObject('typeBinding', 'transpose', transpose)


# Complex type bar-style-color with content type SIMPLE
class bar_style_color (p_complexTypeDefinition):
    _TypeDefinition = bar_style
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bar-style-color')
    _XSDLocation = p_Location('musicxml.xsd', 2630, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is bar_style

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_bar_style_color_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color
    })
_module_typeBindings.bar_style_color = bar_style_color
Namespace.addCategoryObject('typeBinding', 'bar-style-color', bar_style_color)


# Complex type barline with content type ELEMENT_ONLY
class barline (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'barline')
    _XSDLocation = p_Location('musicxml.xsd', 2641, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element bar-style uses Python identifier bar_style
    __bar_style = p_ElementDeclaration(p_ExpandedName(None, 'bar-style'), 'bar_style', '__AbsentNamespace0_barline_bar_style', False, p_Location('musicxml.xsd', 2648, 3), )


    bar_style = property(__bar_style.value, __bar_style.set, None, None)


    # Element wavy-line uses Python identifier wavy_line
    __wavy_line = p_ElementDeclaration(p_ExpandedName(None, 'wavy-line'), 'wavy_line', '__AbsentNamespace0_barline_wavy_line', False, p_Location('musicxml.xsd', 2650, 3), )


    wavy_line = property(__wavy_line.value, __wavy_line.set, None, None)


    # Element segno uses Python identifier segno
    __segno = p_ElementDeclaration(p_ExpandedName(None, 'segno'), 'segno', '__AbsentNamespace0_barline_segno', False, p_Location('musicxml.xsd', 2651, 3), )


    segno = property(__segno.value, __segno.set, None, None)


    # Element coda uses Python identifier coda
    __coda = p_ElementDeclaration(p_ExpandedName(None, 'coda'), 'coda', '__AbsentNamespace0_barline_coda', False, p_Location('musicxml.xsd', 2652, 3), )


    coda = property(__coda.value, __coda.set, None, None)


    # Element fermata uses Python identifier fermata
    __fermata = p_ElementDeclaration(p_ExpandedName(None, 'fermata'), 'fermata', '__AbsentNamespace0_barline_fermata', True, p_Location('musicxml.xsd', 2653, 3), )


    fermata = property(__fermata.value, __fermata.set, None, None)


    # Element ending uses Python identifier ending
    __ending = p_ElementDeclaration(p_ExpandedName(None, 'ending'), 'ending', '__AbsentNamespace0_barline_ending', False, p_Location('musicxml.xsd', 2654, 3), )


    ending = property(__ending.value, __ending.set, None, None)


    # Element repeat uses Python identifier repeat
    __repeat = p_ElementDeclaration(p_ExpandedName(None, 'repeat'), 'repeat', '__AbsentNamespace0_barline_repeat', False, p_Location('musicxml.xsd', 2655, 3), )


    repeat = property(__repeat.value, __repeat.set, None, None)


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_barline_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_barline_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Attribute location uses Python identifier location
    __location = p_AttributeUse(p_ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_barline_location', _module_typeBindings.right_left_middle, unicode_default='right')
    __location._DeclarationLocation = p_Location('musicxml.xsd', 2657, 2)
    __location._UseLocation = p_Location('musicxml.xsd', 2657, 2)

    location = property(__location.value, __location.set, None, None)


    # Attribute segno uses Python identifier segno_
    __segno_ = p_AttributeUse(p_ExpandedName(None, 'segno'), 'segno_', '__AbsentNamespace0_barline_segno_', p_token)
    __segno_._DeclarationLocation = p_Location('musicxml.xsd', 2658, 2)
    __segno_._UseLocation = p_Location('musicxml.xsd', 2658, 2)

    segno_ = property(__segno_.value, __segno_.set, None, None)


    # Attribute coda uses Python identifier coda_
    __coda_ = p_AttributeUse(p_ExpandedName(None, 'coda'), 'coda_', '__AbsentNamespace0_barline_coda_', p_token)
    __coda_._DeclarationLocation = p_Location('musicxml.xsd', 2659, 2)
    __coda_._UseLocation = p_Location('musicxml.xsd', 2659, 2)

    coda_ = property(__coda_.value, __coda_.set, None, None)


    # Attribute divisions uses Python identifier divisions
    __divisions = p_AttributeUse(p_ExpandedName(None, 'divisions'), 'divisions', '__AbsentNamespace0_barline_divisions', _module_typeBindings.divisions)
    __divisions._DeclarationLocation = p_Location('musicxml.xsd', 2660, 2)
    __divisions._UseLocation = p_Location('musicxml.xsd', 2660, 2)

    divisions = property(__divisions.value, __divisions.set, None, None)

    _ElementMap.update({
        __bar_style.name() : __bar_style,
        __wavy_line.name() : __wavy_line,
        __segno.name() : __segno,
        __coda.name() : __coda,
        __fermata.name() : __fermata,
        __ending.name() : __ending,
        __repeat.name() : __repeat,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __location.name() : __location,
        __segno_.name() : __segno_,
        __coda_.name() : __coda_,
        __divisions.name() : __divisions
    })
_module_typeBindings.barline = barline
Namespace.addCategoryObject('typeBinding', 'barline', barline)


# Complex type repeat with content type EMPTY
class repeat (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'repeat')
    _XSDLocation = p_Location('musicxml.xsd', 2682, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute direction uses Python identifier direction
    __direction = p_AttributeUse(p_ExpandedName(None, 'direction'), 'direction', '__AbsentNamespace0_repeat_direction', _module_typeBindings.backward_forward, required=True)
    __direction._DeclarationLocation = p_Location('musicxml.xsd', 2686, 2)
    __direction._UseLocation = p_Location('musicxml.xsd', 2686, 2)

    direction = property(__direction.value, __direction.set, None, None)


    # Attribute times uses Python identifier times
    __times = p_AttributeUse(p_ExpandedName(None, 'times'), 'times', '__AbsentNamespace0_repeat_times', p_nonNegativeInteger)
    __times._DeclarationLocation = p_Location('musicxml.xsd', 2687, 2)
    __times._UseLocation = p_Location('musicxml.xsd', 2687, 2)

    times = property(__times.value, __times.set, None, None)


    # Attribute winged uses Python identifier winged
    __winged = p_AttributeUse(p_ExpandedName(None, 'winged'), 'winged', '__AbsentNamespace0_repeat_winged', _module_typeBindings.winged)
    __winged._DeclarationLocation = p_Location('musicxml.xsd', 2688, 2)
    __winged._UseLocation = p_Location('musicxml.xsd', 2688, 2)

    winged = property(__winged.value, __winged.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __direction.name() : __direction,
        __times.name() : __times,
        __winged.name() : __winged
    })
_module_typeBindings.repeat = repeat
Namespace.addCategoryObject('typeBinding', 'repeat', repeat)


# Complex type accord with content type ELEMENT_ONLY
class accord (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'accord')
    _XSDLocation = p_Location('musicxml.xsd', 2693, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element tuning-step uses Python identifier tuning_step
    __tuning_step = p_ElementDeclaration(p_ExpandedName(None, 'tuning-step'), 'tuning_step', '__AbsentNamespace0_accord_tuning_step', False, p_Location('musicxml.xsd', 5085, 3), )


    tuning_step = property(__tuning_step.value, __tuning_step.set, None, 'The tuning-step element is represented like the step element, with a different name to reflect is different function.')


    # Element tuning-alter uses Python identifier tuning_alter
    __tuning_alter = p_ElementDeclaration(p_ExpandedName(None, 'tuning-alter'), 'tuning_alter', '__AbsentNamespace0_accord_tuning_alter', False, p_Location('musicxml.xsd', 5090, 3), )


    tuning_alter = property(__tuning_alter.value, __tuning_alter.set, None, 'The tuning-alter element is represented like the alter element, with a different name to reflect is different function.')


    # Element tuning-octave uses Python identifier tuning_octave
    __tuning_octave = p_ElementDeclaration(p_ExpandedName(None, 'tuning-octave'), 'tuning_octave', '__AbsentNamespace0_accord_tuning_octave', False, p_Location('musicxml.xsd', 5095, 3), )


    tuning_octave = property(__tuning_octave.value, __tuning_octave.set, None, 'The tuning-octave element is represented like the octave element, with a different name to reflect is different function.')


    # Attribute string uses Python identifier string
    __string = p_AttributeUse(p_ExpandedName(None, 'string'), 'string', '__AbsentNamespace0_accord_string', _module_typeBindings.string_number)
    __string._DeclarationLocation = p_Location('musicxml.xsd', 2698, 2)
    __string._UseLocation = p_Location('musicxml.xsd', 2698, 2)

    string = property(__string.value, __string.set, None, None)

    _ElementMap.update({
        __tuning_step.name() : __tuning_step,
        __tuning_alter.name() : __tuning_alter,
        __tuning_octave.name() : __tuning_octave
    })
    _AttributeMap.update({
        __string.name() : __string
    })
_module_typeBindings.accord = accord
Namespace.addCategoryObject('typeBinding', 'accord', accord)


# Complex type barre with content type EMPTY
class barre (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'barre')
    _XSDLocation = p_Location('musicxml.xsd', 2725, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_barre_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_barre_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2729, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 2729, 2)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __type.name() : __type
    })
_module_typeBindings.barre = barre
Namespace.addCategoryObject('typeBinding', 'barre', barre)


# Complex type beater with content type SIMPLE
class beater (p_complexTypeDefinition):
    _TypeDefinition = beater_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'beater')
    _XSDLocation = p_Location('musicxml.xsd', 2768, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is beater_value

    # Attribute tip uses Python identifier tip
    __tip = p_AttributeUse(p_ExpandedName(None, 'tip'), 'tip', '__AbsentNamespace0_beater_tip', _module_typeBindings.tip_direction)
    __tip._DeclarationLocation = p_Location('musicxml.xsd', 2774, 4)
    __tip._UseLocation = p_Location('musicxml.xsd', 2774, 4)

    tip = property(__tip.value, __tip.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __tip.name() : __tip
    })
_module_typeBindings.beater = beater
Namespace.addCategoryObject('typeBinding', 'beater', beater)


# Complex type bracket with content type EMPTY
class bracket (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bracket')
    _XSDLocation = p_Location('musicxml.xsd', 2779, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_bracket_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_bracket_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_bracket_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_bracket_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_bracket_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_bracket_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_bracket_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_bracket_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_bracket_type', _module_typeBindings.start_stop_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2783, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 2783, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_bracket_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2784, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2784, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute line-end uses Python identifier line_end
    __line_end = p_AttributeUse(p_ExpandedName(None, 'line-end'), 'line_end', '__AbsentNamespace0_bracket_line_end', _module_typeBindings.line_end, required=True)
    __line_end._DeclarationLocation = p_Location('musicxml.xsd', 2785, 2)
    __line_end._UseLocation = p_Location('musicxml.xsd', 2785, 2)

    line_end = property(__line_end.value, __line_end.set, None, None)


    # Attribute end-length uses Python identifier end_length
    __end_length = p_AttributeUse(p_ExpandedName(None, 'end-length'), 'end_length', '__AbsentNamespace0_bracket_end_length', _module_typeBindings.tenths)
    __end_length._DeclarationLocation = p_Location('musicxml.xsd', 2786, 2)
    __end_length._UseLocation = p_Location('musicxml.xsd', 2786, 2)

    end_length = property(__end_length.value, __end_length.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __line_end.name() : __line_end,
        __end_length.name() : __end_length
    })
_module_typeBindings.bracket = bracket
Namespace.addCategoryObject('typeBinding', 'bracket', bracket)


# Complex type dashes with content type EMPTY
class dashes (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'dashes')
    _XSDLocation = p_Location('musicxml.xsd', 2793, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_dashes_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_dashes_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_dashes_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_dashes_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_dashes_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_dashes_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_dashes_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_dashes_type', _module_typeBindings.start_stop_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2797, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 2797, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_dashes_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2798, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2798, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.dashes = dashes
Namespace.addCategoryObject('typeBinding', 'dashes', dashes)


# Complex type degree with content type ELEMENT_ONLY
class degree (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'degree')
    _XSDLocation = p_Location('musicxml.xsd', 2804, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element degree-value uses Python identifier degree_value
    __degree_value = p_ElementDeclaration(p_ExpandedName(None, 'degree-value'), 'degree_value', '__AbsentNamespace0_degree_degree_value', False, p_Location('musicxml.xsd', 2811, 3), )


    degree_value = property(__degree_value.value, __degree_value.set, None, None)


    # Element degree-alter uses Python identifier degree_alter
    __degree_alter = p_ElementDeclaration(p_ExpandedName(None, 'degree-alter'), 'degree_alter', '__AbsentNamespace0_degree_degree_alter', False, p_Location('musicxml.xsd', 2812, 3), )


    degree_alter = property(__degree_alter.value, __degree_alter.set, None, None)


    # Element degree-type uses Python identifier degree_type
    __degree_type = p_ElementDeclaration(p_ExpandedName(None, 'degree-type'), 'degree_type', '__AbsentNamespace0_degree_degree_type', False, p_Location('musicxml.xsd', 2813, 3), )


    degree_type = property(__degree_type.value, __degree_type.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_degree_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __degree_value.name() : __degree_value,
        __degree_alter.name() : __degree_alter,
        __degree_type.name() : __degree_type
    })
    _AttributeMap.update({
        __print_object.name() : __print_object
    })
_module_typeBindings.degree = degree
Namespace.addCategoryObject('typeBinding', 'degree', degree)


# Complex type direction with content type ELEMENT_ONLY
class direction (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'direction')
    _XSDLocation = p_Location('musicxml.xsd', 2855, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element direction-type uses Python identifier direction_type
    __direction_type = p_ElementDeclaration(p_ExpandedName(None, 'direction-type'), 'direction_type', '__AbsentNamespace0_direction_direction_type', True, p_Location('musicxml.xsd', 2862, 3), )


    direction_type = property(__direction_type.value, __direction_type.set, None, None)


    # Element offset uses Python identifier offset
    __offset = p_ElementDeclaration(p_ExpandedName(None, 'offset'), 'offset', '__AbsentNamespace0_direction_offset', False, p_Location('musicxml.xsd', 2863, 3), )


    offset = property(__offset.value, __offset.set, None, None)


    # Element sound uses Python identifier sound
    __sound = p_ElementDeclaration(p_ExpandedName(None, 'sound'), 'sound', '__AbsentNamespace0_direction_sound', False, p_Location('musicxml.xsd', 2866, 3), )


    sound = property(__sound.value, __sound.set, None, None)


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_direction_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_direction_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Element staff uses Python identifier staff
    __staff = p_ElementDeclaration(p_ExpandedName(None, 'staff'), 'staff', '__AbsentNamespace0_direction_staff', False, p_Location('musicxml.xsd', 5072, 3), )


    staff = property(__staff.value, __staff.set, None, 'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')


    # Element voice uses Python identifier voice
    __voice = p_ElementDeclaration(p_ExpandedName(None, 'voice'), 'voice', '__AbsentNamespace0_direction_voice', False, p_Location('musicxml.xsd', 5108, 3), )


    voice = property(__voice.value, __voice.set, None, None)


    # Attribute directive uses Python identifier directive
    __directive = p_AttributeUse(p_ExpandedName(None, 'directive'), 'directive', '__AbsentNamespace0_direction_directive', _module_typeBindings.yes_no)
    __directive._DeclarationLocation = p_Location('musicxml.xsd', 1600, 2)
    __directive._UseLocation = p_Location('musicxml.xsd', 1600, 2)

    directive = property(__directive.value, __directive.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_direction_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)

    _ElementMap.update({
        __direction_type.name() : __direction_type,
        __offset.name() : __offset,
        __sound.name() : __sound,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __voice.name() : __voice
    })
    _AttributeMap.update({
        __directive.name() : __directive,
        __placement.name() : __placement
    })
_module_typeBindings.direction = direction
Namespace.addCategoryObject('typeBinding', 'direction', direction)


# Complex type first-fret with content type SIMPLE
class first_fret (p_complexTypeDefinition):
    _TypeDefinition = p_positiveInteger
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'first-fret')
    _XSDLocation = p_Location('musicxml.xsd', 2941, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_positiveInteger

    # Attribute text uses Python identifier text
    __text = p_AttributeUse(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_first_fret_text', p_token)
    __text._DeclarationLocation = p_Location('musicxml.xsd', 2947, 4)
    __text._UseLocation = p_Location('musicxml.xsd', 2947, 4)

    text = property(__text.value, __text.set, None, None)


    # Attribute location uses Python identifier location
    __location = p_AttributeUse(p_ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_first_fret_location', _module_typeBindings.left_right)
    __location._DeclarationLocation = p_Location('musicxml.xsd', 2948, 4)
    __location._UseLocation = p_Location('musicxml.xsd', 2948, 4)

    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __text.name() : __text,
        __location.name() : __location
    })
_module_typeBindings.first_fret = first_fret
Namespace.addCategoryObject('typeBinding', 'first-fret', first_fret)


# Complex type frame with content type ELEMENT_ONLY
class frame (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'frame')
    _XSDLocation = p_Location('musicxml.xsd', 2953, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element frame-strings uses Python identifier frame_strings
    __frame_strings = p_ElementDeclaration(p_ExpandedName(None, 'frame-strings'), 'frame_strings', '__AbsentNamespace0_frame_frame_strings', False, p_Location('musicxml.xsd', 2958, 3), )


    frame_strings = property(__frame_strings.value, __frame_strings.set, None, 'The frame-strings element gives the overall size of the frame in vertical lines (strings).')


    # Element frame-frets uses Python identifier frame_frets
    __frame_frets = p_ElementDeclaration(p_ExpandedName(None, 'frame-frets'), 'frame_frets', '__AbsentNamespace0_frame_frame_frets', False, p_Location('musicxml.xsd', 2963, 3), )


    frame_frets = property(__frame_frets.value, __frame_frets.set, None, 'The frame-frets element gives the overall size of the frame in horizontal spaces (frets).')


    # Element first-fret uses Python identifier first_fret
    __first_fret = p_ElementDeclaration(p_ExpandedName(None, 'first-fret'), 'first_fret', '__AbsentNamespace0_frame_first_fret', False, p_Location('musicxml.xsd', 2968, 3), )


    first_fret = property(__first_fret.value, __first_fret.set, None, None)


    # Element frame-note uses Python identifier frame_note
    __frame_note = p_ElementDeclaration(p_ExpandedName(None, 'frame-note'), 'frame_note', '__AbsentNamespace0_frame_frame_note', True, p_Location('musicxml.xsd', 2969, 3), )


    frame_note = property(__frame_note.value, __frame_note.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_frame_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_frame_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_frame_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_frame_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_frame_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_frame_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_frame_valign', _module_typeBindings.valign_image)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1862, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1862, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute height uses Python identifier height
    __height = p_AttributeUse(p_ExpandedName(None, 'height'), 'height', '__AbsentNamespace0_frame_height', _module_typeBindings.tenths)
    __height._DeclarationLocation = p_Location('musicxml.xsd', 2975, 2)
    __height._UseLocation = p_Location('musicxml.xsd', 2975, 2)

    height = property(__height.value, __height.set, None, None)


    # Attribute width uses Python identifier width
    __width = p_AttributeUse(p_ExpandedName(None, 'width'), 'width', '__AbsentNamespace0_frame_width', _module_typeBindings.tenths)
    __width._DeclarationLocation = p_Location('musicxml.xsd', 2976, 2)
    __width._UseLocation = p_Location('musicxml.xsd', 2976, 2)

    width = property(__width.value, __width.set, None, None)


    # Attribute unplayed uses Python identifier unplayed
    __unplayed = p_AttributeUse(p_ExpandedName(None, 'unplayed'), 'unplayed', '__AbsentNamespace0_frame_unplayed', p_token)
    __unplayed._DeclarationLocation = p_Location('musicxml.xsd', 2977, 2)
    __unplayed._UseLocation = p_Location('musicxml.xsd', 2977, 2)

    unplayed = property(__unplayed.value, __unplayed.set, None, None)

    _ElementMap.update({
        __frame_strings.name() : __frame_strings,
        __frame_frets.name() : __frame_frets,
        __first_fret.name() : __first_fret,
        __frame_note.name() : __frame_note
    })
    _AttributeMap.update({
        __color.name() : __color,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __height.name() : __height,
        __width.name() : __width,
        __unplayed.name() : __unplayed
    })
_module_typeBindings.frame = frame
Namespace.addCategoryObject('typeBinding', 'frame', frame)


# Complex type grouping with content type ELEMENT_ONLY
class grouping (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'grouping')
    _XSDLocation = p_Location('musicxml.xsd', 2992, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element feature uses Python identifier feature
    __feature = p_ElementDeclaration(p_ExpandedName(None, 'feature'), 'feature', '__AbsentNamespace0_grouping_feature', True, p_Location('musicxml.xsd', 2999, 3), )


    feature = property(__feature.value, __feature.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_grouping_type', _module_typeBindings.start_stop_single, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3001, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3001, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_grouping_number', p_token, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3002, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 3002, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute member-of uses Python identifier member_of
    __member_of = p_AttributeUse(p_ExpandedName(None, 'member-of'), 'member_of', '__AbsentNamespace0_grouping_member_of', p_token)
    __member_of._DeclarationLocation = p_Location('musicxml.xsd', 3003, 2)
    __member_of._UseLocation = p_Location('musicxml.xsd', 3003, 2)

    member_of = property(__member_of.value, __member_of.set, None, None)

    _ElementMap.update({
        __feature.name() : __feature
    })
    _AttributeMap.update({
        __type.name() : __type,
        __number.name() : __number,
        __member_of.name() : __member_of
    })
_module_typeBindings.grouping = grouping
Namespace.addCategoryObject('typeBinding', 'grouping', grouping)


# Complex type image with content type EMPTY
class image (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'image')
    _XSDLocation = p_Location('musicxml.xsd', 3038, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_image_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_image_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_image_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_image_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_image_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_image_valign', _module_typeBindings.valign_image)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1862, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1862, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute source uses Python identifier source
    __source = p_AttributeUse(p_ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_image_source', pyxb.binding.datatypes.anyURI, required=True)
    __source._DeclarationLocation = p_Location('musicxml.xsd', 1891, 2)
    __source._UseLocation = p_Location('musicxml.xsd', 1891, 2)

    source = property(__source.value, __source.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_image_type', p_token, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 1892, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 1892, 2)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __source.name() : __source,
        __type.name() : __type
    })
_module_typeBindings.image = image
Namespace.addCategoryObject('typeBinding', 'image', image)


# Complex type metronome-beam with content type SIMPLE
class metronome_beam (p_complexTypeDefinition):
    _TypeDefinition = beam_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'metronome-beam')
    _XSDLocation = p_Location('musicxml.xsd', 3128, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is beam_value

    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_metronome_beam_number', _module_typeBindings.beam_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3134, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 3134, 4)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __number.name() : __number
    })
_module_typeBindings.metronome_beam = metronome_beam
Namespace.addCategoryObject('typeBinding', 'metronome-beam', metronome_beam)


# Complex type metronome-tuplet with content type ELEMENT_ONLY
class metronome_tuplet (time_modification):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'metronome-tuplet')
    _XSDLocation = p_Location('musicxml.xsd', 3159, 1)
    _ElementMap = time_modification._ElementMap.copy()
    _AttributeMap = time_modification._AttributeMap.copy()
    # Base type is time_modification

    # Element actual_notes (actual-notes) inherited from time-modification

    # Element normal_notes (normal-notes) inherited from time-modification

    # Element normal_type (normal-type) inherited from time-modification

    # Element normal_dot (normal-dot) inherited from time-modification

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_metronome_tuplet_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3165, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3165, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute bracket uses Python identifier bracket
    __bracket = p_AttributeUse(p_ExpandedName(None, 'bracket'), 'bracket', '__AbsentNamespace0_metronome_tuplet_bracket', _module_typeBindings.yes_no)
    __bracket._DeclarationLocation = p_Location('musicxml.xsd', 3166, 4)
    __bracket._UseLocation = p_Location('musicxml.xsd', 3166, 4)

    bracket = property(__bracket.value, __bracket.set, None, None)


    # Attribute show-number uses Python identifier show_number
    __show_number = p_AttributeUse(p_ExpandedName(None, 'show-number'), 'show_number', '__AbsentNamespace0_metronome_tuplet_show_number', _module_typeBindings.show_tuplet)
    __show_number._DeclarationLocation = p_Location('musicxml.xsd', 3167, 4)
    __show_number._UseLocation = p_Location('musicxml.xsd', 3167, 4)

    show_number = property(__show_number.value, __show_number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type,
        __bracket.name() : __bracket,
        __show_number.name() : __show_number
    })
_module_typeBindings.metronome_tuplet = metronome_tuplet
Namespace.addCategoryObject('typeBinding', 'metronome-tuplet', metronome_tuplet)


# Complex type offset with content type SIMPLE
class offset (p_complexTypeDefinition):
    _TypeDefinition = divisions
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'offset')
    _XSDLocation = p_Location('musicxml.xsd', 3183, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is divisions

    # Attribute sound uses Python identifier sound
    __sound = p_AttributeUse(p_ExpandedName(None, 'sound'), 'sound', '__AbsentNamespace0_offset_sound', _module_typeBindings.yes_no)
    __sound._DeclarationLocation = p_Location('musicxml.xsd', 3189, 4)
    __sound._UseLocation = p_Location('musicxml.xsd', 3189, 4)

    sound = property(__sound.value, __sound.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __sound.name() : __sound
    })
_module_typeBindings.offset = offset
Namespace.addCategoryObject('typeBinding', 'offset', offset)


# Complex type print with content type ELEMENT_ONLY
class print_ (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'print')
    _XSDLocation = p_Location('musicxml.xsd', 3279, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element measure-layout uses Python identifier measure_layout
    __measure_layout = p_ElementDeclaration(p_ExpandedName(None, 'measure-layout'), 'measure_layout', '__AbsentNamespace0_print__measure_layout', False, p_Location('musicxml.xsd', 3287, 3), )


    measure_layout = property(__measure_layout.value, __measure_layout.set, None, None)


    # Element measure-numbering uses Python identifier measure_numbering
    __measure_numbering = p_ElementDeclaration(p_ExpandedName(None, 'measure-numbering'), 'measure_numbering', '__AbsentNamespace0_print__measure_numbering', False, p_Location('musicxml.xsd', 3288, 3), )


    measure_numbering = property(__measure_numbering.value, __measure_numbering.set, None, None)


    # Element part-name-display uses Python identifier part_name_display
    __part_name_display = p_ElementDeclaration(p_ExpandedName(None, 'part-name-display'), 'part_name_display', '__AbsentNamespace0_print__part_name_display', False, p_Location('musicxml.xsd', 3289, 3), )


    part_name_display = property(__part_name_display.value, __part_name_display.set, None, None)


    # Element part-abbreviation-display uses Python identifier part_abbreviation_display
    __part_abbreviation_display = p_ElementDeclaration(p_ExpandedName(None, 'part-abbreviation-display'), 'part_abbreviation_display', '__AbsentNamespace0_print__part_abbreviation_display', False, p_Location('musicxml.xsd', 3290, 3), )


    part_abbreviation_display = property(__part_abbreviation_display.value, __part_abbreviation_display.set, None, None)


    # Element page-layout uses Python identifier page_layout
    __page_layout = p_ElementDeclaration(p_ExpandedName(None, 'page-layout'), 'page_layout', '__AbsentNamespace0_print__page_layout', False, p_Location('musicxml.xsd', 5244, 3), )


    page_layout = property(__page_layout.value, __page_layout.set, None, None)


    # Element system-layout uses Python identifier system_layout
    __system_layout = p_ElementDeclaration(p_ExpandedName(None, 'system-layout'), 'system_layout', '__AbsentNamespace0_print__system_layout', False, p_Location('musicxml.xsd', 5245, 3), )


    system_layout = property(__system_layout.value, __system_layout.set, None, None)


    # Element staff-layout uses Python identifier staff_layout
    __staff_layout = p_ElementDeclaration(p_ExpandedName(None, 'staff-layout'), 'staff_layout', '__AbsentNamespace0_print__staff_layout', True, p_Location('musicxml.xsd', 5246, 3), )


    staff_layout = property(__staff_layout.value, __staff_layout.set, None, None)


    # Attribute staff-spacing uses Python identifier staff_spacing
    __staff_spacing = p_AttributeUse(p_ExpandedName(None, 'staff-spacing'), 'staff_spacing', '__AbsentNamespace0_print__staff_spacing', _module_typeBindings.tenths)
    __staff_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1904, 2)
    __staff_spacing._UseLocation = p_Location('musicxml.xsd', 1904, 2)

    staff_spacing = property(__staff_spacing.value, __staff_spacing.set, None, None)


    # Attribute new-system uses Python identifier new_system
    __new_system = p_AttributeUse(p_ExpandedName(None, 'new-system'), 'new_system', '__AbsentNamespace0_print__new_system', _module_typeBindings.yes_no)
    __new_system._DeclarationLocation = p_Location('musicxml.xsd', 1905, 2)
    __new_system._UseLocation = p_Location('musicxml.xsd', 1905, 2)

    new_system = property(__new_system.value, __new_system.set, None, None)


    # Attribute new-page uses Python identifier new_page
    __new_page = p_AttributeUse(p_ExpandedName(None, 'new-page'), 'new_page', '__AbsentNamespace0_print__new_page', _module_typeBindings.yes_no)
    __new_page._DeclarationLocation = p_Location('musicxml.xsd', 1906, 2)
    __new_page._UseLocation = p_Location('musicxml.xsd', 1906, 2)

    new_page = property(__new_page.value, __new_page.set, None, None)


    # Attribute blank-page uses Python identifier blank_page
    __blank_page = p_AttributeUse(p_ExpandedName(None, 'blank-page'), 'blank_page', '__AbsentNamespace0_print__blank_page', p_positiveInteger)
    __blank_page._DeclarationLocation = p_Location('musicxml.xsd', 1907, 2)
    __blank_page._UseLocation = p_Location('musicxml.xsd', 1907, 2)

    blank_page = property(__blank_page.value, __blank_page.set, None, None)


    # Attribute page-number uses Python identifier page_number
    __page_number = p_AttributeUse(p_ExpandedName(None, 'page-number'), 'page_number', '__AbsentNamespace0_print__page_number', p_token)
    __page_number._DeclarationLocation = p_Location('musicxml.xsd', 1908, 2)
    __page_number._UseLocation = p_Location('musicxml.xsd', 1908, 2)

    page_number = property(__page_number.value, __page_number.set, None, None)

    _ElementMap.update({
        __measure_layout.name() : __measure_layout,
        __measure_numbering.name() : __measure_numbering,
        __part_name_display.name() : __part_name_display,
        __part_abbreviation_display.name() : __part_abbreviation_display,
        __page_layout.name() : __page_layout,
        __system_layout.name() : __system_layout,
        __staff_layout.name() : __staff_layout
    })
    _AttributeMap.update({
        __staff_spacing.name() : __staff_spacing,
        __new_system.name() : __new_system,
        __new_page.name() : __new_page,
        __blank_page.name() : __blank_page,
        __page_number.name() : __page_number
    })
_module_typeBindings.print_ = print_
Namespace.addCategoryObject('typeBinding', 'print', print_)


# Complex type stick with content type ELEMENT_ONLY
class stick (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'stick')
    _XSDLocation = p_Location('musicxml.xsd', 3396, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element stick-type uses Python identifier stick_type
    __stick_type = p_ElementDeclaration(p_ExpandedName(None, 'stick-type'), 'stick_type', '__AbsentNamespace0_stick_stick_type', False, p_Location('musicxml.xsd', 3401, 3), )


    stick_type = property(__stick_type.value, __stick_type.set, None, None)


    # Element stick-material uses Python identifier stick_material
    __stick_material = p_ElementDeclaration(p_ExpandedName(None, 'stick-material'), 'stick_material', '__AbsentNamespace0_stick_stick_material', False, p_Location('musicxml.xsd', 3402, 3), )


    stick_material = property(__stick_material.value, __stick_material.set, None, None)


    # Attribute tip uses Python identifier tip
    __tip = p_AttributeUse(p_ExpandedName(None, 'tip'), 'tip', '__AbsentNamespace0_stick_tip', _module_typeBindings.tip_direction)
    __tip._DeclarationLocation = p_Location('musicxml.xsd', 3404, 2)
    __tip._UseLocation = p_Location('musicxml.xsd', 3404, 2)

    tip = property(__tip.value, __tip.set, None, None)

    _ElementMap.update({
        __stick_type.name() : __stick_type,
        __stick_material.name() : __stick_material
    })
    _AttributeMap.update({
        __tip.name() : __tip
    })
_module_typeBindings.stick = stick
Namespace.addCategoryObject('typeBinding', 'stick', stick)


# Complex type wedge with content type EMPTY
class wedge (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'wedge')
    _XSDLocation = p_Location('musicxml.xsd', 3415, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_wedge_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_wedge_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_wedge_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_wedge_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_wedge_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_wedge_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_wedge_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_wedge_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_wedge_type', _module_typeBindings.wedge_type, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3419, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3419, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_wedge_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3420, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 3420, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute spread uses Python identifier spread
    __spread = p_AttributeUse(p_ExpandedName(None, 'spread'), 'spread', '__AbsentNamespace0_wedge_spread', _module_typeBindings.tenths)
    __spread._DeclarationLocation = p_Location('musicxml.xsd', 3421, 2)
    __spread._UseLocation = p_Location('musicxml.xsd', 3421, 2)

    spread = property(__spread.value, __spread.set, None, None)


    # Attribute niente uses Python identifier niente
    __niente = p_AttributeUse(p_ExpandedName(None, 'niente'), 'niente', '__AbsentNamespace0_wedge_niente', _module_typeBindings.yes_no)
    __niente._DeclarationLocation = p_Location('musicxml.xsd', 3422, 2)
    __niente._UseLocation = p_Location('musicxml.xsd', 3422, 2)

    niente = property(__niente.value, __niente.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __spread.name() : __spread,
        __niente.name() : __niente
    })
_module_typeBindings.wedge = wedge
Namespace.addCategoryObject('typeBinding', 'wedge', wedge)


# Complex type supports with content type EMPTY
class supports (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'supports')
    _XSDLocation = p_Location('musicxml.xsd', 3494, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_supports_type', _module_typeBindings.yes_no, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3498, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3498, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute element uses Python identifier element
    __element = p_AttributeUse(p_ExpandedName(None, 'element'), 'element', '__AbsentNamespace0_supports_element', p_NMTOKEN, required=True)
    __element._DeclarationLocation = p_Location('musicxml.xsd', 3499, 2)
    __element._UseLocation = p_Location('musicxml.xsd', 3499, 2)

    element = property(__element.value, __element.set, None, None)


    # Attribute attribute uses Python identifier attribute
    __attribute = p_AttributeUse(p_ExpandedName(None, 'attribute'), 'attribute', '__AbsentNamespace0_supports_attribute', p_NMTOKEN)
    __attribute._DeclarationLocation = p_Location('musicxml.xsd', 3500, 2)
    __attribute._UseLocation = p_Location('musicxml.xsd', 3500, 2)

    attribute = property(__attribute.value, __attribute.set, None, None)


    # Attribute value uses Python identifier value_
    __value = p_AttributeUse(p_ExpandedName(None, 'value'), 'value_', '__AbsentNamespace0_supports_value', p_token)
    __value._DeclarationLocation = p_Location('musicxml.xsd', 3501, 2)
    __value._UseLocation = p_Location('musicxml.xsd', 3501, 2)

    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type,
        __element.name() : __element,
        __attribute.name() : __attribute,
        __value.name() : __value
    })
_module_typeBindings.supports = supports
Namespace.addCategoryObject('typeBinding', 'supports', supports)


# Complex type distance with content type SIMPLE
class distance (p_complexTypeDefinition):
    _TypeDefinition = tenths
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'distance')
    _XSDLocation = p_Location('musicxml.xsd', 3518, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is tenths

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_distance_type', _module_typeBindings.distance_type, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3524, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3524, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.distance = distance
Namespace.addCategoryObject('typeBinding', 'distance', distance)


# Complex type line-width with content type SIMPLE
class line_width (p_complexTypeDefinition):
    _TypeDefinition = tenths
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'line-width')
    _XSDLocation = p_Location('musicxml.xsd', 3529, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is tenths

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_line_width_type', _module_typeBindings.line_width_type, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3535, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3535, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.line_width = line_width
Namespace.addCategoryObject('typeBinding', 'line-width', line_width)


# Complex type note-size with content type SIMPLE
class note_size (p_complexTypeDefinition):
    _TypeDefinition = non_negative_decimal
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'note-size')
    _XSDLocation = p_Location('musicxml.xsd', 3553, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is non_negative_decimal

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_note_size_type', _module_typeBindings.note_size_type, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3559, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3559, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.note_size = note_size
Namespace.addCategoryObject('typeBinding', 'note-size', note_size)


# Complex type page-margins with content type ELEMENT_ONLY
class page_margins (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'page-margins')
    _XSDLocation = p_Location('musicxml.xsd', 3588, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element top-margin uses Python identifier top_margin
    __top_margin = p_ElementDeclaration(p_ExpandedName(None, 'top-margin'), 'top_margin', '__AbsentNamespace0_page_margins_top_margin', False, p_Location('musicxml.xsd', 5234, 3), )


    top_margin = property(__top_margin.value, __top_margin.set, None, None)


    # Element bottom-margin uses Python identifier bottom_margin
    __bottom_margin = p_ElementDeclaration(p_ExpandedName(None, 'bottom-margin'), 'bottom_margin', '__AbsentNamespace0_page_margins_bottom_margin', False, p_Location('musicxml.xsd', 5235, 3), )


    bottom_margin = property(__bottom_margin.value, __bottom_margin.set, None, None)


    # Element left-margin uses Python identifier left_margin
    __left_margin = p_ElementDeclaration(p_ExpandedName(None, 'left-margin'), 'left_margin', '__AbsentNamespace0_page_margins_left_margin', False, p_Location('musicxml.xsd', 5255, 3), )


    left_margin = property(__left_margin.value, __left_margin.set, None, None)


    # Element right-margin uses Python identifier right_margin
    __right_margin = p_ElementDeclaration(p_ExpandedName(None, 'right-margin'), 'right_margin', '__AbsentNamespace0_page_margins_right_margin', False, p_Location('musicxml.xsd', 5256, 3), )


    right_margin = property(__right_margin.value, __right_margin.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_page_margins_type', _module_typeBindings.margin_type)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3593, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3593, 2)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({
        __top_margin.name() : __top_margin,
        __bottom_margin.name() : __bottom_margin,
        __left_margin.name() : __left_margin,
        __right_margin.name() : __right_margin
    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.page_margins = page_margins
Namespace.addCategoryObject('typeBinding', 'page-margins', page_margins)


# Complex type staff-layout with content type ELEMENT_ONLY
class staff_layout (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'staff-layout')
    _XSDLocation = p_Location('musicxml.xsd', 3606, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element staff-distance uses Python identifier staff_distance
    __staff_distance = p_ElementDeclaration(p_ExpandedName(None, 'staff-distance'), 'staff_distance', '__AbsentNamespace0_staff_layout_staff_distance', False, p_Location('musicxml.xsd', 3611, 3), )


    staff_distance = property(__staff_distance.value, __staff_distance.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_staff_layout_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3613, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 3613, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __staff_distance.name() : __staff_distance
    })
    _AttributeMap.update({
        __number.name() : __number
    })
_module_typeBindings.staff_layout = staff_layout
Namespace.addCategoryObject('typeBinding', 'staff-layout', staff_layout)


# Complex type link with content type EMPTY
class link (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'link')
    _XSDLocation = p_Location('musicxml.xsd', 3660, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_link_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_link_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_link_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_link_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute element uses Python identifier element
    __element = p_AttributeUse(p_ExpandedName(None, 'element'), 'element', '__AbsentNamespace0_link_element', p_NMTOKEN)
    __element._DeclarationLocation = p_Location('musicxml.xsd', 1917, 2)
    __element._UseLocation = p_Location('musicxml.xsd', 1917, 2)

    element = property(__element.value, __element.set, None, None)


    # Attribute position uses Python identifier position
    __position = p_AttributeUse(p_ExpandedName(None, 'position'), 'position', '__AbsentNamespace0_link_position', p_positiveInteger)
    __position._DeclarationLocation = p_Location('musicxml.xsd', 1918, 2)
    __position._UseLocation = p_Location('musicxml.xsd', 1918, 2)

    position = property(__position.value, __position.set, None, None)


    # Attribute name uses Python identifier name
    __name = p_AttributeUse(p_ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_link_name', p_token)
    __name._DeclarationLocation = p_Location('musicxml.xsd', 3665, 2)
    __name._UseLocation = p_Location('musicxml.xsd', 3665, 2)

    name = property(__name.value, __name.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'href'), 'href', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI, required=True)
    __href._DeclarationLocation = p_Location('xlink.xsd', 20, 1)
    __href._UseLocation = p_Location('musicxml.xsd', 1926, 2)

    href = property(__href.value, __href.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'type'), 'type', '__AbsentNamespace0_link_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = p_Location('xlink.xsd', 22, 1)
    __type._UseLocation = p_Location('musicxml.xsd', 1927, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'role'), 'role', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkrole', p_token)
    __role._DeclarationLocation = p_Location('xlink.xsd', 30, 1)
    __role._UseLocation = p_Location('musicxml.xsd', 1928, 2)

    role = property(__role.value, __role.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'title'), 'title', '__AbsentNamespace0_link_httpwww_w3_org1999xlinktitle', p_token)
    __title._DeclarationLocation = p_Location('xlink.xsd', 32, 1)
    __title._UseLocation = p_Location('musicxml.xsd', 1929, 2)

    title = property(__title.value, __title.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'show'), 'show', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default='replace')
    __show._DeclarationLocation = p_Location('xlink.xsd', 34, 1)
    __show._UseLocation = p_Location('musicxml.xsd', 1930, 2)

    show = property(__show.value, __show.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'actuate'), 'actuate', '__AbsentNamespace0_link_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON_2, unicode_default='onRequest')
    __actuate._DeclarationLocation = p_Location('xlink.xsd', 46, 1)
    __actuate._UseLocation = p_Location('musicxml.xsd', 1931, 2)

    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __element.name() : __element,
        __position.name() : __position,
        __name.name() : __name,
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.link = link
Namespace.addCategoryObject('typeBinding', 'link', link)


# Complex type arpeggiate with content type EMPTY
class arpeggiate (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'arpeggiate')
    _XSDLocation = p_Location('musicxml.xsd', 3698, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_arpeggiate_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_arpeggiate_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_arpeggiate_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_arpeggiate_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_arpeggiate_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_arpeggiate_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_arpeggiate_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3702, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 3702, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute direction uses Python identifier direction
    __direction = p_AttributeUse(p_ExpandedName(None, 'direction'), 'direction', '__AbsentNamespace0_arpeggiate_direction', _module_typeBindings.up_down)
    __direction._DeclarationLocation = p_Location('musicxml.xsd', 3703, 2)
    __direction._UseLocation = p_Location('musicxml.xsd', 3703, 2)

    direction = property(__direction.value, __direction.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __number.name() : __number,
        __direction.name() : __direction
    })
_module_typeBindings.arpeggiate = arpeggiate
Namespace.addCategoryObject('typeBinding', 'arpeggiate', arpeggiate)


# Complex type beam with content type SIMPLE
class beam (p_complexTypeDefinition):
    _TypeDefinition = beam_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'beam')
    _XSDLocation = p_Location('musicxml.xsd', 3818, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is beam_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_beam_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_beam_number', _module_typeBindings.beam_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3830, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 3830, 4)

    number = property(__number.value, __number.set, None, None)


    # Attribute repeater uses Python identifier repeater
    __repeater = p_AttributeUse(p_ExpandedName(None, 'repeater'), 'repeater', '__AbsentNamespace0_beam_repeater', _module_typeBindings.yes_no)
    __repeater._DeclarationLocation = p_Location('musicxml.xsd', 3831, 4)
    __repeater._UseLocation = p_Location('musicxml.xsd', 3831, 4)

    repeater = property(__repeater.value, __repeater.set, None, None)


    # Attribute fan uses Python identifier fan
    __fan = p_AttributeUse(p_ExpandedName(None, 'fan'), 'fan', '__AbsentNamespace0_beam_fan', _module_typeBindings.fan)
    __fan._DeclarationLocation = p_Location('musicxml.xsd', 3832, 4)
    __fan._UseLocation = p_Location('musicxml.xsd', 3832, 4)

    fan = property(__fan.value, __fan.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __number.name() : __number,
        __repeater.name() : __repeater,
        __fan.name() : __fan
    })
_module_typeBindings.beam = beam
Namespace.addCategoryObject('typeBinding', 'beam', beam)


# Complex type grace with content type EMPTY
class grace (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'grace')
    _XSDLocation = p_Location('musicxml.xsd', 3967, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute steal-time-previous uses Python identifier steal_time_previous
    __steal_time_previous = p_AttributeUse(p_ExpandedName(None, 'steal-time-previous'), 'steal_time_previous', '__AbsentNamespace0_grace_steal_time_previous', _module_typeBindings.percent)
    __steal_time_previous._DeclarationLocation = p_Location('musicxml.xsd', 3971, 2)
    __steal_time_previous._UseLocation = p_Location('musicxml.xsd', 3971, 2)

    steal_time_previous = property(__steal_time_previous.value, __steal_time_previous.set, None, None)


    # Attribute steal-time-following uses Python identifier steal_time_following
    __steal_time_following = p_AttributeUse(p_ExpandedName(None, 'steal-time-following'), 'steal_time_following', '__AbsentNamespace0_grace_steal_time_following', _module_typeBindings.percent)
    __steal_time_following._DeclarationLocation = p_Location('musicxml.xsd', 3972, 2)
    __steal_time_following._UseLocation = p_Location('musicxml.xsd', 3972, 2)

    steal_time_following = property(__steal_time_following.value, __steal_time_following.set, None, None)


    # Attribute make-time uses Python identifier make_time
    __make_time = p_AttributeUse(p_ExpandedName(None, 'make-time'), 'make_time', '__AbsentNamespace0_grace_make_time', _module_typeBindings.divisions)
    __make_time._DeclarationLocation = p_Location('musicxml.xsd', 3973, 2)
    __make_time._UseLocation = p_Location('musicxml.xsd', 3973, 2)

    make_time = property(__make_time.value, __make_time.set, None, None)


    # Attribute slash uses Python identifier slash
    __slash = p_AttributeUse(p_ExpandedName(None, 'slash'), 'slash', '__AbsentNamespace0_grace_slash', _module_typeBindings.yes_no)
    __slash._DeclarationLocation = p_Location('musicxml.xsd', 3974, 2)
    __slash._UseLocation = p_Location('musicxml.xsd', 3974, 2)

    slash = property(__slash.value, __slash.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __steal_time_previous.name() : __steal_time_previous,
        __steal_time_following.name() : __steal_time_following,
        __make_time.name() : __make_time,
        __slash.name() : __slash
    })
_module_typeBindings.grace = grace
Namespace.addCategoryObject('typeBinding', 'grace', grace)


# Complex type hole-closed with content type SIMPLE
class hole_closed (p_complexTypeDefinition):
    _TypeDefinition = hole_closed_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'hole-closed')
    _XSDLocation = p_Location('musicxml.xsd', 4075, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is hole_closed_value

    # Attribute location uses Python identifier location
    __location = p_AttributeUse(p_ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_hole_closed_location', _module_typeBindings.hole_closed_location)
    __location._DeclarationLocation = p_Location('musicxml.xsd', 4081, 4)
    __location._UseLocation = p_Location('musicxml.xsd', 4081, 4)

    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __location.name() : __location
    })
_module_typeBindings.hole_closed = hole_closed
Namespace.addCategoryObject('typeBinding', 'hole-closed', hole_closed)


# Complex type lyric with content type ELEMENT_ONLY
class lyric (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'lyric')
    _XSDLocation = p_Location('musicxml.xsd', 4093, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element syllabic uses Python identifier syllabic
    __syllabic = p_ElementDeclaration(p_ExpandedName(None, 'syllabic'), 'syllabic', '__AbsentNamespace0_lyric_syllabic', True, p_Location('musicxml.xsd', 4100, 5), )


    syllabic = property(__syllabic.value, __syllabic.set, None, None)


    # Element text uses Python identifier text
    __text = p_ElementDeclaration(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_lyric_text', True, p_Location('musicxml.xsd', 4101, 5), )


    text = property(__text.value, __text.set, None, None)


    # Element elision uses Python identifier elision
    __elision = p_ElementDeclaration(p_ExpandedName(None, 'elision'), 'elision', '__AbsentNamespace0_lyric_elision', True, p_Location('musicxml.xsd', 4104, 7), )


    elision = property(__elision.value, __elision.set, None, None)


    # Element extend uses Python identifier extend_
    __extend = p_ElementDeclaration(p_ExpandedName(None, 'extend'), 'extend_', '__AbsentNamespace0_lyric_extend', False, p_Location('musicxml.xsd', 4109, 5), )


    extend_ = property(__extend.value, __extend.set, None, None)


    # Element laughing uses Python identifier laughing
    __laughing = p_ElementDeclaration(p_ExpandedName(None, 'laughing'), 'laughing', '__AbsentNamespace0_lyric_laughing', False, p_Location('musicxml.xsd', 4112, 4), )


    laughing = property(__laughing.value, __laughing.set, None, 'The laughing element is taken from Humdrum.')


    # Element humming uses Python identifier humming
    __humming = p_ElementDeclaration(p_ExpandedName(None, 'humming'), 'humming', '__AbsentNamespace0_lyric_humming', False, p_Location('musicxml.xsd', 4117, 4), )


    humming = property(__humming.value, __humming.set, None, 'The humming element is taken from Humdrum.')


    # Element end-line uses Python identifier end_line
    __end_line = p_ElementDeclaration(p_ExpandedName(None, 'end-line'), 'end_line', '__AbsentNamespace0_lyric_end_line', False, p_Location('musicxml.xsd', 4123, 3), )


    end_line = property(__end_line.value, __end_line.set, None, 'The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.')


    # Element end-paragraph uses Python identifier end_paragraph
    __end_paragraph = p_ElementDeclaration(p_ExpandedName(None, 'end-paragraph'), 'end_paragraph', '__AbsentNamespace0_lyric_end_paragraph', False, p_Location('musicxml.xsd', 4128, 3), )


    end_paragraph = property(__end_paragraph.value, __end_paragraph.set, None, 'The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.')


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_lyric_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_lyric_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_lyric_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute justify uses Python identifier justify
    __justify = p_AttributeUse(p_ExpandedName(None, 'justify'), 'justify', '__AbsentNamespace0_lyric_justify', _module_typeBindings.left_center_right)
    __justify._DeclarationLocation = p_Location('musicxml.xsd', 1647, 2)
    __justify._UseLocation = p_Location('musicxml.xsd', 1647, 2)

    justify = property(__justify.value, __justify.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_lyric_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_lyric_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_lyric_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_lyric_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_lyric_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_lyric_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_lyric_number', p_NMTOKEN)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4135, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4135, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute name uses Python identifier name
    __name = p_AttributeUse(p_ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_lyric_name', p_token)
    __name._DeclarationLocation = p_Location('musicxml.xsd', 4136, 2)
    __name._UseLocation = p_Location('musicxml.xsd', 4136, 2)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __syllabic.name() : __syllabic,
        __text.name() : __text,
        __elision.name() : __elision,
        __extend.name() : __extend,
        __laughing.name() : __laughing,
        __humming.name() : __humming,
        __end_line.name() : __end_line,
        __end_paragraph.name() : __end_paragraph,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __color.name() : __color,
        __justify.name() : __justify,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number,
        __name.name() : __name
    })
_module_typeBindings.lyric = lyric
Namespace.addCategoryObject('typeBinding', 'lyric', lyric)


# Complex type non-arpeggiate with content type EMPTY
class non_arpeggiate (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'non-arpeggiate')
    _XSDLocation = p_Location('musicxml.xsd', 4157, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_non_arpeggiate_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_non_arpeggiate_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_non_arpeggiate_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_non_arpeggiate_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_non_arpeggiate_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_non_arpeggiate_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_non_arpeggiate_type', _module_typeBindings.top_bottom, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4161, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 4161, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_non_arpeggiate_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4162, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4162, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.non_arpeggiate = non_arpeggiate
Namespace.addCategoryObject('typeBinding', 'non-arpeggiate', non_arpeggiate)


# Complex type notations with content type ELEMENT_ONLY
class notations (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'notations')
    _XSDLocation = p_Location('musicxml.xsd', 4168, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element tied uses Python identifier tied
    __tied = p_ElementDeclaration(p_ExpandedName(None, 'tied'), 'tied', '__AbsentNamespace0_notations_tied', True, p_Location('musicxml.xsd', 4175, 4), )


    tied = property(__tied.value, __tied.set, None, None)


    # Element slur uses Python identifier slur
    __slur = p_ElementDeclaration(p_ExpandedName(None, 'slur'), 'slur', '__AbsentNamespace0_notations_slur', True, p_Location('musicxml.xsd', 4176, 4), )


    slur = property(__slur.value, __slur.set, None, None)


    # Element tuplet uses Python identifier tuplet
    __tuplet = p_ElementDeclaration(p_ExpandedName(None, 'tuplet'), 'tuplet', '__AbsentNamespace0_notations_tuplet', True, p_Location('musicxml.xsd', 4177, 4), )


    tuplet = property(__tuplet.value, __tuplet.set, None, None)


    # Element glissando uses Python identifier glissando
    __glissando = p_ElementDeclaration(p_ExpandedName(None, 'glissando'), 'glissando', '__AbsentNamespace0_notations_glissando', True, p_Location('musicxml.xsd', 4178, 4), )


    glissando = property(__glissando.value, __glissando.set, None, None)


    # Element slide uses Python identifier slide
    __slide = p_ElementDeclaration(p_ExpandedName(None, 'slide'), 'slide', '__AbsentNamespace0_notations_slide', True, p_Location('musicxml.xsd', 4179, 4), )


    slide = property(__slide.value, __slide.set, None, None)


    # Element ornaments uses Python identifier ornaments
    __ornaments = p_ElementDeclaration(p_ExpandedName(None, 'ornaments'), 'ornaments', '__AbsentNamespace0_notations_ornaments', True, p_Location('musicxml.xsd', 4180, 4), )


    ornaments = property(__ornaments.value, __ornaments.set, None, None)


    # Element technical uses Python identifier technical
    __technical = p_ElementDeclaration(p_ExpandedName(None, 'technical'), 'technical', '__AbsentNamespace0_notations_technical', True, p_Location('musicxml.xsd', 4181, 4), )


    technical = property(__technical.value, __technical.set, None, None)


    # Element articulations uses Python identifier articulations
    __articulations = p_ElementDeclaration(p_ExpandedName(None, 'articulations'), 'articulations', '__AbsentNamespace0_notations_articulations', True, p_Location('musicxml.xsd', 4182, 4), )


    articulations = property(__articulations.value, __articulations.set, None, None)


    # Element dynamics uses Python identifier dynamics
    __dynamics = p_ElementDeclaration(p_ExpandedName(None, 'dynamics'), 'dynamics', '__AbsentNamespace0_notations_dynamics', True, p_Location('musicxml.xsd', 4183, 4), )


    dynamics = property(__dynamics.value, __dynamics.set, None, None)


    # Element fermata uses Python identifier fermata
    __fermata = p_ElementDeclaration(p_ExpandedName(None, 'fermata'), 'fermata', '__AbsentNamespace0_notations_fermata', True, p_Location('musicxml.xsd', 4184, 4), )


    fermata = property(__fermata.value, __fermata.set, None, None)


    # Element arpeggiate uses Python identifier arpeggiate
    __arpeggiate = p_ElementDeclaration(p_ExpandedName(None, 'arpeggiate'), 'arpeggiate', '__AbsentNamespace0_notations_arpeggiate', True, p_Location('musicxml.xsd', 4185, 4), )


    arpeggiate = property(__arpeggiate.value, __arpeggiate.set, None, None)


    # Element non-arpeggiate uses Python identifier non_arpeggiate
    __non_arpeggiate = p_ElementDeclaration(p_ExpandedName(None, 'non-arpeggiate'), 'non_arpeggiate', '__AbsentNamespace0_notations_non_arpeggiate', True, p_Location('musicxml.xsd', 4186, 4), )


    non_arpeggiate = property(__non_arpeggiate.value, __non_arpeggiate.set, None, None)


    # Element accidental-mark uses Python identifier accidental_mark
    __accidental_mark = p_ElementDeclaration(p_ExpandedName(None, 'accidental-mark'), 'accidental_mark', '__AbsentNamespace0_notations_accidental_mark', True, p_Location('musicxml.xsd', 4187, 4), )


    accidental_mark = property(__accidental_mark.value, __accidental_mark.set, None, None)


    # Element other-notation uses Python identifier other_notation
    __other_notation = p_ElementDeclaration(p_ExpandedName(None, 'other-notation'), 'other_notation', '__AbsentNamespace0_notations_other_notation', True, p_Location('musicxml.xsd', 4188, 4), )


    other_notation = property(__other_notation.value, __other_notation.set, None, None)


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_notations_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_notations_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_notations_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __tied.name() : __tied,
        __slur.name() : __slur,
        __tuplet.name() : __tuplet,
        __glissando.name() : __glissando,
        __slide.name() : __slide,
        __ornaments.name() : __ornaments,
        __technical.name() : __technical,
        __articulations.name() : __articulations,
        __dynamics.name() : __dynamics,
        __fermata.name() : __fermata,
        __arpeggiate.name() : __arpeggiate,
        __non_arpeggiate.name() : __non_arpeggiate,
        __accidental_mark.name() : __accidental_mark,
        __other_notation.name() : __other_notation,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __print_object.name() : __print_object
    })
_module_typeBindings.notations = notations
Namespace.addCategoryObject('typeBinding', 'notations', notations)


# Complex type note-type with content type SIMPLE
class note_type (p_complexTypeDefinition):
    _TypeDefinition = note_type_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'note-type')
    _XSDLocation = p_Location('musicxml.xsd', 4253, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is note_type_value

    # Attribute size uses Python identifier size
    __size = p_AttributeUse(p_ExpandedName(None, 'size'), 'size', '__AbsentNamespace0_note_type_size', _module_typeBindings.symbol_size)
    __size._DeclarationLocation = p_Location('musicxml.xsd', 4259, 4)
    __size._UseLocation = p_Location('musicxml.xsd', 4259, 4)

    size = property(__size.value, __size.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __size.name() : __size
    })
_module_typeBindings.note_type = note_type
Namespace.addCategoryObject('typeBinding', 'note-type', note_type)


# Complex type rest with content type ELEMENT_ONLY
class rest (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'rest')
    _XSDLocation = p_Location('musicxml.xsd', 4400, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element display-step uses Python identifier display_step
    __display_step = p_ElementDeclaration(p_ExpandedName(None, 'display-step'), 'display_step', '__AbsentNamespace0_rest_display_step', False, p_Location('musicxml.xsd', 5280, 3), )


    display_step = property(__display_step.value, __display_step.set, None, None)


    # Element display-octave uses Python identifier display_octave
    __display_octave = p_ElementDeclaration(p_ExpandedName(None, 'display-octave'), 'display_octave', '__AbsentNamespace0_rest_display_octave', False, p_Location('musicxml.xsd', 5281, 3), )


    display_octave = property(__display_octave.value, __display_octave.set, None, None)


    # Attribute measure uses Python identifier measure
    __measure = p_AttributeUse(p_ExpandedName(None, 'measure'), 'measure', '__AbsentNamespace0_rest_measure', _module_typeBindings.yes_no)
    __measure._DeclarationLocation = p_Location('musicxml.xsd', 4407, 2)
    __measure._UseLocation = p_Location('musicxml.xsd', 4407, 2)

    measure = property(__measure.value, __measure.set, None, None)

    _ElementMap.update({
        __display_step.name() : __display_step,
        __display_octave.name() : __display_octave
    })
    _AttributeMap.update({
        __measure.name() : __measure
    })
_module_typeBindings.rest = rest
Namespace.addCategoryObject('typeBinding', 'rest', rest)


# Complex type slur with content type EMPTY
class slur (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'slur')
    _XSDLocation = p_Location('musicxml.xsd', 4426, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute bezier-offset uses Python identifier bezier_offset
    __bezier_offset = p_AttributeUse(p_ExpandedName(None, 'bezier-offset'), 'bezier_offset', '__AbsentNamespace0_slur_bezier_offset', _module_typeBindings.divisions)
    __bezier_offset._DeclarationLocation = p_Location('musicxml.xsd', 1573, 2)
    __bezier_offset._UseLocation = p_Location('musicxml.xsd', 1573, 2)

    bezier_offset = property(__bezier_offset.value, __bezier_offset.set, None, None)


    # Attribute bezier-offset2 uses Python identifier bezier_offset2
    __bezier_offset2 = p_AttributeUse(p_ExpandedName(None, 'bezier-offset2'), 'bezier_offset2', '__AbsentNamespace0_slur_bezier_offset2', _module_typeBindings.divisions)
    __bezier_offset2._DeclarationLocation = p_Location('musicxml.xsd', 1574, 2)
    __bezier_offset2._UseLocation = p_Location('musicxml.xsd', 1574, 2)

    bezier_offset2 = property(__bezier_offset2.value, __bezier_offset2.set, None, None)


    # Attribute bezier-x uses Python identifier bezier_x
    __bezier_x = p_AttributeUse(p_ExpandedName(None, 'bezier-x'), 'bezier_x', '__AbsentNamespace0_slur_bezier_x', _module_typeBindings.tenths)
    __bezier_x._DeclarationLocation = p_Location('musicxml.xsd', 1575, 2)
    __bezier_x._UseLocation = p_Location('musicxml.xsd', 1575, 2)

    bezier_x = property(__bezier_x.value, __bezier_x.set, None, None)


    # Attribute bezier-y uses Python identifier bezier_y
    __bezier_y = p_AttributeUse(p_ExpandedName(None, 'bezier-y'), 'bezier_y', '__AbsentNamespace0_slur_bezier_y', _module_typeBindings.tenths)
    __bezier_y._DeclarationLocation = p_Location('musicxml.xsd', 1576, 2)
    __bezier_y._UseLocation = p_Location('musicxml.xsd', 1576, 2)

    bezier_y = property(__bezier_y.value, __bezier_y.set, None, None)


    # Attribute bezier-x2 uses Python identifier bezier_x2
    __bezier_x2 = p_AttributeUse(p_ExpandedName(None, 'bezier-x2'), 'bezier_x2', '__AbsentNamespace0_slur_bezier_x2', _module_typeBindings.tenths)
    __bezier_x2._DeclarationLocation = p_Location('musicxml.xsd', 1577, 2)
    __bezier_x2._UseLocation = p_Location('musicxml.xsd', 1577, 2)

    bezier_x2 = property(__bezier_x2.value, __bezier_x2.set, None, None)


    # Attribute bezier-y2 uses Python identifier bezier_y2
    __bezier_y2 = p_AttributeUse(p_ExpandedName(None, 'bezier-y2'), 'bezier_y2', '__AbsentNamespace0_slur_bezier_y2', _module_typeBindings.tenths)
    __bezier_y2._DeclarationLocation = p_Location('musicxml.xsd', 1578, 2)
    __bezier_y2._UseLocation = p_Location('musicxml.xsd', 1578, 2)

    bezier_y2 = property(__bezier_y2.value, __bezier_y2.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_slur_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_slur_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_slur_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_slur_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute orientation uses Python identifier orientation
    __orientation = p_AttributeUse(p_ExpandedName(None, 'orientation'), 'orientation', '__AbsentNamespace0_slur_orientation', _module_typeBindings.over_under)
    __orientation._DeclarationLocation = p_Location('musicxml.xsd', 1691, 2)
    __orientation._UseLocation = p_Location('musicxml.xsd', 1691, 2)

    orientation = property(__orientation.value, __orientation.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_slur_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_slur_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_slur_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_slur_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_slur_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_slur_type', _module_typeBindings.start_stop_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4430, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 4430, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_slur_number', _module_typeBindings.number_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4431, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4431, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __bezier_offset.name() : __bezier_offset,
        __bezier_offset2.name() : __bezier_offset2,
        __bezier_x.name() : __bezier_x,
        __bezier_y.name() : __bezier_y,
        __bezier_x2.name() : __bezier_x2,
        __bezier_y2.name() : __bezier_y2,
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __orientation.name() : __orientation,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.slur = slur
Namespace.addCategoryObject('typeBinding', 'slur', slur)


# Complex type stem with content type SIMPLE
class stem (p_complexTypeDefinition):
    _TypeDefinition = stem_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'stem')
    _XSDLocation = p_Location('musicxml.xsd', 4441, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is stem_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_stem_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_stem_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1879, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1879, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_stem_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1880, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1880, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_stem_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1881, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1881, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_stem_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1882, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1882, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.stem = stem
Namespace.addCategoryObject('typeBinding', 'stem', stem)


# Complex type tie with content type EMPTY
class tie (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tie')
    _XSDLocation = p_Location('musicxml.xsd', 4589, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_tie_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4593, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 4593, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute time-only uses Python identifier time_only
    __time_only = p_AttributeUse(p_ExpandedName(None, 'time-only'), 'time_only', '__AbsentNamespace0_tie_time_only', _module_typeBindings.time_only)
    __time_only._DeclarationLocation = p_Location('musicxml.xsd', 4594, 2)
    __time_only._UseLocation = p_Location('musicxml.xsd', 4594, 2)

    time_only = property(__time_only.value, __time_only.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type,
        __time_only.name() : __time_only
    })
_module_typeBindings.tie = tie
Namespace.addCategoryObject('typeBinding', 'tie', tie)


# Complex type tied with content type EMPTY
class tied (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tied')
    _XSDLocation = p_Location('musicxml.xsd', 4597, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute bezier-offset uses Python identifier bezier_offset
    __bezier_offset = p_AttributeUse(p_ExpandedName(None, 'bezier-offset'), 'bezier_offset', '__AbsentNamespace0_tied_bezier_offset', _module_typeBindings.divisions)
    __bezier_offset._DeclarationLocation = p_Location('musicxml.xsd', 1573, 2)
    __bezier_offset._UseLocation = p_Location('musicxml.xsd', 1573, 2)

    bezier_offset = property(__bezier_offset.value, __bezier_offset.set, None, None)


    # Attribute bezier-offset2 uses Python identifier bezier_offset2
    __bezier_offset2 = p_AttributeUse(p_ExpandedName(None, 'bezier-offset2'), 'bezier_offset2', '__AbsentNamespace0_tied_bezier_offset2', _module_typeBindings.divisions)
    __bezier_offset2._DeclarationLocation = p_Location('musicxml.xsd', 1574, 2)
    __bezier_offset2._UseLocation = p_Location('musicxml.xsd', 1574, 2)

    bezier_offset2 = property(__bezier_offset2.value, __bezier_offset2.set, None, None)


    # Attribute bezier-x uses Python identifier bezier_x
    __bezier_x = p_AttributeUse(p_ExpandedName(None, 'bezier-x'), 'bezier_x', '__AbsentNamespace0_tied_bezier_x', _module_typeBindings.tenths)
    __bezier_x._DeclarationLocation = p_Location('musicxml.xsd', 1575, 2)
    __bezier_x._UseLocation = p_Location('musicxml.xsd', 1575, 2)

    bezier_x = property(__bezier_x.value, __bezier_x.set, None, None)


    # Attribute bezier-y uses Python identifier bezier_y
    __bezier_y = p_AttributeUse(p_ExpandedName(None, 'bezier-y'), 'bezier_y', '__AbsentNamespace0_tied_bezier_y', _module_typeBindings.tenths)
    __bezier_y._DeclarationLocation = p_Location('musicxml.xsd', 1576, 2)
    __bezier_y._UseLocation = p_Location('musicxml.xsd', 1576, 2)

    bezier_y = property(__bezier_y.value, __bezier_y.set, None, None)


    # Attribute bezier-x2 uses Python identifier bezier_x2
    __bezier_x2 = p_AttributeUse(p_ExpandedName(None, 'bezier-x2'), 'bezier_x2', '__AbsentNamespace0_tied_bezier_x2', _module_typeBindings.tenths)
    __bezier_x2._DeclarationLocation = p_Location('musicxml.xsd', 1577, 2)
    __bezier_x2._UseLocation = p_Location('musicxml.xsd', 1577, 2)

    bezier_x2 = property(__bezier_x2.value, __bezier_x2.set, None, None)


    # Attribute bezier-y2 uses Python identifier bezier_y2
    __bezier_y2 = p_AttributeUse(p_ExpandedName(None, 'bezier-y2'), 'bezier_y2', '__AbsentNamespace0_tied_bezier_y2', _module_typeBindings.tenths)
    __bezier_y2._DeclarationLocation = p_Location('musicxml.xsd', 1578, 2)
    __bezier_y2._UseLocation = p_Location('musicxml.xsd', 1578, 2)

    bezier_y2 = property(__bezier_y2.value, __bezier_y2.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_tied_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_tied_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_tied_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_tied_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute orientation uses Python identifier orientation
    __orientation = p_AttributeUse(p_ExpandedName(None, 'orientation'), 'orientation', '__AbsentNamespace0_tied_orientation', _module_typeBindings.over_under)
    __orientation._DeclarationLocation = p_Location('musicxml.xsd', 1691, 2)
    __orientation._UseLocation = p_Location('musicxml.xsd', 1691, 2)

    orientation = property(__orientation.value, __orientation.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_tied_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_tied_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_tied_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_tied_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_tied_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_tied_type', _module_typeBindings.start_stop_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4603, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 4603, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_tied_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4604, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4604, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __bezier_offset.name() : __bezier_offset,
        __bezier_offset2.name() : __bezier_offset2,
        __bezier_x.name() : __bezier_x,
        __bezier_y.name() : __bezier_y,
        __bezier_x2.name() : __bezier_x2,
        __bezier_y2.name() : __bezier_y2,
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __line_type.name() : __line_type,
        __orientation.name() : __orientation,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.tied = tied
Namespace.addCategoryObject('typeBinding', 'tied', tied)


# Complex type tuplet with content type ELEMENT_ONLY
class tuplet (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tuplet')
    _XSDLocation = p_Location('musicxml.xsd', 4661, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element tuplet-actual uses Python identifier tuplet_actual
    __tuplet_actual = p_ElementDeclaration(p_ExpandedName(None, 'tuplet-actual'), 'tuplet_actual', '__AbsentNamespace0_tuplet_tuplet_actual', False, p_Location('musicxml.xsd', 4670, 3), )


    tuplet_actual = property(__tuplet_actual.value, __tuplet_actual.set, None, 'The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.')


    # Element tuplet-normal uses Python identifier tuplet_normal
    __tuplet_normal = p_ElementDeclaration(p_ExpandedName(None, 'tuplet-normal'), 'tuplet_normal', '__AbsentNamespace0_tuplet_tuplet_normal', False, p_Location('musicxml.xsd', 4675, 3), )


    tuplet_normal = property(__tuplet_normal.value, __tuplet_normal.set, None, 'The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.')


    # Attribute line-shape uses Python identifier line_shape
    __line_shape = p_AttributeUse(p_ExpandedName(None, 'line-shape'), 'line_shape', '__AbsentNamespace0_tuplet_line_shape', _module_typeBindings.line_shape)
    __line_shape._DeclarationLocation = p_Location('musicxml.xsd', 1677, 2)
    __line_shape._UseLocation = p_Location('musicxml.xsd', 1677, 2)

    line_shape = property(__line_shape.value, __line_shape.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_tuplet_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_tuplet_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_tuplet_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_tuplet_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_tuplet_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_tuplet_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4681, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 4681, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_tuplet_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4682, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4682, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute bracket uses Python identifier bracket
    __bracket = p_AttributeUse(p_ExpandedName(None, 'bracket'), 'bracket', '__AbsentNamespace0_tuplet_bracket', _module_typeBindings.yes_no)
    __bracket._DeclarationLocation = p_Location('musicxml.xsd', 4683, 2)
    __bracket._UseLocation = p_Location('musicxml.xsd', 4683, 2)

    bracket = property(__bracket.value, __bracket.set, None, None)


    # Attribute show-number uses Python identifier show_number
    __show_number = p_AttributeUse(p_ExpandedName(None, 'show-number'), 'show_number', '__AbsentNamespace0_tuplet_show_number', _module_typeBindings.show_tuplet)
    __show_number._DeclarationLocation = p_Location('musicxml.xsd', 4684, 2)
    __show_number._UseLocation = p_Location('musicxml.xsd', 4684, 2)

    show_number = property(__show_number.value, __show_number.set, None, None)


    # Attribute show-type uses Python identifier show_type
    __show_type = p_AttributeUse(p_ExpandedName(None, 'show-type'), 'show_type', '__AbsentNamespace0_tuplet_show_type', _module_typeBindings.show_tuplet)
    __show_type._DeclarationLocation = p_Location('musicxml.xsd', 4685, 2)
    __show_type._UseLocation = p_Location('musicxml.xsd', 4685, 2)

    show_type = property(__show_type.value, __show_type.set, None, None)

    _ElementMap.update({
        __tuplet_actual.name() : __tuplet_actual,
        __tuplet_normal.name() : __tuplet_normal
    })
    _AttributeMap.update({
        __line_shape.name() : __line_shape,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __bracket.name() : __bracket,
        __show_number.name() : __show_number,
        __show_type.name() : __show_type
    })
_module_typeBindings.tuplet = tuplet
Namespace.addCategoryObject('typeBinding', 'tuplet', tuplet)


# Complex type group-barline with content type SIMPLE
class group_barline (p_complexTypeDefinition):
    _TypeDefinition = group_barline_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'group-barline')
    _XSDLocation = p_Location('musicxml.xsd', 4797, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is group_barline_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_group_barline_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color
    })
_module_typeBindings.group_barline = group_barline
Namespace.addCategoryObject('typeBinding', 'group-barline', group_barline)


# Complex type group-symbol with content type SIMPLE
class group_symbol (p_complexTypeDefinition):
    _TypeDefinition = group_symbol_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'group-symbol')
    _XSDLocation = p_Location('musicxml.xsd', 4819, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is group_symbol_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_group_symbol_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_group_symbol_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_group_symbol_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_group_symbol_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_group_symbol_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.group_symbol = group_symbol
Namespace.addCategoryObject('typeBinding', 'group-symbol', group_symbol)


# Complex type opus with content type EMPTY
class opus (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'opus')
    _XSDLocation = p_Location('musicxml.xsd', 4849, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute {http://www.w3.org/1999/xlink}href uses Python identifier href
    __href = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'href'), 'href', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkhref', pyxb.binding.datatypes.anyURI, required=True)
    __href._DeclarationLocation = p_Location('xlink.xsd', 20, 1)
    __href._UseLocation = p_Location('musicxml.xsd', 1926, 2)

    href = property(__href.value, __href.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'type'), 'type', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinktype', _ImportedBinding__xlink.STD_ANON, fixed=True, unicode_default='simple')
    __type._DeclarationLocation = p_Location('xlink.xsd', 22, 1)
    __type._UseLocation = p_Location('musicxml.xsd', 1927, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}role uses Python identifier role
    __role = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'role'), 'role', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkrole', p_token)
    __role._DeclarationLocation = p_Location('xlink.xsd', 30, 1)
    __role._UseLocation = p_Location('musicxml.xsd', 1928, 2)

    role = property(__role.value, __role.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}title uses Python identifier title
    __title = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'title'), 'title', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinktitle', p_token)
    __title._DeclarationLocation = p_Location('xlink.xsd', 32, 1)
    __title._UseLocation = p_Location('musicxml.xsd', 1929, 2)

    title = property(__title.value, __title.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}show uses Python identifier show
    __show = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'show'), 'show', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkshow', _ImportedBinding__xlink.STD_ANON_, unicode_default='replace')
    __show._DeclarationLocation = p_Location('xlink.xsd', 34, 1)
    __show._UseLocation = p_Location('musicxml.xsd', 1930, 2)

    show = property(__show.value, __show.set, None, None)


    # Attribute {http://www.w3.org/1999/xlink}actuate uses Python identifier actuate
    __actuate = p_AttributeUse(p_ExpandedName(_Namespace_xlink, 'actuate'), 'actuate', '__AbsentNamespace0_opus_httpwww_w3_org1999xlinkactuate', _ImportedBinding__xlink.STD_ANON_2, unicode_default='onRequest')
    __actuate._DeclarationLocation = p_Location('xlink.xsd', 46, 1)
    __actuate._UseLocation = p_Location('musicxml.xsd', 1931, 2)

    actuate = property(__actuate.value, __actuate.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __href.name() : __href,
        __type.name() : __type,
        __role.name() : __role,
        __title.name() : __title,
        __show.name() : __show,
        __actuate.name() : __actuate
    })
_module_typeBindings.opus = opus
Namespace.addCategoryObject('typeBinding', 'opus', opus)


# Complex type part-group with content type ELEMENT_ONLY
class part_group (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'part-group')
    _XSDLocation = p_Location('musicxml.xsd', 4856, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element group-name uses Python identifier group_name
    __group_name = p_ElementDeclaration(p_ExpandedName(None, 'group-name'), 'group_name', '__AbsentNamespace0_part_group_group_name', False, p_Location('musicxml.xsd', 4865, 3), )


    group_name = property(__group_name.value, __group_name.set, None, None)


    # Element group-name-display uses Python identifier group_name_display
    __group_name_display = p_ElementDeclaration(p_ExpandedName(None, 'group-name-display'), 'group_name_display', '__AbsentNamespace0_part_group_group_name_display', False, p_Location('musicxml.xsd', 4866, 3), )


    group_name_display = property(__group_name_display.value, __group_name_display.set, None, 'Formatting specified in the group-name-display element overrides formatting specified in the group-name element.')


    # Element group-abbreviation uses Python identifier group_abbreviation
    __group_abbreviation = p_ElementDeclaration(p_ExpandedName(None, 'group-abbreviation'), 'group_abbreviation', '__AbsentNamespace0_part_group_group_abbreviation', False, p_Location('musicxml.xsd', 4871, 3), )


    group_abbreviation = property(__group_abbreviation.value, __group_abbreviation.set, None, None)


    # Element group-abbreviation-display uses Python identifier group_abbreviation_display
    __group_abbreviation_display = p_ElementDeclaration(p_ExpandedName(None, 'group-abbreviation-display'), 'group_abbreviation_display', '__AbsentNamespace0_part_group_group_abbreviation_display', False, p_Location('musicxml.xsd', 4872, 3), )


    group_abbreviation_display = property(__group_abbreviation_display.value, __group_abbreviation_display.set, None, 'Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element.')


    # Element group-symbol uses Python identifier group_symbol
    __group_symbol = p_ElementDeclaration(p_ExpandedName(None, 'group-symbol'), 'group_symbol', '__AbsentNamespace0_part_group_group_symbol', False, p_Location('musicxml.xsd', 4877, 3), )


    group_symbol = property(__group_symbol.value, __group_symbol.set, None, None)


    # Element group-barline uses Python identifier group_barline
    __group_barline = p_ElementDeclaration(p_ExpandedName(None, 'group-barline'), 'group_barline', '__AbsentNamespace0_part_group_group_barline', False, p_Location('musicxml.xsd', 4878, 3), )


    group_barline = property(__group_barline.value, __group_barline.set, None, None)


    # Element group-time uses Python identifier group_time
    __group_time = p_ElementDeclaration(p_ExpandedName(None, 'group-time'), 'group_time', '__AbsentNamespace0_part_group_group_time', False, p_Location('musicxml.xsd', 4879, 3), )


    group_time = property(__group_time.value, __group_time.set, None, 'The group-time element indicates that the displayed time signatures should stretch across all parts and staves in the group.')


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_part_group_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_part_group_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_part_group_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4886, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 4886, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_part_group_number', p_token, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4887, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4887, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __group_name.name() : __group_name,
        __group_name_display.name() : __group_name_display,
        __group_abbreviation.name() : __group_abbreviation,
        __group_abbreviation_display.name() : __group_abbreviation_display,
        __group_symbol.name() : __group_symbol,
        __group_barline.name() : __group_barline,
        __group_time.name() : __group_time,
        __footnote.name() : __footnote,
        __level.name() : __level
    })
    _AttributeMap.update({
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.part_group = part_group
Namespace.addCategoryObject('typeBinding', 'part-group', part_group)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 5389, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element note uses Python identifier note
    __note = p_ElementDeclaration(p_ExpandedName(None, 'note'), 'note', '__AbsentNamespace0_CTD_ANON_4_note', True, p_Location('musicxml.xsd', 5311, 4), )


    note = property(__note.value, __note.set, None, None)


    # Element backup uses Python identifier backup
    __backup = p_ElementDeclaration(p_ExpandedName(None, 'backup'), 'backup', '__AbsentNamespace0_CTD_ANON_4_backup', True, p_Location('musicxml.xsd', 5312, 4), )


    backup = property(__backup.value, __backup.set, None, None)


    # Element forward uses Python identifier forward
    __forward = p_ElementDeclaration(p_ExpandedName(None, 'forward'), 'forward', '__AbsentNamespace0_CTD_ANON_4_forward', True, p_Location('musicxml.xsd', 5313, 4), )


    forward = property(__forward.value, __forward.set, None, None)


    # Element direction uses Python identifier direction
    __direction = p_ElementDeclaration(p_ExpandedName(None, 'direction'), 'direction', '__AbsentNamespace0_CTD_ANON_4_direction', True, p_Location('musicxml.xsd', 5314, 4), )


    direction = property(__direction.value, __direction.set, None, None)


    # Element attributes uses Python identifier attributes
    __attributes = p_ElementDeclaration(p_ExpandedName(None, 'attributes'), 'attributes', '__AbsentNamespace0_CTD_ANON_4_attributes', True, p_Location('musicxml.xsd', 5315, 4), )


    attributes = property(__attributes.value, __attributes.set, None, None)


    # Element harmony uses Python identifier harmony
    __harmony = p_ElementDeclaration(p_ExpandedName(None, 'harmony'), 'harmony', '__AbsentNamespace0_CTD_ANON_4_harmony', True, p_Location('musicxml.xsd', 5316, 4), )


    harmony = property(__harmony.value, __harmony.set, None, None)


    # Element figured-bass uses Python identifier figured_bass
    __figured_bass = p_ElementDeclaration(p_ExpandedName(None, 'figured-bass'), 'figured_bass', '__AbsentNamespace0_CTD_ANON_4_figured_bass', True, p_Location('musicxml.xsd', 5317, 4), )


    figured_bass = property(__figured_bass.value, __figured_bass.set, None, None)


    # Element print uses Python identifier print_
    __print = p_ElementDeclaration(p_ExpandedName(None, 'print'), 'print_', '__AbsentNamespace0_CTD_ANON_4_print', True, p_Location('musicxml.xsd', 5318, 4), )


    print_ = property(__print.value, __print.set, None, None)


    # Element sound uses Python identifier sound
    __sound = p_ElementDeclaration(p_ExpandedName(None, 'sound'), 'sound', '__AbsentNamespace0_CTD_ANON_4_sound', True, p_Location('musicxml.xsd', 5319, 4), )


    sound = property(__sound.value, __sound.set, None, None)


    # Element barline uses Python identifier barline
    __barline = p_ElementDeclaration(p_ExpandedName(None, 'barline'), 'barline', '__AbsentNamespace0_CTD_ANON_4_barline', True, p_Location('musicxml.xsd', 5320, 4), )


    barline = property(__barline.value, __barline.set, None, None)


    # Element grouping uses Python identifier grouping
    __grouping = p_ElementDeclaration(p_ExpandedName(None, 'grouping'), 'grouping', '__AbsentNamespace0_CTD_ANON_4_grouping', True, p_Location('musicxml.xsd', 5321, 4), )


    grouping = property(__grouping.value, __grouping.set, None, None)


    # Element link uses Python identifier link
    __link = p_ElementDeclaration(p_ExpandedName(None, 'link'), 'link', '__AbsentNamespace0_CTD_ANON_4_link', True, p_Location('musicxml.xsd', 5322, 4), )


    link = property(__link.value, __link.set, None, None)


    # Element bookmark uses Python identifier bookmark
    __bookmark = p_ElementDeclaration(p_ExpandedName(None, 'bookmark'), 'bookmark', '__AbsentNamespace0_CTD_ANON_4_bookmark', True, p_Location('musicxml.xsd', 5323, 4), )


    bookmark = property(__bookmark.value, __bookmark.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_CTD_ANON_4_number', p_token, required=True)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 1956, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 1956, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute implicit uses Python identifier implicit
    __implicit = p_AttributeUse(p_ExpandedName(None, 'implicit'), 'implicit', '__AbsentNamespace0_CTD_ANON_4_implicit', _module_typeBindings.yes_no)
    __implicit._DeclarationLocation = p_Location('musicxml.xsd', 1957, 2)
    __implicit._UseLocation = p_Location('musicxml.xsd', 1957, 2)

    implicit = property(__implicit.value, __implicit.set, None, None)


    # Attribute non-controlling uses Python identifier non_controlling
    __non_controlling = p_AttributeUse(p_ExpandedName(None, 'non-controlling'), 'non_controlling', '__AbsentNamespace0_CTD_ANON_4_non_controlling', _module_typeBindings.yes_no)
    __non_controlling._DeclarationLocation = p_Location('musicxml.xsd', 1958, 2)
    __non_controlling._UseLocation = p_Location('musicxml.xsd', 1958, 2)

    non_controlling = property(__non_controlling.value, __non_controlling.set, None, None)


    # Attribute width uses Python identifier width
    __width = p_AttributeUse(p_ExpandedName(None, 'width'), 'width', '__AbsentNamespace0_CTD_ANON_4_width', _module_typeBindings.tenths)
    __width._DeclarationLocation = p_Location('musicxml.xsd', 1959, 2)
    __width._UseLocation = p_Location('musicxml.xsd', 1959, 2)

    width = property(__width.value, __width.set, None, None)

    _ElementMap.update({
        __note.name() : __note,
        __backup.name() : __backup,
        __forward.name() : __forward,
        __direction.name() : __direction,
        __attributes.name() : __attributes,
        __harmony.name() : __harmony,
        __figured_bass.name() : __figured_bass,
        __print.name() : __print,
        __sound.name() : __sound,
        __barline.name() : __barline,
        __grouping.name() : __grouping,
        __link.name() : __link,
        __bookmark.name() : __bookmark
    })
    _AttributeMap.update({
        __number.name() : __number,
        __implicit.name() : __implicit,
        __non_controlling.name() : __non_controlling,
        __width.name() : __width
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 5411, 5)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element part uses Python identifier part
    __part = p_ElementDeclaration(p_ExpandedName(None, 'part'), 'part', '__AbsentNamespace0_CTD_ANON_5_part', True, p_Location('musicxml.xsd', 5413, 7), )


    part = property(__part.value, __part.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_CTD_ANON_5_number', p_token, required=True)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 1956, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 1956, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute implicit uses Python identifier implicit
    __implicit = p_AttributeUse(p_ExpandedName(None, 'implicit'), 'implicit', '__AbsentNamespace0_CTD_ANON_5_implicit', _module_typeBindings.yes_no)
    __implicit._DeclarationLocation = p_Location('musicxml.xsd', 1957, 2)
    __implicit._UseLocation = p_Location('musicxml.xsd', 1957, 2)

    implicit = property(__implicit.value, __implicit.set, None, None)


    # Attribute non-controlling uses Python identifier non_controlling
    __non_controlling = p_AttributeUse(p_ExpandedName(None, 'non-controlling'), 'non_controlling', '__AbsentNamespace0_CTD_ANON_5_non_controlling', _module_typeBindings.yes_no)
    __non_controlling._DeclarationLocation = p_Location('musicxml.xsd', 1958, 2)
    __non_controlling._UseLocation = p_Location('musicxml.xsd', 1958, 2)

    non_controlling = property(__non_controlling.value, __non_controlling.set, None, None)


    # Attribute width uses Python identifier width
    __width = p_AttributeUse(p_ExpandedName(None, 'width'), 'width', '__AbsentNamespace0_CTD_ANON_5_width', _module_typeBindings.tenths)
    __width._DeclarationLocation = p_Location('musicxml.xsd', 1959, 2)
    __width._UseLocation = p_Location('musicxml.xsd', 1959, 2)

    width = property(__width.value, __width.set, None, None)

    _ElementMap.update({
        __part.name() : __part
    })
    _AttributeMap.update({
        __number.name() : __number,
        __implicit.name() : __implicit,
        __non_controlling.name() : __non_controlling,
        __width.name() : __width
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type accidental-text with content type SIMPLE
class accidental_text (p_complexTypeDefinition):
    _TypeDefinition = accidental_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'accidental-text')
    _XSDLocation = p_Location('musicxml.xsd', 1980, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is accidental_value

    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_accidental_text_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = p_Location('musicxml.xsd', 1810, 2)

    lang = property(__lang.value, __lang.set, None, None)


    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__AbsentNamespace0_accidental_text_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space)
    __space._DeclarationLocation = None
    __space._UseLocation = p_Location('musicxml.xsd', 1811, 2)

    space = property(__space.value, __space.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_accidental_text_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute enclosure uses Python identifier enclosure
    __enclosure = p_AttributeUse(p_ExpandedName(None, 'enclosure'), 'enclosure', '__AbsentNamespace0_accidental_text_enclosure', _module_typeBindings.enclosure_shape)
    __enclosure._DeclarationLocation = p_Location('musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = p_Location('musicxml.xsd', 1616, 2)

    enclosure = property(__enclosure.value, __enclosure.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_accidental_text_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_accidental_text_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_accidental_text_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_accidental_text_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_accidental_text_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute justify uses Python identifier justify
    __justify = p_AttributeUse(p_ExpandedName(None, 'justify'), 'justify', '__AbsentNamespace0_accidental_text_justify', _module_typeBindings.left_center_right)
    __justify._DeclarationLocation = p_Location('musicxml.xsd', 1647, 2)
    __justify._UseLocation = p_Location('musicxml.xsd', 1647, 2)

    justify = property(__justify.value, __justify.set, None, None)


    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = p_AttributeUse(p_ExpandedName(None, 'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_accidental_text_letter_spacing', _module_typeBindings.number_or_normal)
    __letter_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = p_Location('musicxml.xsd', 1654, 2)

    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)


    # Attribute line-height uses Python identifier line_height
    __line_height = p_AttributeUse(p_ExpandedName(None, 'line-height'), 'line_height', '__AbsentNamespace0_accidental_text_line_height', _module_typeBindings.number_or_normal)
    __line_height._DeclarationLocation = p_Location('musicxml.xsd', 1670, 2)
    __line_height._UseLocation = p_Location('musicxml.xsd', 1670, 2)

    line_height = property(__line_height.value, __line_height.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_accidental_text_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_accidental_text_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_accidental_text_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_accidental_text_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute underline uses Python identifier underline
    __underline = p_AttributeUse(p_ExpandedName(None, 'underline'), 'underline', '__AbsentNamespace0_accidental_text_underline', _module_typeBindings.number_of_lines)
    __underline._DeclarationLocation = p_Location('musicxml.xsd', 1788, 2)
    __underline._UseLocation = p_Location('musicxml.xsd', 1788, 2)

    underline = property(__underline.value, __underline.set, None, None)


    # Attribute overline uses Python identifier overline
    __overline = p_AttributeUse(p_ExpandedName(None, 'overline'), 'overline', '__AbsentNamespace0_accidental_text_overline', _module_typeBindings.number_of_lines)
    __overline._DeclarationLocation = p_Location('musicxml.xsd', 1789, 2)
    __overline._UseLocation = p_Location('musicxml.xsd', 1789, 2)

    overline = property(__overline.value, __overline.set, None, None)


    # Attribute line-through uses Python identifier line_through
    __line_through = p_AttributeUse(p_ExpandedName(None, 'line-through'), 'line_through', '__AbsentNamespace0_accidental_text_line_through', _module_typeBindings.number_of_lines)
    __line_through._DeclarationLocation = p_Location('musicxml.xsd', 1790, 2)
    __line_through._UseLocation = p_Location('musicxml.xsd', 1790, 2)

    line_through = property(__line_through.value, __line_through.set, None, None)


    # Attribute dir uses Python identifier dir
    __dir = p_AttributeUse(p_ExpandedName(None, 'dir'), 'dir', '__AbsentNamespace0_accidental_text_dir', _module_typeBindings.text_direction)
    __dir._DeclarationLocation = p_Location('musicxml.xsd', 1797, 2)
    __dir._UseLocation = p_Location('musicxml.xsd', 1797, 2)

    dir = property(__dir.value, __dir.set, None, None)


    # Attribute rotation uses Python identifier rotation
    __rotation = p_AttributeUse(p_ExpandedName(None, 'rotation'), 'rotation', '__AbsentNamespace0_accidental_text_rotation', _module_typeBindings.rotation_degrees)
    __rotation._DeclarationLocation = p_Location('musicxml.xsd', 1820, 2)
    __rotation._UseLocation = p_Location('musicxml.xsd', 1820, 2)

    rotation = property(__rotation.value, __rotation.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_accidental_text_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __space.name() : __space,
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __justify.name() : __justify,
        __letter_spacing.name() : __letter_spacing,
        __line_height.name() : __line_height,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation,
        __valign.name() : __valign
    })
_module_typeBindings.accidental_text = accidental_text
Namespace.addCategoryObject('typeBinding', 'accidental-text', accidental_text)


# Complex type dynamics with content type ELEMENT_ONLY
class dynamics (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'dynamics')
    _XSDLocation = p_Location('musicxml.xsd', 1991, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element p uses Python identifier p
    __p = p_ElementDeclaration(p_ExpandedName(None, 'p'), 'p', '__AbsentNamespace0_dynamics_p', True, p_Location('musicxml.xsd', 1998, 3), )


    p = property(__p.value, __p.set, None, None)


    # Element pp uses Python identifier pp
    __pp = p_ElementDeclaration(p_ExpandedName(None, 'pp'), 'pp', '__AbsentNamespace0_dynamics_pp', True, p_Location('musicxml.xsd', 1999, 3), )


    pp = property(__pp.value, __pp.set, None, None)


    # Element ppp uses Python identifier ppp
    __ppp = p_ElementDeclaration(p_ExpandedName(None, 'ppp'), 'ppp', '__AbsentNamespace0_dynamics_ppp', True, p_Location('musicxml.xsd', 2000, 3), )


    ppp = property(__ppp.value, __ppp.set, None, None)


    # Element pppp uses Python identifier pppp
    __pppp = p_ElementDeclaration(p_ExpandedName(None, 'pppp'), 'pppp', '__AbsentNamespace0_dynamics_pppp', True, p_Location('musicxml.xsd', 2001, 3), )


    pppp = property(__pppp.value, __pppp.set, None, None)


    # Element ppppp uses Python identifier ppppp
    __ppppp = p_ElementDeclaration(p_ExpandedName(None, 'ppppp'), 'ppppp', '__AbsentNamespace0_dynamics_ppppp', True, p_Location('musicxml.xsd', 2002, 3), )


    ppppp = property(__ppppp.value, __ppppp.set, None, None)


    # Element pppppp uses Python identifier pppppp
    __pppppp = p_ElementDeclaration(p_ExpandedName(None, 'pppppp'), 'pppppp', '__AbsentNamespace0_dynamics_pppppp', True, p_Location('musicxml.xsd', 2003, 3), )


    pppppp = property(__pppppp.value, __pppppp.set, None, None)


    # Element f uses Python identifier f
    __f = p_ElementDeclaration(p_ExpandedName(None, 'f'), 'f', '__AbsentNamespace0_dynamics_f', True, p_Location('musicxml.xsd', 2004, 3), )


    f = property(__f.value, __f.set, None, None)


    # Element ff uses Python identifier ff
    __ff = p_ElementDeclaration(p_ExpandedName(None, 'ff'), 'ff', '__AbsentNamespace0_dynamics_ff', True, p_Location('musicxml.xsd', 2005, 3), )


    ff = property(__ff.value, __ff.set, None, None)


    # Element fff uses Python identifier fff
    __fff = p_ElementDeclaration(p_ExpandedName(None, 'fff'), 'fff', '__AbsentNamespace0_dynamics_fff', True, p_Location('musicxml.xsd', 2006, 3), )


    fff = property(__fff.value, __fff.set, None, None)


    # Element ffff uses Python identifier ffff
    __ffff = p_ElementDeclaration(p_ExpandedName(None, 'ffff'), 'ffff', '__AbsentNamespace0_dynamics_ffff', True, p_Location('musicxml.xsd', 2007, 3), )


    ffff = property(__ffff.value, __ffff.set, None, None)


    # Element fffff uses Python identifier fffff
    __fffff = p_ElementDeclaration(p_ExpandedName(None, 'fffff'), 'fffff', '__AbsentNamespace0_dynamics_fffff', True, p_Location('musicxml.xsd', 2008, 3), )


    fffff = property(__fffff.value, __fffff.set, None, None)


    # Element ffffff uses Python identifier ffffff
    __ffffff = p_ElementDeclaration(p_ExpandedName(None, 'ffffff'), 'ffffff', '__AbsentNamespace0_dynamics_ffffff', True, p_Location('musicxml.xsd', 2009, 3), )


    ffffff = property(__ffffff.value, __ffffff.set, None, None)


    # Element mp uses Python identifier mp
    __mp = p_ElementDeclaration(p_ExpandedName(None, 'mp'), 'mp', '__AbsentNamespace0_dynamics_mp', True, p_Location('musicxml.xsd', 2010, 3), )


    mp = property(__mp.value, __mp.set, None, None)


    # Element mf uses Python identifier mf
    __mf = p_ElementDeclaration(p_ExpandedName(None, 'mf'), 'mf', '__AbsentNamespace0_dynamics_mf', True, p_Location('musicxml.xsd', 2011, 3), )


    mf = property(__mf.value, __mf.set, None, None)


    # Element sf uses Python identifier sf
    __sf = p_ElementDeclaration(p_ExpandedName(None, 'sf'), 'sf', '__AbsentNamespace0_dynamics_sf', True, p_Location('musicxml.xsd', 2012, 3), )


    sf = property(__sf.value, __sf.set, None, None)


    # Element sfp uses Python identifier sfp
    __sfp = p_ElementDeclaration(p_ExpandedName(None, 'sfp'), 'sfp', '__AbsentNamespace0_dynamics_sfp', True, p_Location('musicxml.xsd', 2013, 3), )


    sfp = property(__sfp.value, __sfp.set, None, None)


    # Element sfpp uses Python identifier sfpp
    __sfpp = p_ElementDeclaration(p_ExpandedName(None, 'sfpp'), 'sfpp', '__AbsentNamespace0_dynamics_sfpp', True, p_Location('musicxml.xsd', 2014, 3), )


    sfpp = property(__sfpp.value, __sfpp.set, None, None)


    # Element fp uses Python identifier fp
    __fp = p_ElementDeclaration(p_ExpandedName(None, 'fp'), 'fp', '__AbsentNamespace0_dynamics_fp', True, p_Location('musicxml.xsd', 2015, 3), )


    fp = property(__fp.value, __fp.set, None, None)


    # Element rf uses Python identifier rf
    __rf = p_ElementDeclaration(p_ExpandedName(None, 'rf'), 'rf', '__AbsentNamespace0_dynamics_rf', True, p_Location('musicxml.xsd', 2016, 3), )


    rf = property(__rf.value, __rf.set, None, None)


    # Element rfz uses Python identifier rfz
    __rfz = p_ElementDeclaration(p_ExpandedName(None, 'rfz'), 'rfz', '__AbsentNamespace0_dynamics_rfz', True, p_Location('musicxml.xsd', 2017, 3), )


    rfz = property(__rfz.value, __rfz.set, None, None)


    # Element sfz uses Python identifier sfz
    __sfz = p_ElementDeclaration(p_ExpandedName(None, 'sfz'), 'sfz', '__AbsentNamespace0_dynamics_sfz', True, p_Location('musicxml.xsd', 2018, 3), )


    sfz = property(__sfz.value, __sfz.set, None, None)


    # Element sffz uses Python identifier sffz
    __sffz = p_ElementDeclaration(p_ExpandedName(None, 'sffz'), 'sffz', '__AbsentNamespace0_dynamics_sffz', True, p_Location('musicxml.xsd', 2019, 3), )


    sffz = property(__sffz.value, __sffz.set, None, None)


    # Element fz uses Python identifier fz
    __fz = p_ElementDeclaration(p_ExpandedName(None, 'fz'), 'fz', '__AbsentNamespace0_dynamics_fz', True, p_Location('musicxml.xsd', 2020, 3), )


    fz = property(__fz.value, __fz.set, None, None)


    # Element other-dynamics uses Python identifier other_dynamics
    __other_dynamics = p_ElementDeclaration(p_ExpandedName(None, 'other-dynamics'), 'other_dynamics', '__AbsentNamespace0_dynamics_other_dynamics', True, p_Location('musicxml.xsd', 2021, 3), )


    other_dynamics = property(__other_dynamics.value, __other_dynamics.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_dynamics_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute enclosure uses Python identifier enclosure
    __enclosure = p_AttributeUse(p_ExpandedName(None, 'enclosure'), 'enclosure', '__AbsentNamespace0_dynamics_enclosure', _module_typeBindings.enclosure_shape)
    __enclosure._DeclarationLocation = p_Location('musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = p_Location('musicxml.xsd', 1616, 2)

    enclosure = property(__enclosure.value, __enclosure.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_dynamics_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_dynamics_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_dynamics_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_dynamics_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_dynamics_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_dynamics_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_dynamics_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_dynamics_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_dynamics_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_dynamics_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute underline uses Python identifier underline
    __underline = p_AttributeUse(p_ExpandedName(None, 'underline'), 'underline', '__AbsentNamespace0_dynamics_underline', _module_typeBindings.number_of_lines)
    __underline._DeclarationLocation = p_Location('musicxml.xsd', 1788, 2)
    __underline._UseLocation = p_Location('musicxml.xsd', 1788, 2)

    underline = property(__underline.value, __underline.set, None, None)


    # Attribute overline uses Python identifier overline
    __overline = p_AttributeUse(p_ExpandedName(None, 'overline'), 'overline', '__AbsentNamespace0_dynamics_overline', _module_typeBindings.number_of_lines)
    __overline._DeclarationLocation = p_Location('musicxml.xsd', 1789, 2)
    __overline._UseLocation = p_Location('musicxml.xsd', 1789, 2)

    overline = property(__overline.value, __overline.set, None, None)


    # Attribute line-through uses Python identifier line_through
    __line_through = p_AttributeUse(p_ExpandedName(None, 'line-through'), 'line_through', '__AbsentNamespace0_dynamics_line_through', _module_typeBindings.number_of_lines)
    __line_through._DeclarationLocation = p_Location('musicxml.xsd', 1790, 2)
    __line_through._UseLocation = p_Location('musicxml.xsd', 1790, 2)

    line_through = property(__line_through.value, __line_through.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_dynamics_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __p.name() : __p,
        __pp.name() : __pp,
        __ppp.name() : __ppp,
        __pppp.name() : __pppp,
        __ppppp.name() : __ppppp,
        __pppppp.name() : __pppppp,
        __f.name() : __f,
        __ff.name() : __ff,
        __fff.name() : __fff,
        __ffff.name() : __ffff,
        __fffff.name() : __fffff,
        __ffffff.name() : __ffffff,
        __mp.name() : __mp,
        __mf.name() : __mf,
        __sf.name() : __sf,
        __sfp.name() : __sfp,
        __sfpp.name() : __sfpp,
        __fp.name() : __fp,
        __rf.name() : __rf,
        __rfz.name() : __rfz,
        __sfz.name() : __sfz,
        __sffz.name() : __sffz,
        __fz.name() : __fz,
        __other_dynamics.name() : __other_dynamics
    })
    _AttributeMap.update({
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __valign.name() : __valign
    })
_module_typeBindings.dynamics = dynamics
Namespace.addCategoryObject('typeBinding', 'dynamics', dynamics)


# Complex type empty-placement with content type EMPTY
class empty_placement (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-placement')
    _XSDLocation = p_Location('musicxml.xsd', 2035, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_empty_placement_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_placement_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_placement_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_placement_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_placement_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_empty_placement_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_empty_placement_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_empty_placement_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_empty_placement_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_empty_placement_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.empty_placement = empty_placement
Namespace.addCategoryObject('typeBinding', 'empty-placement', empty_placement)


# Complex type empty-print-style with content type EMPTY
class empty_print_style (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-print-style')
    _XSDLocation = p_Location('musicxml.xsd', 2043, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_empty_print_style_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_print_style_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_print_style_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_print_style_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_print_style_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_empty_print_style_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_empty_print_style_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_empty_print_style_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_empty_print_style_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.empty_print_style = empty_print_style
Namespace.addCategoryObject('typeBinding', 'empty-print-style', empty_print_style)


# Complex type empty-print-style-align with content type EMPTY
class empty_print_style_align (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-print-style-align')
    _XSDLocation = p_Location('musicxml.xsd', 2050, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_empty_print_style_align_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_print_style_align_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_print_style_align_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_print_style_align_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_print_style_align_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_empty_print_style_align_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_empty_print_style_align_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_empty_print_style_align_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_empty_print_style_align_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_empty_print_style_align_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_empty_print_style_align_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
_module_typeBindings.empty_print_style_align = empty_print_style_align
Namespace.addCategoryObject('typeBinding', 'empty-print-style-align', empty_print_style_align)


# Complex type empty-print-object-style-align with content type EMPTY
class empty_print_object_style_align (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-print-object-style-align')
    _XSDLocation = p_Location('musicxml.xsd', 2057, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_empty_print_object_style_align_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_print_object_style_align_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_print_object_style_align_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_print_object_style_align_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_print_object_style_align_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_empty_print_object_style_align_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_empty_print_object_style_align_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_empty_print_object_style_align_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_empty_print_object_style_align_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_empty_print_object_style_align_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_empty_print_object_style_align_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_empty_print_object_style_align_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __valign.name() : __valign
    })
_module_typeBindings.empty_print_object_style_align = empty_print_object_style_align
Namespace.addCategoryObject('typeBinding', 'empty-print-object-style-align', empty_print_object_style_align)


# Complex type empty-trill-sound with content type EMPTY
class empty_trill_sound (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-trill-sound')
    _XSDLocation = p_Location('musicxml.xsd', 2065, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_empty_trill_sound_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_trill_sound_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_trill_sound_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_trill_sound_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_trill_sound_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_empty_trill_sound_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_empty_trill_sound_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_empty_trill_sound_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_empty_trill_sound_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_empty_trill_sound_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute start-note uses Python identifier start_note
    __start_note = p_AttributeUse(p_ExpandedName(None, 'start-note'), 'start_note', '__AbsentNamespace0_empty_trill_sound_start_note', _module_typeBindings.start_note)
    __start_note._DeclarationLocation = p_Location('musicxml.xsd', 1842, 2)
    __start_note._UseLocation = p_Location('musicxml.xsd', 1842, 2)

    start_note = property(__start_note.value, __start_note.set, None, None)


    # Attribute trill-step uses Python identifier trill_step
    __trill_step = p_AttributeUse(p_ExpandedName(None, 'trill-step'), 'trill_step', '__AbsentNamespace0_empty_trill_sound_trill_step', _module_typeBindings.trill_step)
    __trill_step._DeclarationLocation = p_Location('musicxml.xsd', 1843, 2)
    __trill_step._UseLocation = p_Location('musicxml.xsd', 1843, 2)

    trill_step = property(__trill_step.value, __trill_step.set, None, None)


    # Attribute two-note-turn uses Python identifier two_note_turn
    __two_note_turn = p_AttributeUse(p_ExpandedName(None, 'two-note-turn'), 'two_note_turn', '__AbsentNamespace0_empty_trill_sound_two_note_turn', _module_typeBindings.two_note_turn)
    __two_note_turn._DeclarationLocation = p_Location('musicxml.xsd', 1844, 2)
    __two_note_turn._UseLocation = p_Location('musicxml.xsd', 1844, 2)

    two_note_turn = property(__two_note_turn.value, __two_note_turn.set, None, None)


    # Attribute accelerate uses Python identifier accelerate
    __accelerate = p_AttributeUse(p_ExpandedName(None, 'accelerate'), 'accelerate', '__AbsentNamespace0_empty_trill_sound_accelerate', _module_typeBindings.yes_no)
    __accelerate._DeclarationLocation = p_Location('musicxml.xsd', 1845, 2)
    __accelerate._UseLocation = p_Location('musicxml.xsd', 1845, 2)

    accelerate = property(__accelerate.value, __accelerate.set, None, None)


    # Attribute beats uses Python identifier beats
    __beats = p_AttributeUse(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_empty_trill_sound_beats', _module_typeBindings.trill_beats)
    __beats._DeclarationLocation = p_Location('musicxml.xsd', 1846, 2)
    __beats._UseLocation = p_Location('musicxml.xsd', 1846, 2)

    beats = property(__beats.value, __beats.set, None, None)


    # Attribute second-beat uses Python identifier second_beat
    __second_beat = p_AttributeUse(p_ExpandedName(None, 'second-beat'), 'second_beat', '__AbsentNamespace0_empty_trill_sound_second_beat', _module_typeBindings.percent)
    __second_beat._DeclarationLocation = p_Location('musicxml.xsd', 1847, 2)
    __second_beat._UseLocation = p_Location('musicxml.xsd', 1847, 2)

    second_beat = property(__second_beat.value, __second_beat.set, None, None)


    # Attribute last-beat uses Python identifier last_beat
    __last_beat = p_AttributeUse(p_ExpandedName(None, 'last-beat'), 'last_beat', '__AbsentNamespace0_empty_trill_sound_last_beat', _module_typeBindings.percent)
    __last_beat._DeclarationLocation = p_Location('musicxml.xsd', 1848, 2)
    __last_beat._UseLocation = p_Location('musicxml.xsd', 1848, 2)

    last_beat = property(__last_beat.value, __last_beat.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __start_note.name() : __start_note,
        __trill_step.name() : __trill_step,
        __two_note_turn.name() : __two_note_turn,
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __second_beat.name() : __second_beat,
        __last_beat.name() : __last_beat
    })
_module_typeBindings.empty_trill_sound = empty_trill_sound
Namespace.addCategoryObject('typeBinding', 'empty-trill-sound', empty_trill_sound)


# Complex type horizontal-turn with content type EMPTY
class horizontal_turn (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'horizontal-turn')
    _XSDLocation = p_Location('musicxml.xsd', 2074, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_horizontal_turn_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_horizontal_turn_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_horizontal_turn_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_horizontal_turn_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_horizontal_turn_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_horizontal_turn_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_horizontal_turn_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_horizontal_turn_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_horizontal_turn_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_horizontal_turn_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute start-note uses Python identifier start_note
    __start_note = p_AttributeUse(p_ExpandedName(None, 'start-note'), 'start_note', '__AbsentNamespace0_horizontal_turn_start_note', _module_typeBindings.start_note)
    __start_note._DeclarationLocation = p_Location('musicxml.xsd', 1842, 2)
    __start_note._UseLocation = p_Location('musicxml.xsd', 1842, 2)

    start_note = property(__start_note.value, __start_note.set, None, None)


    # Attribute trill-step uses Python identifier trill_step
    __trill_step = p_AttributeUse(p_ExpandedName(None, 'trill-step'), 'trill_step', '__AbsentNamespace0_horizontal_turn_trill_step', _module_typeBindings.trill_step)
    __trill_step._DeclarationLocation = p_Location('musicxml.xsd', 1843, 2)
    __trill_step._UseLocation = p_Location('musicxml.xsd', 1843, 2)

    trill_step = property(__trill_step.value, __trill_step.set, None, None)


    # Attribute two-note-turn uses Python identifier two_note_turn
    __two_note_turn = p_AttributeUse(p_ExpandedName(None, 'two-note-turn'), 'two_note_turn', '__AbsentNamespace0_horizontal_turn_two_note_turn', _module_typeBindings.two_note_turn)
    __two_note_turn._DeclarationLocation = p_Location('musicxml.xsd', 1844, 2)
    __two_note_turn._UseLocation = p_Location('musicxml.xsd', 1844, 2)

    two_note_turn = property(__two_note_turn.value, __two_note_turn.set, None, None)


    # Attribute accelerate uses Python identifier accelerate
    __accelerate = p_AttributeUse(p_ExpandedName(None, 'accelerate'), 'accelerate', '__AbsentNamespace0_horizontal_turn_accelerate', _module_typeBindings.yes_no)
    __accelerate._DeclarationLocation = p_Location('musicxml.xsd', 1845, 2)
    __accelerate._UseLocation = p_Location('musicxml.xsd', 1845, 2)

    accelerate = property(__accelerate.value, __accelerate.set, None, None)


    # Attribute beats uses Python identifier beats
    __beats = p_AttributeUse(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_horizontal_turn_beats', _module_typeBindings.trill_beats)
    __beats._DeclarationLocation = p_Location('musicxml.xsd', 1846, 2)
    __beats._UseLocation = p_Location('musicxml.xsd', 1846, 2)

    beats = property(__beats.value, __beats.set, None, None)


    # Attribute second-beat uses Python identifier second_beat
    __second_beat = p_AttributeUse(p_ExpandedName(None, 'second-beat'), 'second_beat', '__AbsentNamespace0_horizontal_turn_second_beat', _module_typeBindings.percent)
    __second_beat._DeclarationLocation = p_Location('musicxml.xsd', 1847, 2)
    __second_beat._UseLocation = p_Location('musicxml.xsd', 1847, 2)

    second_beat = property(__second_beat.value, __second_beat.set, None, None)


    # Attribute last-beat uses Python identifier last_beat
    __last_beat = p_AttributeUse(p_ExpandedName(None, 'last-beat'), 'last_beat', '__AbsentNamespace0_horizontal_turn_last_beat', _module_typeBindings.percent)
    __last_beat._DeclarationLocation = p_Location('musicxml.xsd', 1848, 2)
    __last_beat._UseLocation = p_Location('musicxml.xsd', 1848, 2)

    last_beat = property(__last_beat.value, __last_beat.set, None, None)


    # Attribute slash uses Python identifier slash
    __slash = p_AttributeUse(p_ExpandedName(None, 'slash'), 'slash', '__AbsentNamespace0_horizontal_turn_slash', _module_typeBindings.yes_no)
    __slash._DeclarationLocation = p_Location('musicxml.xsd', 2081, 2)
    __slash._UseLocation = p_Location('musicxml.xsd', 2081, 2)

    slash = property(__slash.value, __slash.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __start_note.name() : __start_note,
        __trill_step.name() : __trill_step,
        __two_note_turn.name() : __two_note_turn,
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __second_beat.name() : __second_beat,
        __last_beat.name() : __last_beat,
        __slash.name() : __slash
    })
_module_typeBindings.horizontal_turn = horizontal_turn
Namespace.addCategoryObject('typeBinding', 'horizontal-turn', horizontal_turn)


# Complex type fermata with content type SIMPLE
class fermata (p_complexTypeDefinition):
    _TypeDefinition = fermata_shape
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'fermata')
    _XSDLocation = p_Location('musicxml.xsd', 2084, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is fermata_shape

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_fermata_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_fermata_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_fermata_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_fermata_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_fermata_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_fermata_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_fermata_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_fermata_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_fermata_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_fermata_type', _module_typeBindings.upright_inverted)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2090, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 2090, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type
    })
_module_typeBindings.fermata = fermata
Namespace.addCategoryObject('typeBinding', 'fermata', fermata)


# Complex type fingering with content type SIMPLE
class fingering (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'fingering')
    _XSDLocation = p_Location('musicxml.xsd', 2096, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_fingering_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_fingering_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_fingering_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_fingering_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_fingering_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_fingering_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_fingering_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_fingering_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_fingering_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_fingering_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute substitution uses Python identifier substitution
    __substitution = p_AttributeUse(p_ExpandedName(None, 'substitution'), 'substitution', '__AbsentNamespace0_fingering_substitution', _module_typeBindings.yes_no)
    __substitution._DeclarationLocation = p_Location('musicxml.xsd', 2102, 4)
    __substitution._UseLocation = p_Location('musicxml.xsd', 2102, 4)

    substitution = property(__substitution.value, __substitution.set, None, None)


    # Attribute alternate uses Python identifier alternate
    __alternate = p_AttributeUse(p_ExpandedName(None, 'alternate'), 'alternate', '__AbsentNamespace0_fingering_alternate', _module_typeBindings.yes_no)
    __alternate._DeclarationLocation = p_Location('musicxml.xsd', 2103, 4)
    __alternate._UseLocation = p_Location('musicxml.xsd', 2103, 4)

    alternate = property(__alternate.value, __alternate.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __substitution.name() : __substitution,
        __alternate.name() : __alternate
    })
_module_typeBindings.fingering = fingering
Namespace.addCategoryObject('typeBinding', 'fingering', fingering)


# Complex type formatted-text with content type SIMPLE
class formatted_text (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'formatted-text')
    _XSDLocation = p_Location('musicxml.xsd', 2110, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_formatted_text_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = p_Location('musicxml.xsd', 1810, 2)

    lang = property(__lang.value, __lang.set, None, None)


    # Attribute {http://www.w3.org/XML/1998/namespace}space uses Python identifier space
    __space = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'space'), 'space', '__AbsentNamespace0_formatted_text_httpwww_w3_orgXML1998namespacespace', pyxb.binding.xml_.STD_ANON_space)
    __space._DeclarationLocation = None
    __space._UseLocation = p_Location('musicxml.xsd', 1811, 2)

    space = property(__space.value, __space.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_formatted_text_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute enclosure uses Python identifier enclosure
    __enclosure = p_AttributeUse(p_ExpandedName(None, 'enclosure'), 'enclosure', '__AbsentNamespace0_formatted_text_enclosure', _module_typeBindings.enclosure_shape)
    __enclosure._DeclarationLocation = p_Location('musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = p_Location('musicxml.xsd', 1616, 2)

    enclosure = property(__enclosure.value, __enclosure.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_formatted_text_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_formatted_text_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_formatted_text_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_formatted_text_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_formatted_text_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute justify uses Python identifier justify
    __justify = p_AttributeUse(p_ExpandedName(None, 'justify'), 'justify', '__AbsentNamespace0_formatted_text_justify', _module_typeBindings.left_center_right)
    __justify._DeclarationLocation = p_Location('musicxml.xsd', 1647, 2)
    __justify._UseLocation = p_Location('musicxml.xsd', 1647, 2)

    justify = property(__justify.value, __justify.set, None, None)


    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = p_AttributeUse(p_ExpandedName(None, 'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_formatted_text_letter_spacing', _module_typeBindings.number_or_normal)
    __letter_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = p_Location('musicxml.xsd', 1654, 2)

    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)


    # Attribute line-height uses Python identifier line_height
    __line_height = p_AttributeUse(p_ExpandedName(None, 'line-height'), 'line_height', '__AbsentNamespace0_formatted_text_line_height', _module_typeBindings.number_or_normal)
    __line_height._DeclarationLocation = p_Location('musicxml.xsd', 1670, 2)
    __line_height._UseLocation = p_Location('musicxml.xsd', 1670, 2)

    line_height = property(__line_height.value, __line_height.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_formatted_text_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_formatted_text_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_formatted_text_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_formatted_text_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute underline uses Python identifier underline
    __underline = p_AttributeUse(p_ExpandedName(None, 'underline'), 'underline', '__AbsentNamespace0_formatted_text_underline', _module_typeBindings.number_of_lines)
    __underline._DeclarationLocation = p_Location('musicxml.xsd', 1788, 2)
    __underline._UseLocation = p_Location('musicxml.xsd', 1788, 2)

    underline = property(__underline.value, __underline.set, None, None)


    # Attribute overline uses Python identifier overline
    __overline = p_AttributeUse(p_ExpandedName(None, 'overline'), 'overline', '__AbsentNamespace0_formatted_text_overline', _module_typeBindings.number_of_lines)
    __overline._DeclarationLocation = p_Location('musicxml.xsd', 1789, 2)
    __overline._UseLocation = p_Location('musicxml.xsd', 1789, 2)

    overline = property(__overline.value, __overline.set, None, None)


    # Attribute line-through uses Python identifier line_through
    __line_through = p_AttributeUse(p_ExpandedName(None, 'line-through'), 'line_through', '__AbsentNamespace0_formatted_text_line_through', _module_typeBindings.number_of_lines)
    __line_through._DeclarationLocation = p_Location('musicxml.xsd', 1790, 2)
    __line_through._UseLocation = p_Location('musicxml.xsd', 1790, 2)

    line_through = property(__line_through.value, __line_through.set, None, None)


    # Attribute dir uses Python identifier dir
    __dir = p_AttributeUse(p_ExpandedName(None, 'dir'), 'dir', '__AbsentNamespace0_formatted_text_dir', _module_typeBindings.text_direction)
    __dir._DeclarationLocation = p_Location('musicxml.xsd', 1797, 2)
    __dir._UseLocation = p_Location('musicxml.xsd', 1797, 2)

    dir = property(__dir.value, __dir.set, None, None)


    # Attribute rotation uses Python identifier rotation
    __rotation = p_AttributeUse(p_ExpandedName(None, 'rotation'), 'rotation', '__AbsentNamespace0_formatted_text_rotation', _module_typeBindings.rotation_degrees)
    __rotation._DeclarationLocation = p_Location('musicxml.xsd', 1820, 2)
    __rotation._UseLocation = p_Location('musicxml.xsd', 1820, 2)

    rotation = property(__rotation.value, __rotation.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_formatted_text_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __space.name() : __space,
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __justify.name() : __justify,
        __letter_spacing.name() : __letter_spacing,
        __line_height.name() : __line_height,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation,
        __valign.name() : __valign
    })
_module_typeBindings.formatted_text = formatted_text
Namespace.addCategoryObject('typeBinding', 'formatted-text', formatted_text)


# Complex type fret with content type SIMPLE
class fret (p_complexTypeDefinition):
    _TypeDefinition = p_nonNegativeInteger
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'fret')
    _XSDLocation = p_Location('musicxml.xsd', 2121, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_nonNegativeInteger

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_fret_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_fret_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_fret_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_fret_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_fret_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
_module_typeBindings.fret = fret
Namespace.addCategoryObject('typeBinding', 'fret', fret)


# Complex type string with content type SIMPLE
class string (p_complexTypeDefinition):
    _TypeDefinition = string_number
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'string')
    _XSDLocation = p_Location('musicxml.xsd', 2249, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is string_number

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_string_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_string_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_string_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_string_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_string_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_string_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_string_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_string_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_string_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_string_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.string = string
Namespace.addCategoryObject('typeBinding', 'string', string)


# Complex type [anonymous] with content type SIMPLE
class CTD_ANON_6 (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = p_Location('musicxml.xsd', 2351, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_CTD_ANON_6_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = p_Location('musicxml.xsd', 2355, 7)

    lang = property(__lang.value, __lang.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_CTD_ANON_6_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_CTD_ANON_6_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_CTD_ANON_6_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_CTD_ANON_6_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_CTD_ANON_6_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_CTD_ANON_6_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_CTD_ANON_6_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_CTD_ANON_6_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_CTD_ANON_6_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.CTD_ANON_6 = CTD_ANON_6


# Complex type clef with content type ELEMENT_ONLY
class clef (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'clef')
    _XSDLocation = p_Location('musicxml.xsd', 2393, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element sign uses Python identifier sign
    __sign = p_ElementDeclaration(p_ExpandedName(None, 'sign'), 'sign', '__AbsentNamespace0_clef_sign', False, p_Location('musicxml.xsd', 2404, 3), )


    sign = property(__sign.value, __sign.set, None, 'The sign element represents the clef symbol.')


    # Element line uses Python identifier line
    __line = p_ElementDeclaration(p_ExpandedName(None, 'line'), 'line', '__AbsentNamespace0_clef_line', False, p_Location('musicxml.xsd', 2409, 3), )


    line = property(__line.value, __line.set, None, 'Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff).')


    # Element clef-octave-change uses Python identifier clef_octave_change
    __clef_octave_change = p_ElementDeclaration(p_ExpandedName(None, 'clef-octave-change'), 'clef_octave_change', '__AbsentNamespace0_clef_clef_octave_change', False, p_Location('musicxml.xsd', 2414, 3), )


    clef_octave_change = property(__clef_octave_change.value, __clef_octave_change.set, None, 'The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.')


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_clef_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_clef_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_clef_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_clef_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_clef_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_clef_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_clef_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_clef_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_clef_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_clef_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_clef_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2420, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2420, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute additional uses Python identifier additional
    __additional = p_AttributeUse(p_ExpandedName(None, 'additional'), 'additional', '__AbsentNamespace0_clef_additional', _module_typeBindings.yes_no)
    __additional._DeclarationLocation = p_Location('musicxml.xsd', 2421, 2)
    __additional._UseLocation = p_Location('musicxml.xsd', 2421, 2)

    additional = property(__additional.value, __additional.set, None, None)


    # Attribute size uses Python identifier size
    __size = p_AttributeUse(p_ExpandedName(None, 'size'), 'size', '__AbsentNamespace0_clef_size', _module_typeBindings.symbol_size)
    __size._DeclarationLocation = p_Location('musicxml.xsd', 2422, 2)
    __size._UseLocation = p_Location('musicxml.xsd', 2422, 2)

    size = property(__size.value, __size.set, None, None)


    # Attribute after-barline uses Python identifier after_barline
    __after_barline = p_AttributeUse(p_ExpandedName(None, 'after-barline'), 'after_barline', '__AbsentNamespace0_clef_after_barline', _module_typeBindings.yes_no)
    __after_barline._DeclarationLocation = p_Location('musicxml.xsd', 2423, 2)
    __after_barline._UseLocation = p_Location('musicxml.xsd', 2423, 2)

    after_barline = property(__after_barline.value, __after_barline.set, None, None)

    _ElementMap.update({
        __sign.name() : __sign,
        __line.name() : __line,
        __clef_octave_change.name() : __clef_octave_change
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number,
        __additional.name() : __additional,
        __size.name() : __size,
        __after_barline.name() : __after_barline
    })
_module_typeBindings.clef = clef
Namespace.addCategoryObject('typeBinding', 'clef', clef)


# Complex type key with content type ELEMENT_ONLY
class key (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'key')
    _XSDLocation = p_Location('musicxml.xsd', 2440, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element key-octave uses Python identifier key_octave
    __key_octave = p_ElementDeclaration(p_ExpandedName(None, 'key-octave'), 'key_octave', '__AbsentNamespace0_key_key_octave', True, p_Location('musicxml.xsd', 2449, 3), )


    key_octave = property(__key_octave.value, __key_octave.set, None, 'The optional list of key-octave elements is used to specify in which octave each element of the key signature appears.')


    # Element key-step uses Python identifier key_step
    __key_step = p_ElementDeclaration(p_ExpandedName(None, 'key-step'), 'key_step', '__AbsentNamespace0_key_key_step', True, p_Location('musicxml.xsd', 5119, 3), )


    key_step = property(__key_step.value, __key_step.set, None, 'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.')


    # Element key-alter uses Python identifier key_alter
    __key_alter = p_ElementDeclaration(p_ExpandedName(None, 'key-alter'), 'key_alter', '__AbsentNamespace0_key_key_alter', True, p_Location('musicxml.xsd', 5124, 3), )


    key_alter = property(__key_alter.value, __key_alter.set, None, 'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.')


    # Element key-accidental uses Python identifier key_accidental
    __key_accidental = p_ElementDeclaration(p_ExpandedName(None, 'key-accidental'), 'key_accidental', '__AbsentNamespace0_key_key_accidental', True, p_Location('musicxml.xsd', 5129, 3), )


    key_accidental = property(__key_accidental.value, __key_accidental.set, None, 'Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.')


    # Element cancel uses Python identifier cancel
    __cancel = p_ElementDeclaration(p_ExpandedName(None, 'cancel'), 'cancel', '__AbsentNamespace0_key_cancel', False, p_Location('musicxml.xsd', 5178, 3), )


    cancel = property(__cancel.value, __cancel.set, None, None)


    # Element fifths uses Python identifier fifths
    __fifths = p_ElementDeclaration(p_ExpandedName(None, 'fifths'), 'fifths', '__AbsentNamespace0_key_fifths', False, p_Location('musicxml.xsd', 5179, 3), )


    fifths = property(__fifths.value, __fifths.set, None, None)


    # Element mode uses Python identifier mode
    __mode = p_ElementDeclaration(p_ExpandedName(None, 'mode'), 'mode', '__AbsentNamespace0_key_mode', False, p_Location('musicxml.xsd', 5180, 3), )


    mode = property(__mode.value, __mode.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_key_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_key_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_key_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_key_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_key_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_key_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_key_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_key_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_key_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_key_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_key_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2455, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2455, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __key_octave.name() : __key_octave,
        __key_step.name() : __key_step,
        __key_alter.name() : __key_alter,
        __key_accidental.name() : __key_accidental,
        __cancel.name() : __cancel,
        __fifths.name() : __fifths,
        __mode.name() : __mode
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number
    })
_module_typeBindings.key = key
Namespace.addCategoryObject('typeBinding', 'key', key)


# Complex type measure-repeat with content type SIMPLE
class measure_repeat (p_complexTypeDefinition):
    _TypeDefinition = positive_integer_or_empty
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'measure-repeat')
    _XSDLocation = p_Location('musicxml.xsd', 2472, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is positive_integer_or_empty

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_measure_repeat_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2480, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 2480, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute slashes uses Python identifier slashes
    __slashes = p_AttributeUse(p_ExpandedName(None, 'slashes'), 'slashes', '__AbsentNamespace0_measure_repeat_slashes', p_positiveInteger)
    __slashes._DeclarationLocation = p_Location('musicxml.xsd', 2481, 4)
    __slashes._UseLocation = p_Location('musicxml.xsd', 2481, 4)

    slashes = property(__slashes.value, __slashes.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type,
        __slashes.name() : __slashes
    })
_module_typeBindings.measure_repeat = measure_repeat
Namespace.addCategoryObject('typeBinding', 'measure-repeat', measure_repeat)


# Complex type measure-style with content type ELEMENT_ONLY
class measure_style (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'measure-style')
    _XSDLocation = p_Location('musicxml.xsd', 2486, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element multiple-rest uses Python identifier multiple_rest
    __multiple_rest = p_ElementDeclaration(p_ExpandedName(None, 'multiple-rest'), 'multiple_rest', '__AbsentNamespace0_measure_style_multiple_rest', False, p_Location('musicxml.xsd', 2493, 3), )


    multiple_rest = property(__multiple_rest.value, __multiple_rest.set, None, None)


    # Element measure-repeat uses Python identifier measure_repeat
    __measure_repeat = p_ElementDeclaration(p_ExpandedName(None, 'measure-repeat'), 'measure_repeat', '__AbsentNamespace0_measure_style_measure_repeat', False, p_Location('musicxml.xsd', 2494, 3), )


    measure_repeat = property(__measure_repeat.value, __measure_repeat.set, None, None)


    # Element beat-repeat uses Python identifier beat_repeat
    __beat_repeat = p_ElementDeclaration(p_ExpandedName(None, 'beat-repeat'), 'beat_repeat', '__AbsentNamespace0_measure_style_beat_repeat', False, p_Location('musicxml.xsd', 2495, 3), )


    beat_repeat = property(__beat_repeat.value, __beat_repeat.set, None, None)


    # Element slash uses Python identifier slash
    __slash = p_ElementDeclaration(p_ExpandedName(None, 'slash'), 'slash', '__AbsentNamespace0_measure_style_slash', False, p_Location('musicxml.xsd', 2496, 3), )


    slash = property(__slash.value, __slash.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_measure_style_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_measure_style_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_measure_style_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_measure_style_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_measure_style_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_measure_style_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2498, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2498, 2)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({
        __multiple_rest.name() : __multiple_rest,
        __measure_repeat.name() : __measure_repeat,
        __beat_repeat.name() : __beat_repeat,
        __slash.name() : __slash
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __number.name() : __number
    })
_module_typeBindings.measure_style = measure_style
Namespace.addCategoryObject('typeBinding', 'measure-style', measure_style)


# Complex type multiple-rest with content type SIMPLE
class multiple_rest (p_complexTypeDefinition):
    _TypeDefinition = positive_integer_or_empty
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'multiple-rest')
    _XSDLocation = p_Location('musicxml.xsd', 2503, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is positive_integer_or_empty

    # Attribute use-symbols uses Python identifier use_symbols
    __use_symbols = p_AttributeUse(p_ExpandedName(None, 'use-symbols'), 'use_symbols', '__AbsentNamespace0_multiple_rest_use_symbols', _module_typeBindings.yes_no)
    __use_symbols._DeclarationLocation = p_Location('musicxml.xsd', 2509, 4)
    __use_symbols._UseLocation = p_Location('musicxml.xsd', 2509, 4)

    use_symbols = property(__use_symbols.value, __use_symbols.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __use_symbols.name() : __use_symbols
    })
_module_typeBindings.multiple_rest = multiple_rest
Namespace.addCategoryObject('typeBinding', 'multiple-rest', multiple_rest)


# Complex type time with content type ELEMENT_ONLY
class time (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'time')
    _XSDLocation = p_Location('musicxml.xsd', 2575, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element interchangeable uses Python identifier interchangeable
    __interchangeable = p_ElementDeclaration(p_ExpandedName(None, 'interchangeable'), 'interchangeable', '__AbsentNamespace0_time_interchangeable', False, p_Location('musicxml.xsd', 2584, 4), )


    interchangeable = property(__interchangeable.value, __interchangeable.set, None, None)


    # Element senza-misura uses Python identifier senza_misura
    __senza_misura = p_ElementDeclaration(p_ExpandedName(None, 'senza-misura'), 'senza_misura', '__AbsentNamespace0_time_senza_misura', False, p_Location('musicxml.xsd', 2586, 3), )


    senza_misura = property(__senza_misura.value, __senza_misura.set, None, "A senza-misura element explicitly indicates that no time signature is present. The optional element content indicates the symbol to be used, if any, such as an X. The time element's symbol attribute is not used when a senza-misura element is present.")


    # Element beats uses Python identifier beats
    __beats = p_ElementDeclaration(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_time_beats', True, p_Location('musicxml.xsd', 5160, 3), )


    beats = property(__beats.value, __beats.set, None, 'The beats element indicates the number of beats, as found in the numerator of a time signature.')


    # Element beat-type uses Python identifier beat_type
    __beat_type = p_ElementDeclaration(p_ExpandedName(None, 'beat-type'), 'beat_type', '__AbsentNamespace0_time_beat_type', True, p_Location('musicxml.xsd', 5165, 3), )


    beat_type = property(__beat_type.value, __beat_type.set, None, 'The beat-type element indicates the beat unit, as found in the denominator of a time signature.')


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_time_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_time_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_time_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_time_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_time_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_time_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_time_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_time_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_time_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_time_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_time_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_time_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_time_number', _module_typeBindings.staff_number)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2592, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 2592, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute symbol uses Python identifier symbol
    __symbol = p_AttributeUse(p_ExpandedName(None, 'symbol'), 'symbol', '__AbsentNamespace0_time_symbol', _module_typeBindings.time_symbol)
    __symbol._DeclarationLocation = p_Location('musicxml.xsd', 2593, 2)
    __symbol._UseLocation = p_Location('musicxml.xsd', 2593, 2)

    symbol = property(__symbol.value, __symbol.set, None, None)


    # Attribute separator uses Python identifier separator
    __separator = p_AttributeUse(p_ExpandedName(None, 'separator'), 'separator', '__AbsentNamespace0_time_separator', _module_typeBindings.time_separator)
    __separator._DeclarationLocation = p_Location('musicxml.xsd', 2594, 2)
    __separator._UseLocation = p_Location('musicxml.xsd', 2594, 2)

    separator = property(__separator.value, __separator.set, None, None)

    _ElementMap.update({
        __interchangeable.name() : __interchangeable,
        __senza_misura.name() : __senza_misura,
        __beats.name() : __beats,
        __beat_type.name() : __beat_type
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __valign.name() : __valign,
        __number.name() : __number,
        __symbol.name() : __symbol,
        __separator.name() : __separator
    })
_module_typeBindings.time = time
Namespace.addCategoryObject('typeBinding', 'time', time)


# Complex type ending with content type SIMPLE
class ending (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'ending')
    _XSDLocation = p_Location('musicxml.xsd', 2663, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_ending_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_ending_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_ending_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_ending_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_ending_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_ending_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_ending_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_ending_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_ending_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_ending_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_ending_number', _module_typeBindings.ending_number, required=True)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 2671, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 2671, 4)

    number = property(__number.value, __number.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_ending_type', _module_typeBindings.start_stop_discontinue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 2672, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 2672, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute end-length uses Python identifier end_length
    __end_length = p_AttributeUse(p_ExpandedName(None, 'end-length'), 'end_length', '__AbsentNamespace0_ending_end_length', _module_typeBindings.tenths)
    __end_length._DeclarationLocation = p_Location('musicxml.xsd', 2675, 4)
    __end_length._UseLocation = p_Location('musicxml.xsd', 2675, 4)

    end_length = property(__end_length.value, __end_length.set, None, None)


    # Attribute text-x uses Python identifier text_x
    __text_x = p_AttributeUse(p_ExpandedName(None, 'text-x'), 'text_x', '__AbsentNamespace0_ending_text_x', _module_typeBindings.tenths)
    __text_x._DeclarationLocation = p_Location('musicxml.xsd', 2676, 4)
    __text_x._UseLocation = p_Location('musicxml.xsd', 2676, 4)

    text_x = property(__text_x.value, __text_x.set, None, None)


    # Attribute text-y uses Python identifier text_y
    __text_y = p_AttributeUse(p_ExpandedName(None, 'text-y'), 'text_y', '__AbsentNamespace0_ending_text_y', _module_typeBindings.tenths)
    __text_y._DeclarationLocation = p_Location('musicxml.xsd', 2677, 4)
    __text_y._UseLocation = p_Location('musicxml.xsd', 2677, 4)

    text_y = property(__text_y.value, __text_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __number.name() : __number,
        __type.name() : __type,
        __end_length.name() : __end_length,
        __text_x.name() : __text_x,
        __text_y.name() : __text_y
    })
_module_typeBindings.ending = ending
Namespace.addCategoryObject('typeBinding', 'ending', ending)


# Complex type accordion-registration with content type ELEMENT_ONLY
class accordion_registration (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'accordion-registration')
    _XSDLocation = p_Location('musicxml.xsd', 2701, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element accordion-high uses Python identifier accordion_high
    __accordion_high = p_ElementDeclaration(p_ExpandedName(None, 'accordion-high'), 'accordion_high', '__AbsentNamespace0_accordion_registration_accordion_high', False, p_Location('musicxml.xsd', 2706, 3), )


    accordion_high = property(__accordion_high.value, __accordion_high.set, None, "The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol.")


    # Element accordion-middle uses Python identifier accordion_middle
    __accordion_middle = p_ElementDeclaration(p_ExpandedName(None, 'accordion-middle'), 'accordion_middle', '__AbsentNamespace0_accordion_registration_accordion_middle', False, p_Location('musicxml.xsd', 2711, 3), )


    accordion_middle = property(__accordion_middle.value, __accordion_middle.set, None, "The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol.")


    # Element accordion-low uses Python identifier accordion_low
    __accordion_low = p_ElementDeclaration(p_ExpandedName(None, 'accordion-low'), 'accordion_low', '__AbsentNamespace0_accordion_registration_accordion_low', False, p_Location('musicxml.xsd', 2716, 3), )


    accordion_low = property(__accordion_low.value, __accordion_low.set, None, "The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol.")


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_accordion_registration_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_accordion_registration_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_accordion_registration_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_accordion_registration_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_accordion_registration_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_accordion_registration_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_accordion_registration_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_accordion_registration_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_accordion_registration_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_accordion_registration_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_accordion_registration_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __accordion_high.name() : __accordion_high,
        __accordion_middle.name() : __accordion_middle,
        __accordion_low.name() : __accordion_low
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
_module_typeBindings.accordion_registration = accordion_registration
Namespace.addCategoryObject('typeBinding', 'accordion-registration', accordion_registration)


# Complex type bass-alter with content type SIMPLE
class bass_alter (p_complexTypeDefinition):
    _TypeDefinition = semitones
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bass-alter')
    _XSDLocation = p_Location('musicxml.xsd', 2743, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is semitones

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_bass_alter_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_bass_alter_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_bass_alter_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_bass_alter_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_bass_alter_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_bass_alter_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_bass_alter_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_bass_alter_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_bass_alter_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_bass_alter_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute location uses Python identifier location
    __location = p_AttributeUse(p_ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_bass_alter_location', _module_typeBindings.left_right)
    __location._DeclarationLocation = p_Location('musicxml.xsd', 2751, 4)
    __location._UseLocation = p_Location('musicxml.xsd', 2751, 4)

    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __location.name() : __location
    })
_module_typeBindings.bass_alter = bass_alter
Namespace.addCategoryObject('typeBinding', 'bass-alter', bass_alter)


# Complex type bass-step with content type SIMPLE
class bass_step (p_complexTypeDefinition):
    _TypeDefinition = step
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bass-step')
    _XSDLocation = p_Location('musicxml.xsd', 2756, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is step

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_bass_step_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_bass_step_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_bass_step_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_bass_step_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_bass_step_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_bass_step_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_bass_step_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_bass_step_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_bass_step_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute text uses Python identifier text
    __text = p_AttributeUse(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_bass_step_text', p_token)
    __text._DeclarationLocation = p_Location('musicxml.xsd', 2762, 4)
    __text._UseLocation = p_Location('musicxml.xsd', 2762, 4)

    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __text.name() : __text
    })
_module_typeBindings.bass_step = bass_step
Namespace.addCategoryObject('typeBinding', 'bass-step', bass_step)


# Complex type degree-alter with content type SIMPLE
class degree_alter (p_complexTypeDefinition):
    _TypeDefinition = semitones
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'degree-alter')
    _XSDLocation = p_Location('musicxml.xsd', 2818, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is semitones

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_degree_alter_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_degree_alter_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_degree_alter_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_degree_alter_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_degree_alter_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_degree_alter_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_degree_alter_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_degree_alter_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_degree_alter_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute plus-minus uses Python identifier plus_minus
    __plus_minus = p_AttributeUse(p_ExpandedName(None, 'plus-minus'), 'plus_minus', '__AbsentNamespace0_degree_alter_plus_minus', _module_typeBindings.yes_no)
    __plus_minus._DeclarationLocation = p_Location('musicxml.xsd', 2825, 4)
    __plus_minus._UseLocation = p_Location('musicxml.xsd', 2825, 4)

    plus_minus = property(__plus_minus.value, __plus_minus.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __plus_minus.name() : __plus_minus
    })
_module_typeBindings.degree_alter = degree_alter
Namespace.addCategoryObject('typeBinding', 'degree-alter', degree_alter)


# Complex type degree-type with content type SIMPLE
class degree_type (p_complexTypeDefinition):
    _TypeDefinition = degree_type_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'degree-type')
    _XSDLocation = p_Location('musicxml.xsd', 2830, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is degree_type_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_degree_type_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_degree_type_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_degree_type_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_degree_type_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_degree_type_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_degree_type_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_degree_type_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_degree_type_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_degree_type_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute text uses Python identifier text
    __text = p_AttributeUse(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_degree_type_text', p_token)
    __text._DeclarationLocation = p_Location('musicxml.xsd', 2836, 4)
    __text._UseLocation = p_Location('musicxml.xsd', 2836, 4)

    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __text.name() : __text
    })
_module_typeBindings.degree_type = degree_type
Namespace.addCategoryObject('typeBinding', 'degree-type', degree_type)


# Complex type degree-value with content type SIMPLE
class degree_value (p_complexTypeDefinition):
    _TypeDefinition = p_positiveInteger
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'degree-value')
    _XSDLocation = p_Location('musicxml.xsd', 2842, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_positiveInteger

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_degree_value_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_degree_value_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_degree_value_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_degree_value_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_degree_value_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_degree_value_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_degree_value_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_degree_value_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_degree_value_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute symbol uses Python identifier symbol
    __symbol = p_AttributeUse(p_ExpandedName(None, 'symbol'), 'symbol', '__AbsentNamespace0_degree_value_symbol', _module_typeBindings.degree_symbol_value)
    __symbol._DeclarationLocation = p_Location('musicxml.xsd', 2848, 4)
    __symbol._UseLocation = p_Location('musicxml.xsd', 2848, 4)

    symbol = property(__symbol.value, __symbol.set, None, None)


    # Attribute text uses Python identifier text
    __text = p_AttributeUse(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_degree_value_text', p_token)
    __text._DeclarationLocation = p_Location('musicxml.xsd', 2849, 4)
    __text._UseLocation = p_Location('musicxml.xsd', 2849, 4)

    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __symbol.name() : __symbol,
        __text.name() : __text
    })
_module_typeBindings.degree_value = degree_value
Namespace.addCategoryObject('typeBinding', 'degree-value', degree_value)


# Complex type harmony with content type ELEMENT_ONLY
class harmony (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'harmony')
    _XSDLocation = p_Location('musicxml.xsd', 3006, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element frame uses Python identifier frame
    __frame = p_ElementDeclaration(p_ExpandedName(None, 'frame'), 'frame', '__AbsentNamespace0_harmony_frame', False, p_Location('musicxml.xsd', 3016, 3), )


    frame = property(__frame.value, __frame.set, None, None)


    # Element offset uses Python identifier offset
    __offset = p_ElementDeclaration(p_ExpandedName(None, 'offset'), 'offset', '__AbsentNamespace0_harmony_offset', False, p_Location('musicxml.xsd', 3017, 3), )


    offset = property(__offset.value, __offset.set, None, None)


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_harmony_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_harmony_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Element staff uses Python identifier staff
    __staff = p_ElementDeclaration(p_ExpandedName(None, 'staff'), 'staff', '__AbsentNamespace0_harmony_staff', False, p_Location('musicxml.xsd', 5072, 3), )


    staff = property(__staff.value, __staff.set, None, 'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')


    # Element root uses Python identifier root
    __root = p_ElementDeclaration(p_ExpandedName(None, 'root'), 'root', '__AbsentNamespace0_harmony_root', True, p_Location('musicxml.xsd', 5212, 4), )


    root = property(__root.value, __root.set, None, None)


    # Element function uses Python identifier function
    __function = p_ElementDeclaration(p_ExpandedName(None, 'function'), 'function', '__AbsentNamespace0_harmony_function', True, p_Location('musicxml.xsd', 5213, 4), )


    function = property(__function.value, __function.set, None, 'The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding.')


    # Element kind uses Python identifier kind
    __kind = p_ElementDeclaration(p_ExpandedName(None, 'kind'), 'kind', '__AbsentNamespace0_harmony_kind', True, p_Location('musicxml.xsd', 5219, 3), )


    kind = property(__kind.value, __kind.set, None, None)


    # Element inversion uses Python identifier inversion
    __inversion = p_ElementDeclaration(p_ExpandedName(None, 'inversion'), 'inversion', '__AbsentNamespace0_harmony_inversion', True, p_Location('musicxml.xsd', 5220, 3), )


    inversion = property(__inversion.value, __inversion.set, None, None)


    # Element bass uses Python identifier bass
    __bass = p_ElementDeclaration(p_ExpandedName(None, 'bass'), 'bass', '__AbsentNamespace0_harmony_bass', True, p_Location('musicxml.xsd', 5221, 3), )


    bass = property(__bass.value, __bass.set, None, None)


    # Element degree uses Python identifier degree
    __degree = p_ElementDeclaration(p_ExpandedName(None, 'degree'), 'degree', '__AbsentNamespace0_harmony_degree', True, p_Location('musicxml.xsd', 5222, 3), )


    degree = property(__degree.value, __degree.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_harmony_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_harmony_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_harmony_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_harmony_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_harmony_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_harmony_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_harmony_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_harmony_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_harmony_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_harmony_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_harmony_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_harmony_type', _module_typeBindings.harmony_type)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3021, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3021, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute print-frame uses Python identifier print_frame
    __print_frame = p_AttributeUse(p_ExpandedName(None, 'print-frame'), 'print_frame', '__AbsentNamespace0_harmony_print_frame', _module_typeBindings.yes_no)
    __print_frame._DeclarationLocation = p_Location('musicxml.xsd', 3023, 2)
    __print_frame._UseLocation = p_Location('musicxml.xsd', 3023, 2)

    print_frame = property(__print_frame.value, __print_frame.set, None, None)

    _ElementMap.update({
        __frame.name() : __frame,
        __offset.name() : __offset,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __root.name() : __root,
        __function.name() : __function,
        __kind.name() : __kind,
        __inversion.name() : __inversion,
        __bass.name() : __bass,
        __degree.name() : __degree
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __type.name() : __type,
        __print_frame.name() : __print_frame
    })
_module_typeBindings.harmony = harmony
Namespace.addCategoryObject('typeBinding', 'harmony', harmony)


# Complex type harp-pedals with content type ELEMENT_ONLY
class harp_pedals (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'harp-pedals')
    _XSDLocation = p_Location('musicxml.xsd', 3028, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element pedal-tuning uses Python identifier pedal_tuning
    __pedal_tuning = p_ElementDeclaration(p_ExpandedName(None, 'pedal-tuning'), 'pedal_tuning', '__AbsentNamespace0_harp_pedals_pedal_tuning', True, p_Location('musicxml.xsd', 3033, 3), )


    pedal_tuning = property(__pedal_tuning.value, __pedal_tuning.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_harp_pedals_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_harp_pedals_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_harp_pedals_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_harp_pedals_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_harp_pedals_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_harp_pedals_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_harp_pedals_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_harp_pedals_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_harp_pedals_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_harp_pedals_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_harp_pedals_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __pedal_tuning.name() : __pedal_tuning
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
_module_typeBindings.harp_pedals = harp_pedals
Namespace.addCategoryObject('typeBinding', 'harp-pedals', harp_pedals)


# Complex type inversion with content type SIMPLE
class inversion (p_complexTypeDefinition):
    _TypeDefinition = p_nonNegativeInteger
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'inversion')
    _XSDLocation = p_Location('musicxml.xsd', 3045, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_nonNegativeInteger

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_inversion_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_inversion_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_inversion_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_inversion_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_inversion_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_inversion_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_inversion_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_inversion_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_inversion_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.inversion = inversion
Namespace.addCategoryObject('typeBinding', 'inversion', inversion)


# Complex type kind with content type SIMPLE
class kind (p_complexTypeDefinition):
    _TypeDefinition = kind_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'kind')
    _XSDLocation = p_Location('musicxml.xsd', 3056, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is kind_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_kind_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_kind_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_kind_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_kind_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_kind_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_kind_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_kind_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_kind_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_kind_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_kind_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_kind_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute use-symbols uses Python identifier use_symbols
    __use_symbols = p_AttributeUse(p_ExpandedName(None, 'use-symbols'), 'use_symbols', '__AbsentNamespace0_kind_use_symbols', _module_typeBindings.yes_no)
    __use_symbols._DeclarationLocation = p_Location('musicxml.xsd', 3076, 4)
    __use_symbols._UseLocation = p_Location('musicxml.xsd', 3076, 4)

    use_symbols = property(__use_symbols.value, __use_symbols.set, None, None)


    # Attribute text uses Python identifier text
    __text = p_AttributeUse(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_kind_text', p_token)
    __text._DeclarationLocation = p_Location('musicxml.xsd', 3077, 4)
    __text._UseLocation = p_Location('musicxml.xsd', 3077, 4)

    text = property(__text.value, __text.set, None, None)


    # Attribute stack-degrees uses Python identifier stack_degrees
    __stack_degrees = p_AttributeUse(p_ExpandedName(None, 'stack-degrees'), 'stack_degrees', '__AbsentNamespace0_kind_stack_degrees', _module_typeBindings.yes_no)
    __stack_degrees._DeclarationLocation = p_Location('musicxml.xsd', 3078, 4)
    __stack_degrees._UseLocation = p_Location('musicxml.xsd', 3078, 4)

    stack_degrees = property(__stack_degrees.value, __stack_degrees.set, None, None)


    # Attribute parentheses-degrees uses Python identifier parentheses_degrees
    __parentheses_degrees = p_AttributeUse(p_ExpandedName(None, 'parentheses-degrees'), 'parentheses_degrees', '__AbsentNamespace0_kind_parentheses_degrees', _module_typeBindings.yes_no)
    __parentheses_degrees._DeclarationLocation = p_Location('musicxml.xsd', 3079, 4)
    __parentheses_degrees._UseLocation = p_Location('musicxml.xsd', 3079, 4)

    parentheses_degrees = property(__parentheses_degrees.value, __parentheses_degrees.set, None, None)


    # Attribute bracket-degrees uses Python identifier bracket_degrees
    __bracket_degrees = p_AttributeUse(p_ExpandedName(None, 'bracket-degrees'), 'bracket_degrees', '__AbsentNamespace0_kind_bracket_degrees', _module_typeBindings.yes_no)
    __bracket_degrees._DeclarationLocation = p_Location('musicxml.xsd', 3080, 4)
    __bracket_degrees._UseLocation = p_Location('musicxml.xsd', 3080, 4)

    bracket_degrees = property(__bracket_degrees.value, __bracket_degrees.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __use_symbols.name() : __use_symbols,
        __text.name() : __text,
        __stack_degrees.name() : __stack_degrees,
        __parentheses_degrees.name() : __parentheses_degrees,
        __bracket_degrees.name() : __bracket_degrees
    })
_module_typeBindings.kind = kind
Namespace.addCategoryObject('typeBinding', 'kind', kind)


# Complex type measure-numbering with content type SIMPLE
class measure_numbering (p_complexTypeDefinition):
    _TypeDefinition = measure_numbering_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'measure-numbering')
    _XSDLocation = p_Location('musicxml.xsd', 3088, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is measure_numbering_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_measure_numbering_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_measure_numbering_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_measure_numbering_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_measure_numbering_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_measure_numbering_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_measure_numbering_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_measure_numbering_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_measure_numbering_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_measure_numbering_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_measure_numbering_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_measure_numbering_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
_module_typeBindings.measure_numbering = measure_numbering
Namespace.addCategoryObject('typeBinding', 'measure-numbering', measure_numbering)


# Complex type metronome with content type ELEMENT_ONLY
class metronome (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'metronome')
    _XSDLocation = p_Location('musicxml.xsd', 3099, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element per-minute uses Python identifier per_minute
    __per_minute = p_ElementDeclaration(p_ExpandedName(None, 'per-minute'), 'per_minute', '__AbsentNamespace0_metronome_per_minute', False, p_Location('musicxml.xsd', 3107, 5), )


    per_minute = property(__per_minute.value, __per_minute.set, None, None)


    # Element metronome-note uses Python identifier metronome_note
    __metronome_note = p_ElementDeclaration(p_ExpandedName(None, 'metronome-note'), 'metronome_note', '__AbsentNamespace0_metronome_metronome_note', True, p_Location('musicxml.xsd', 3112, 4), )


    metronome_note = property(__metronome_note.value, __metronome_note.set, None, None)


    # Element metronome-relation uses Python identifier metronome_relation
    __metronome_relation = p_ElementDeclaration(p_ExpandedName(None, 'metronome-relation'), 'metronome_relation', '__AbsentNamespace0_metronome_metronome_relation', False, p_Location('musicxml.xsd', 3114, 5), )


    metronome_relation = property(__metronome_relation.value, __metronome_relation.set, None, 'The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.')


    # Element beat-unit uses Python identifier beat_unit
    __beat_unit = p_ElementDeclaration(p_ExpandedName(None, 'beat-unit'), 'beat_unit', '__AbsentNamespace0_metronome_beat_unit', True, p_Location('musicxml.xsd', 5191, 3), )


    beat_unit = property(__beat_unit.value, __beat_unit.set, None, 'The beat-unit element indicates the graphical note type to use in a metronome mark.')


    # Element beat-unit-dot uses Python identifier beat_unit_dot
    __beat_unit_dot = p_ElementDeclaration(p_ExpandedName(None, 'beat-unit-dot'), 'beat_unit_dot', '__AbsentNamespace0_metronome_beat_unit_dot', True, p_Location('musicxml.xsd', 5196, 3), )


    beat_unit_dot = property(__beat_unit_dot.value, __beat_unit_dot.set, None, 'The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.')


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_metronome_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_metronome_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_metronome_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_metronome_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_metronome_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_metronome_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute justify uses Python identifier justify
    __justify = p_AttributeUse(p_ExpandedName(None, 'justify'), 'justify', '__AbsentNamespace0_metronome_justify', _module_typeBindings.left_center_right)
    __justify._DeclarationLocation = p_Location('musicxml.xsd', 1647, 2)
    __justify._UseLocation = p_Location('musicxml.xsd', 1647, 2)

    justify = property(__justify.value, __justify.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_metronome_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_metronome_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_metronome_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_metronome_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_metronome_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute parentheses uses Python identifier parentheses
    __parentheses = p_AttributeUse(p_ExpandedName(None, 'parentheses'), 'parentheses', '__AbsentNamespace0_metronome_parentheses', _module_typeBindings.yes_no)
    __parentheses._DeclarationLocation = p_Location('musicxml.xsd', 3125, 2)
    __parentheses._UseLocation = p_Location('musicxml.xsd', 3125, 2)

    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    _ElementMap.update({
        __per_minute.name() : __per_minute,
        __metronome_note.name() : __metronome_note,
        __metronome_relation.name() : __metronome_relation,
        __beat_unit.name() : __beat_unit,
        __beat_unit_dot.name() : __beat_unit_dot
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __justify.name() : __justify,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __parentheses.name() : __parentheses
    })
_module_typeBindings.metronome = metronome
Namespace.addCategoryObject('typeBinding', 'metronome', metronome)


# Complex type octave-shift with content type EMPTY
class octave_shift (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'octave-shift')
    _XSDLocation = p_Location('musicxml.xsd', 3172, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_octave_shift_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_octave_shift_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_octave_shift_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_octave_shift_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_octave_shift_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_octave_shift_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_octave_shift_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_octave_shift_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_octave_shift_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_octave_shift_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_octave_shift_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_octave_shift_type', _module_typeBindings.up_down_stop_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3176, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3176, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_octave_shift_number', _module_typeBindings.number_level)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3177, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 3177, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute size uses Python identifier size
    __size = p_AttributeUse(p_ExpandedName(None, 'size'), 'size', '__AbsentNamespace0_octave_shift_size', p_positiveInteger, unicode_default='8')
    __size._DeclarationLocation = p_Location('musicxml.xsd', 3178, 2)
    __size._UseLocation = p_Location('musicxml.xsd', 3178, 2)

    size = property(__size.value, __size.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number,
        __size.name() : __size
    })
_module_typeBindings.octave_shift = octave_shift
Namespace.addCategoryObject('typeBinding', 'octave-shift', octave_shift)


# Complex type other-direction with content type SIMPLE
class other_direction (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'other-direction')
    _XSDLocation = p_Location('musicxml.xsd', 3194, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_other_direction_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_other_direction_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_other_direction_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_other_direction_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_other_direction_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_other_direction_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_other_direction_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_other_direction_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_other_direction_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_other_direction_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_other_direction_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_other_direction_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __valign.name() : __valign
    })
_module_typeBindings.other_direction = other_direction
Namespace.addCategoryObject('typeBinding', 'other-direction', other_direction)


# Complex type pedal with content type EMPTY
class pedal (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'pedal')
    _XSDLocation = p_Location('musicxml.xsd', 3206, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_pedal_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_pedal_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_pedal_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_pedal_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_pedal_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_pedal_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_pedal_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_pedal_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_pedal_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_pedal_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_pedal_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_pedal_type', _module_typeBindings.start_stop_change_continue, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3210, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3210, 2)

    type = property(__type.value, __type.set, None, None)


    # Attribute line uses Python identifier line
    __line = p_AttributeUse(p_ExpandedName(None, 'line'), 'line', '__AbsentNamespace0_pedal_line', _module_typeBindings.yes_no)
    __line._DeclarationLocation = p_Location('musicxml.xsd', 3211, 2)
    __line._UseLocation = p_Location('musicxml.xsd', 3211, 2)

    line = property(__line.value, __line.set, None, None)


    # Attribute sign uses Python identifier sign
    __sign = p_AttributeUse(p_ExpandedName(None, 'sign'), 'sign', '__AbsentNamespace0_pedal_sign', _module_typeBindings.yes_no)
    __sign._DeclarationLocation = p_Location('musicxml.xsd', 3212, 2)
    __sign._UseLocation = p_Location('musicxml.xsd', 3212, 2)

    sign = property(__sign.value, __sign.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __type.name() : __type,
        __line.name() : __line,
        __sign.name() : __sign
    })
_module_typeBindings.pedal = pedal
Namespace.addCategoryObject('typeBinding', 'pedal', pedal)


# Complex type per-minute with content type SIMPLE
class per_minute (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'per-minute')
    _XSDLocation = p_Location('musicxml.xsd', 3234, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_per_minute_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_per_minute_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_per_minute_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_per_minute_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
_module_typeBindings.per_minute = per_minute
Namespace.addCategoryObject('typeBinding', 'per-minute', per_minute)


# Complex type percussion with content type ELEMENT_ONLY
class percussion (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'percussion')
    _XSDLocation = p_Location('musicxml.xsd', 3245, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element glass uses Python identifier glass
    __glass = p_ElementDeclaration(p_ExpandedName(None, 'glass'), 'glass', '__AbsentNamespace0_percussion_glass', False, p_Location('musicxml.xsd', 3250, 3), )


    glass = property(__glass.value, __glass.set, None, None)


    # Element metal uses Python identifier metal
    __metal = p_ElementDeclaration(p_ExpandedName(None, 'metal'), 'metal', '__AbsentNamespace0_percussion_metal', False, p_Location('musicxml.xsd', 3251, 3), )


    metal = property(__metal.value, __metal.set, None, None)


    # Element wood uses Python identifier wood
    __wood = p_ElementDeclaration(p_ExpandedName(None, 'wood'), 'wood', '__AbsentNamespace0_percussion_wood', False, p_Location('musicxml.xsd', 3252, 3), )


    wood = property(__wood.value, __wood.set, None, None)


    # Element pitched uses Python identifier pitched
    __pitched = p_ElementDeclaration(p_ExpandedName(None, 'pitched'), 'pitched', '__AbsentNamespace0_percussion_pitched', False, p_Location('musicxml.xsd', 3253, 3), )


    pitched = property(__pitched.value, __pitched.set, None, None)


    # Element membrane uses Python identifier membrane
    __membrane = p_ElementDeclaration(p_ExpandedName(None, 'membrane'), 'membrane', '__AbsentNamespace0_percussion_membrane', False, p_Location('musicxml.xsd', 3254, 3), )


    membrane = property(__membrane.value, __membrane.set, None, None)


    # Element effect uses Python identifier effect
    __effect = p_ElementDeclaration(p_ExpandedName(None, 'effect'), 'effect', '__AbsentNamespace0_percussion_effect', False, p_Location('musicxml.xsd', 3255, 3), )


    effect = property(__effect.value, __effect.set, None, None)


    # Element timpani uses Python identifier timpani
    __timpani = p_ElementDeclaration(p_ExpandedName(None, 'timpani'), 'timpani', '__AbsentNamespace0_percussion_timpani', False, p_Location('musicxml.xsd', 3256, 3), )


    timpani = property(__timpani.value, __timpani.set, None, None)


    # Element beater uses Python identifier beater
    __beater = p_ElementDeclaration(p_ExpandedName(None, 'beater'), 'beater', '__AbsentNamespace0_percussion_beater', False, p_Location('musicxml.xsd', 3257, 3), )


    beater = property(__beater.value, __beater.set, None, None)


    # Element stick uses Python identifier stick
    __stick = p_ElementDeclaration(p_ExpandedName(None, 'stick'), 'stick', '__AbsentNamespace0_percussion_stick', False, p_Location('musicxml.xsd', 3258, 3), )


    stick = property(__stick.value, __stick.set, None, None)


    # Element stick-location uses Python identifier stick_location
    __stick_location = p_ElementDeclaration(p_ExpandedName(None, 'stick-location'), 'stick_location', '__AbsentNamespace0_percussion_stick_location', False, p_Location('musicxml.xsd', 3259, 3), )


    stick_location = property(__stick_location.value, __stick_location.set, None, None)


    # Element other-percussion uses Python identifier other_percussion
    __other_percussion = p_ElementDeclaration(p_ExpandedName(None, 'other-percussion'), 'other_percussion', '__AbsentNamespace0_percussion_other_percussion', False, p_Location('musicxml.xsd', 3260, 3), )


    other_percussion = property(__other_percussion.value, __other_percussion.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_percussion_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute enclosure uses Python identifier enclosure
    __enclosure = p_AttributeUse(p_ExpandedName(None, 'enclosure'), 'enclosure', '__AbsentNamespace0_percussion_enclosure', _module_typeBindings.enclosure_shape)
    __enclosure._DeclarationLocation = p_Location('musicxml.xsd', 1616, 2)
    __enclosure._UseLocation = p_Location('musicxml.xsd', 1616, 2)

    enclosure = property(__enclosure.value, __enclosure.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_percussion_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_percussion_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_percussion_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_percussion_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_percussion_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_percussion_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_percussion_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_percussion_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_percussion_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_percussion_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)

    _ElementMap.update({
        __glass.name() : __glass,
        __metal.name() : __metal,
        __wood.name() : __wood,
        __pitched.name() : __pitched,
        __membrane.name() : __membrane,
        __effect.name() : __effect,
        __timpani.name() : __timpani,
        __beater.name() : __beater,
        __stick.name() : __stick,
        __stick_location.name() : __stick_location,
        __other_percussion.name() : __other_percussion
    })
    _AttributeMap.update({
        __color.name() : __color,
        __enclosure.name() : __enclosure,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign
    })
_module_typeBindings.percussion = percussion
Namespace.addCategoryObject('typeBinding', 'percussion', percussion)


# Complex type principal-voice with content type SIMPLE
class principal_voice (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'principal-voice')
    _XSDLocation = p_Location('musicxml.xsd', 3266, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_principal_voice_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_principal_voice_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_principal_voice_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_principal_voice_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_principal_voice_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_principal_voice_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_principal_voice_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_principal_voice_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_principal_voice_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_principal_voice_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_principal_voice_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_principal_voice_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3272, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3272, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute symbol uses Python identifier symbol
    __symbol = p_AttributeUse(p_ExpandedName(None, 'symbol'), 'symbol', '__AbsentNamespace0_principal_voice_symbol', _module_typeBindings.principal_voice_symbol, required=True)
    __symbol._DeclarationLocation = p_Location('musicxml.xsd', 3273, 4)
    __symbol._UseLocation = p_Location('musicxml.xsd', 3273, 4)

    symbol = property(__symbol.value, __symbol.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __type.name() : __type,
        __symbol.name() : __symbol
    })
_module_typeBindings.principal_voice = principal_voice
Namespace.addCategoryObject('typeBinding', 'principal-voice', principal_voice)


# Complex type root-alter with content type SIMPLE
class root_alter (p_complexTypeDefinition):
    _TypeDefinition = semitones
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'root-alter')
    _XSDLocation = p_Location('musicxml.xsd', 3305, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is semitones

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_root_alter_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_root_alter_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_root_alter_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_root_alter_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_root_alter_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_root_alter_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_root_alter_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_root_alter_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_root_alter_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_root_alter_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute location uses Python identifier location
    __location = p_AttributeUse(p_ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_root_alter_location', _module_typeBindings.left_right)
    __location._DeclarationLocation = p_Location('musicxml.xsd', 3313, 4)
    __location._UseLocation = p_Location('musicxml.xsd', 3313, 4)

    location = property(__location.value, __location.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __location.name() : __location
    })
_module_typeBindings.root_alter = root_alter
Namespace.addCategoryObject('typeBinding', 'root-alter', root_alter)


# Complex type root-step with content type SIMPLE
class root_step (p_complexTypeDefinition):
    _TypeDefinition = step
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'root-step')
    _XSDLocation = p_Location('musicxml.xsd', 3318, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is step

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_root_step_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_root_step_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_root_step_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_root_step_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_root_step_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_root_step_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_root_step_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_root_step_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_root_step_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute text uses Python identifier text
    __text = p_AttributeUse(p_ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_root_step_text', p_token)
    __text._DeclarationLocation = p_Location('musicxml.xsd', 3324, 4)
    __text._UseLocation = p_Location('musicxml.xsd', 3324, 4)

    text = property(__text.value, __text.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __text.name() : __text
    })
_module_typeBindings.root_step = root_step
Namespace.addCategoryObject('typeBinding', 'root-step', root_step)


# Complex type sound with content type ELEMENT_ONLY
class sound (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'sound')
    _XSDLocation = p_Location('musicxml.xsd', 3339, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element midi-device uses Python identifier midi_device
    __midi_device = p_ElementDeclaration(p_ExpandedName(None, 'midi-device'), 'midi_device', '__AbsentNamespace0_sound_midi_device', True, p_Location('musicxml.xsd', 3371, 4), )


    midi_device = property(__midi_device.value, __midi_device.set, None, None)


    # Element midi-instrument uses Python identifier midi_instrument
    __midi_instrument = p_ElementDeclaration(p_ExpandedName(None, 'midi-instrument'), 'midi_instrument', '__AbsentNamespace0_sound_midi_instrument', True, p_Location('musicxml.xsd', 3372, 4), )


    midi_instrument = property(__midi_instrument.value, __midi_instrument.set, None, None)


    # Element play uses Python identifier play
    __play = p_ElementDeclaration(p_ExpandedName(None, 'play'), 'play', '__AbsentNamespace0_sound_play', True, p_Location('musicxml.xsd', 3373, 4), )


    play = property(__play.value, __play.set, None, None)


    # Element offset uses Python identifier offset
    __offset = p_ElementDeclaration(p_ExpandedName(None, 'offset'), 'offset', '__AbsentNamespace0_sound_offset', False, p_Location('musicxml.xsd', 3375, 3), )


    offset = property(__offset.value, __offset.set, None, None)


    # Attribute tempo uses Python identifier tempo
    __tempo = p_AttributeUse(p_ExpandedName(None, 'tempo'), 'tempo', '__AbsentNamespace0_sound_tempo', _module_typeBindings.non_negative_decimal)
    __tempo._DeclarationLocation = p_Location('musicxml.xsd', 3377, 2)
    __tempo._UseLocation = p_Location('musicxml.xsd', 3377, 2)

    tempo = property(__tempo.value, __tempo.set, None, None)


    # Attribute dynamics uses Python identifier dynamics
    __dynamics = p_AttributeUse(p_ExpandedName(None, 'dynamics'), 'dynamics', '__AbsentNamespace0_sound_dynamics', _module_typeBindings.non_negative_decimal)
    __dynamics._DeclarationLocation = p_Location('musicxml.xsd', 3378, 2)
    __dynamics._UseLocation = p_Location('musicxml.xsd', 3378, 2)

    dynamics = property(__dynamics.value, __dynamics.set, None, None)


    # Attribute dacapo uses Python identifier dacapo
    __dacapo = p_AttributeUse(p_ExpandedName(None, 'dacapo'), 'dacapo', '__AbsentNamespace0_sound_dacapo', _module_typeBindings.yes_no)
    __dacapo._DeclarationLocation = p_Location('musicxml.xsd', 3379, 2)
    __dacapo._UseLocation = p_Location('musicxml.xsd', 3379, 2)

    dacapo = property(__dacapo.value, __dacapo.set, None, None)


    # Attribute segno uses Python identifier segno
    __segno = p_AttributeUse(p_ExpandedName(None, 'segno'), 'segno', '__AbsentNamespace0_sound_segno', p_token)
    __segno._DeclarationLocation = p_Location('musicxml.xsd', 3380, 2)
    __segno._UseLocation = p_Location('musicxml.xsd', 3380, 2)

    segno = property(__segno.value, __segno.set, None, None)


    # Attribute dalsegno uses Python identifier dalsegno
    __dalsegno = p_AttributeUse(p_ExpandedName(None, 'dalsegno'), 'dalsegno', '__AbsentNamespace0_sound_dalsegno', p_token)
    __dalsegno._DeclarationLocation = p_Location('musicxml.xsd', 3381, 2)
    __dalsegno._UseLocation = p_Location('musicxml.xsd', 3381, 2)

    dalsegno = property(__dalsegno.value, __dalsegno.set, None, None)


    # Attribute coda uses Python identifier coda
    __coda = p_AttributeUse(p_ExpandedName(None, 'coda'), 'coda', '__AbsentNamespace0_sound_coda', p_token)
    __coda._DeclarationLocation = p_Location('musicxml.xsd', 3382, 2)
    __coda._UseLocation = p_Location('musicxml.xsd', 3382, 2)

    coda = property(__coda.value, __coda.set, None, None)


    # Attribute tocoda uses Python identifier tocoda
    __tocoda = p_AttributeUse(p_ExpandedName(None, 'tocoda'), 'tocoda', '__AbsentNamespace0_sound_tocoda', p_token)
    __tocoda._DeclarationLocation = p_Location('musicxml.xsd', 3383, 2)
    __tocoda._UseLocation = p_Location('musicxml.xsd', 3383, 2)

    tocoda = property(__tocoda.value, __tocoda.set, None, None)


    # Attribute divisions uses Python identifier divisions
    __divisions = p_AttributeUse(p_ExpandedName(None, 'divisions'), 'divisions', '__AbsentNamespace0_sound_divisions', _module_typeBindings.divisions)
    __divisions._DeclarationLocation = p_Location('musicxml.xsd', 3384, 2)
    __divisions._UseLocation = p_Location('musicxml.xsd', 3384, 2)

    divisions = property(__divisions.value, __divisions.set, None, None)


    # Attribute forward-repeat uses Python identifier forward_repeat
    __forward_repeat = p_AttributeUse(p_ExpandedName(None, 'forward-repeat'), 'forward_repeat', '__AbsentNamespace0_sound_forward_repeat', _module_typeBindings.yes_no)
    __forward_repeat._DeclarationLocation = p_Location('musicxml.xsd', 3385, 2)
    __forward_repeat._UseLocation = p_Location('musicxml.xsd', 3385, 2)

    forward_repeat = property(__forward_repeat.value, __forward_repeat.set, None, None)


    # Attribute fine uses Python identifier fine
    __fine = p_AttributeUse(p_ExpandedName(None, 'fine'), 'fine', '__AbsentNamespace0_sound_fine', p_token)
    __fine._DeclarationLocation = p_Location('musicxml.xsd', 3386, 2)
    __fine._UseLocation = p_Location('musicxml.xsd', 3386, 2)

    fine = property(__fine.value, __fine.set, None, None)


    # Attribute time-only uses Python identifier time_only
    __time_only = p_AttributeUse(p_ExpandedName(None, 'time-only'), 'time_only', '__AbsentNamespace0_sound_time_only', _module_typeBindings.time_only)
    __time_only._DeclarationLocation = p_Location('musicxml.xsd', 3387, 2)
    __time_only._UseLocation = p_Location('musicxml.xsd', 3387, 2)

    time_only = property(__time_only.value, __time_only.set, None, None)


    # Attribute pizzicato uses Python identifier pizzicato
    __pizzicato = p_AttributeUse(p_ExpandedName(None, 'pizzicato'), 'pizzicato', '__AbsentNamespace0_sound_pizzicato', _module_typeBindings.yes_no)
    __pizzicato._DeclarationLocation = p_Location('musicxml.xsd', 3388, 2)
    __pizzicato._UseLocation = p_Location('musicxml.xsd', 3388, 2)

    pizzicato = property(__pizzicato.value, __pizzicato.set, None, None)


    # Attribute pan uses Python identifier pan
    __pan = p_AttributeUse(p_ExpandedName(None, 'pan'), 'pan', '__AbsentNamespace0_sound_pan', _module_typeBindings.rotation_degrees)
    __pan._DeclarationLocation = p_Location('musicxml.xsd', 3389, 2)
    __pan._UseLocation = p_Location('musicxml.xsd', 3389, 2)

    pan = property(__pan.value, __pan.set, None, None)


    # Attribute elevation uses Python identifier elevation
    __elevation = p_AttributeUse(p_ExpandedName(None, 'elevation'), 'elevation', '__AbsentNamespace0_sound_elevation', _module_typeBindings.rotation_degrees)
    __elevation._DeclarationLocation = p_Location('musicxml.xsd', 3390, 2)
    __elevation._UseLocation = p_Location('musicxml.xsd', 3390, 2)

    elevation = property(__elevation.value, __elevation.set, None, None)


    # Attribute damper-pedal uses Python identifier damper_pedal
    __damper_pedal = p_AttributeUse(p_ExpandedName(None, 'damper-pedal'), 'damper_pedal', '__AbsentNamespace0_sound_damper_pedal', _module_typeBindings.yes_no_number)
    __damper_pedal._DeclarationLocation = p_Location('musicxml.xsd', 3391, 2)
    __damper_pedal._UseLocation = p_Location('musicxml.xsd', 3391, 2)

    damper_pedal = property(__damper_pedal.value, __damper_pedal.set, None, None)


    # Attribute soft-pedal uses Python identifier soft_pedal
    __soft_pedal = p_AttributeUse(p_ExpandedName(None, 'soft-pedal'), 'soft_pedal', '__AbsentNamespace0_sound_soft_pedal', _module_typeBindings.yes_no_number)
    __soft_pedal._DeclarationLocation = p_Location('musicxml.xsd', 3392, 2)
    __soft_pedal._UseLocation = p_Location('musicxml.xsd', 3392, 2)

    soft_pedal = property(__soft_pedal.value, __soft_pedal.set, None, None)


    # Attribute sostenuto-pedal uses Python identifier sostenuto_pedal
    __sostenuto_pedal = p_AttributeUse(p_ExpandedName(None, 'sostenuto-pedal'), 'sostenuto_pedal', '__AbsentNamespace0_sound_sostenuto_pedal', _module_typeBindings.yes_no_number)
    __sostenuto_pedal._DeclarationLocation = p_Location('musicxml.xsd', 3393, 2)
    __sostenuto_pedal._UseLocation = p_Location('musicxml.xsd', 3393, 2)

    sostenuto_pedal = property(__sostenuto_pedal.value, __sostenuto_pedal.set, None, None)

    _ElementMap.update({
        __midi_device.name() : __midi_device,
        __midi_instrument.name() : __midi_instrument,
        __play.name() : __play,
        __offset.name() : __offset
    })
    _AttributeMap.update({
        __tempo.name() : __tempo,
        __dynamics.name() : __dynamics,
        __dacapo.name() : __dacapo,
        __segno.name() : __segno,
        __dalsegno.name() : __dalsegno,
        __coda.name() : __coda,
        __tocoda.name() : __tocoda,
        __divisions.name() : __divisions,
        __forward_repeat.name() : __forward_repeat,
        __fine.name() : __fine,
        __time_only.name() : __time_only,
        __pizzicato.name() : __pizzicato,
        __pan.name() : __pan,
        __elevation.name() : __elevation,
        __damper_pedal.name() : __damper_pedal,
        __soft_pedal.name() : __soft_pedal,
        __sostenuto_pedal.name() : __sostenuto_pedal
    })
_module_typeBindings.sound = sound
Namespace.addCategoryObject('typeBinding', 'sound', sound)


# Complex type string-mute with content type EMPTY
class string_mute (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'string-mute')
    _XSDLocation = p_Location('musicxml.xsd', 3407, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_string_mute_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_string_mute_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_string_mute_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_string_mute_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_string_mute_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute halign uses Python identifier halign
    __halign = p_AttributeUse(p_ExpandedName(None, 'halign'), 'halign', '__AbsentNamespace0_string_mute_halign', _module_typeBindings.left_center_right)
    __halign._DeclarationLocation = p_Location('musicxml.xsd', 1640, 2)
    __halign._UseLocation = p_Location('musicxml.xsd', 1640, 2)

    halign = property(__halign.value, __halign.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_string_mute_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_string_mute_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_string_mute_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_string_mute_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute valign uses Python identifier valign
    __valign = p_AttributeUse(p_ExpandedName(None, 'valign'), 'valign', '__AbsentNamespace0_string_mute_valign', _module_typeBindings.valign)
    __valign._DeclarationLocation = p_Location('musicxml.xsd', 1855, 2)
    __valign._UseLocation = p_Location('musicxml.xsd', 1855, 2)

    valign = property(__valign.value, __valign.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_string_mute_type', _module_typeBindings.on_off, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3411, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3411, 2)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __halign.name() : __halign,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __valign.name() : __valign,
        __type.name() : __type
    })
_module_typeBindings.string_mute = string_mute
Namespace.addCategoryObject('typeBinding', 'string-mute', string_mute)


# Complex type accidental with content type SIMPLE
class accidental (p_complexTypeDefinition):
    _TypeDefinition = accidental_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'accidental')
    _XSDLocation = p_Location('musicxml.xsd', 3672, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is accidental_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_accidental_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_accidental_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_accidental_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_accidental_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_accidental_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute parentheses uses Python identifier parentheses
    __parentheses = p_AttributeUse(p_ExpandedName(None, 'parentheses'), 'parentheses', '__AbsentNamespace0_accidental_parentheses', _module_typeBindings.yes_no)
    __parentheses._DeclarationLocation = p_Location('musicxml.xsd', 1661, 2)
    __parentheses._UseLocation = p_Location('musicxml.xsd', 1661, 2)

    parentheses = property(__parentheses.value, __parentheses.set, None, None)


    # Attribute bracket uses Python identifier bracket
    __bracket = p_AttributeUse(p_ExpandedName(None, 'bracket'), 'bracket', '__AbsentNamespace0_accidental_bracket', _module_typeBindings.yes_no)
    __bracket._DeclarationLocation = p_Location('musicxml.xsd', 1662, 2)
    __bracket._UseLocation = p_Location('musicxml.xsd', 1662, 2)

    bracket = property(__bracket.value, __bracket.set, None, None)


    # Attribute size uses Python identifier size
    __size = p_AttributeUse(p_ExpandedName(None, 'size'), 'size', '__AbsentNamespace0_accidental_size', _module_typeBindings.symbol_size)
    __size._DeclarationLocation = p_Location('musicxml.xsd', 1663, 2)
    __size._UseLocation = p_Location('musicxml.xsd', 1663, 2)

    size = property(__size.value, __size.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_accidental_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_accidental_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_accidental_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_accidental_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute cautionary uses Python identifier cautionary
    __cautionary = p_AttributeUse(p_ExpandedName(None, 'cautionary'), 'cautionary', '__AbsentNamespace0_accidental_cautionary', _module_typeBindings.yes_no)
    __cautionary._DeclarationLocation = p_Location('musicxml.xsd', 3678, 4)
    __cautionary._UseLocation = p_Location('musicxml.xsd', 3678, 4)

    cautionary = property(__cautionary.value, __cautionary.set, None, None)


    # Attribute editorial uses Python identifier editorial
    __editorial = p_AttributeUse(p_ExpandedName(None, 'editorial'), 'editorial', '__AbsentNamespace0_accidental_editorial', _module_typeBindings.yes_no)
    __editorial._DeclarationLocation = p_Location('musicxml.xsd', 3679, 4)
    __editorial._UseLocation = p_Location('musicxml.xsd', 3679, 4)

    editorial = property(__editorial.value, __editorial.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __parentheses.name() : __parentheses,
        __bracket.name() : __bracket,
        __size.name() : __size,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __cautionary.name() : __cautionary,
        __editorial.name() : __editorial
    })
_module_typeBindings.accidental = accidental
Namespace.addCategoryObject('typeBinding', 'accidental', accidental)


# Complex type accidental-mark with content type SIMPLE
class accidental_mark (p_complexTypeDefinition):
    _TypeDefinition = accidental_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'accidental-mark')
    _XSDLocation = p_Location('musicxml.xsd', 3686, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is accidental_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_accidental_mark_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_accidental_mark_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_accidental_mark_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_accidental_mark_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_accidental_mark_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_accidental_mark_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_accidental_mark_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_accidental_mark_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_accidental_mark_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_accidental_mark_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.accidental_mark = accidental_mark
Namespace.addCategoryObject('typeBinding', 'accidental-mark', accidental_mark)


# Complex type arrow with content type ELEMENT_ONLY
class arrow (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'arrow')
    _XSDLocation = p_Location('musicxml.xsd', 3793, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element arrow-direction uses Python identifier arrow_direction
    __arrow_direction = p_ElementDeclaration(p_ExpandedName(None, 'arrow-direction'), 'arrow_direction', '__AbsentNamespace0_arrow_arrow_direction', False, p_Location('musicxml.xsd', 3799, 4), )


    arrow_direction = property(__arrow_direction.value, __arrow_direction.set, None, None)


    # Element arrow-style uses Python identifier arrow_style
    __arrow_style = p_ElementDeclaration(p_ExpandedName(None, 'arrow-style'), 'arrow_style', '__AbsentNamespace0_arrow_arrow_style', False, p_Location('musicxml.xsd', 3800, 4), )


    arrow_style = property(__arrow_style.value, __arrow_style.set, None, None)


    # Element circular-arrow uses Python identifier circular_arrow
    __circular_arrow = p_ElementDeclaration(p_ExpandedName(None, 'circular-arrow'), 'circular_arrow', '__AbsentNamespace0_arrow_circular_arrow', False, p_Location('musicxml.xsd', 3802, 3), )


    circular_arrow = property(__circular_arrow.value, __circular_arrow.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_arrow_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_arrow_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_arrow_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_arrow_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_arrow_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_arrow_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_arrow_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_arrow_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_arrow_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_arrow_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        __arrow_direction.name() : __arrow_direction,
        __arrow_style.name() : __arrow_style,
        __circular_arrow.name() : __circular_arrow
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.arrow = arrow
Namespace.addCategoryObject('typeBinding', 'arrow', arrow)


# Complex type bend with content type ELEMENT_ONLY
class bend (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'bend')
    _XSDLocation = p_Location('musicxml.xsd', 3838, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element bend-alter uses Python identifier bend_alter
    __bend_alter = p_ElementDeclaration(p_ExpandedName(None, 'bend-alter'), 'bend_alter', '__AbsentNamespace0_bend_bend_alter', False, p_Location('musicxml.xsd', 3843, 3), )


    bend_alter = property(__bend_alter.value, __bend_alter.set, None, 'The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended.')


    # Element pre-bend uses Python identifier pre_bend
    __pre_bend = p_ElementDeclaration(p_ExpandedName(None, 'pre-bend'), 'pre_bend', '__AbsentNamespace0_bend_pre_bend', False, p_Location('musicxml.xsd', 3849, 4), )


    pre_bend = property(__pre_bend.value, __pre_bend.set, None, 'The pre-bend element indicates that this is a pre-bend rather than a normal bend or a release.')


    # Element release uses Python identifier release
    __release = p_ElementDeclaration(p_ExpandedName(None, 'release'), 'release', '__AbsentNamespace0_bend_release', False, p_Location('musicxml.xsd', 3854, 4), )


    release = property(__release.value, __release.set, None, 'The release element indicates that this is a release rather than a normal bend or pre-bend.')


    # Element with-bar uses Python identifier with_bar
    __with_bar = p_ElementDeclaration(p_ExpandedName(None, 'with-bar'), 'with_bar', '__AbsentNamespace0_bend_with_bar', False, p_Location('musicxml.xsd', 3860, 3), )


    with_bar = property(__with_bar.value, __with_bar.set, None, 'The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.')


    # Attribute accelerate uses Python identifier accelerate
    __accelerate = p_AttributeUse(p_ExpandedName(None, 'accelerate'), 'accelerate', '__AbsentNamespace0_bend_accelerate', _module_typeBindings.yes_no)
    __accelerate._DeclarationLocation = p_Location('musicxml.xsd', 1557, 2)
    __accelerate._UseLocation = p_Location('musicxml.xsd', 1557, 2)

    accelerate = property(__accelerate.value, __accelerate.set, None, None)


    # Attribute beats uses Python identifier beats
    __beats = p_AttributeUse(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_bend_beats', _module_typeBindings.trill_beats)
    __beats._DeclarationLocation = p_Location('musicxml.xsd', 1558, 2)
    __beats._UseLocation = p_Location('musicxml.xsd', 1558, 2)

    beats = property(__beats.value, __beats.set, None, None)


    # Attribute first-beat uses Python identifier first_beat
    __first_beat = p_AttributeUse(p_ExpandedName(None, 'first-beat'), 'first_beat', '__AbsentNamespace0_bend_first_beat', _module_typeBindings.percent)
    __first_beat._DeclarationLocation = p_Location('musicxml.xsd', 1559, 2)
    __first_beat._UseLocation = p_Location('musicxml.xsd', 1559, 2)

    first_beat = property(__first_beat.value, __first_beat.set, None, None)


    # Attribute last-beat uses Python identifier last_beat
    __last_beat = p_AttributeUse(p_ExpandedName(None, 'last-beat'), 'last_beat', '__AbsentNamespace0_bend_last_beat', _module_typeBindings.percent)
    __last_beat._DeclarationLocation = p_Location('musicxml.xsd', 1560, 2)
    __last_beat._UseLocation = p_Location('musicxml.xsd', 1560, 2)

    last_beat = property(__last_beat.value, __last_beat.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_bend_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_bend_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_bend_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_bend_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_bend_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_bend_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_bend_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_bend_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_bend_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        __bend_alter.name() : __bend_alter,
        __pre_bend.name() : __pre_bend,
        __release.name() : __release,
        __with_bar.name() : __with_bar
    })
    _AttributeMap.update({
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __first_beat.name() : __first_beat,
        __last_beat.name() : __last_beat,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.bend = bend
Namespace.addCategoryObject('typeBinding', 'bend', bend)


# Complex type breath-mark with content type SIMPLE
class breath_mark (p_complexTypeDefinition):
    _TypeDefinition = breath_mark_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'breath-mark')
    _XSDLocation = p_Location('musicxml.xsd', 3870, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is breath_mark_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_breath_mark_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_breath_mark_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_breath_mark_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_breath_mark_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_breath_mark_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_breath_mark_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_breath_mark_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_breath_mark_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_breath_mark_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_breath_mark_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.breath_mark = breath_mark
Namespace.addCategoryObject('typeBinding', 'breath-mark', breath_mark)


# Complex type empty-line with content type EMPTY
class empty_line (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-line')
    _XSDLocation = p_Location('musicxml.xsd', 3882, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_empty_line_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_empty_line_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_empty_line_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_line_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_line_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_line_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_line_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute line-shape uses Python identifier line_shape
    __line_shape = p_AttributeUse(p_ExpandedName(None, 'line-shape'), 'line_shape', '__AbsentNamespace0_empty_line_line_shape', _module_typeBindings.line_shape)
    __line_shape._DeclarationLocation = p_Location('musicxml.xsd', 1677, 2)
    __line_shape._UseLocation = p_Location('musicxml.xsd', 1677, 2)

    line_shape = property(__line_shape.value, __line_shape.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_empty_line_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_empty_line_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_empty_line_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_empty_line_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_empty_line_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_empty_line_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __line_shape.name() : __line_shape,
        __line_type.name() : __line_type,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.empty_line = empty_line
Namespace.addCategoryObject('typeBinding', 'empty-line', empty_line)


# Complex type extend with content type EMPTY
class extend (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'extend')
    _XSDLocation = p_Location('musicxml.xsd', 3893, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_extend_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_extend_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_extend_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_extend_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_extend_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_extend_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_extend_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_extend_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_extend_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_extend_type', _module_typeBindings.start_stop_continue)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3897, 2)
    __type._UseLocation = p_Location('musicxml.xsd', 3897, 2)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type
    })
_module_typeBindings.extend = extend
Namespace.addCategoryObject('typeBinding', 'extend', extend)


# Complex type figured-bass with content type ELEMENT_ONLY
class figured_bass (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'figured-bass')
    _XSDLocation = p_Location('musicxml.xsd', 3925, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element figure uses Python identifier figure
    __figure = p_ElementDeclaration(p_ExpandedName(None, 'figure'), 'figure', '__AbsentNamespace0_figured_bass_figure', True, p_Location('musicxml.xsd', 3932, 3), )


    figure = property(__figure.value, __figure.set, None, None)


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_figured_bass_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_figured_bass_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Element duration uses Python identifier duration
    __duration = p_ElementDeclaration(p_ExpandedName(None, 'duration'), 'duration', '__AbsentNamespace0_figured_bass_duration', False, p_Location('musicxml.xsd', 5267, 3), )


    duration = property(__duration.value, __duration.set, None, "Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_figured_bass_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_figured_bass_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_figured_bass_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_figured_bass_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_figured_bass_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_figured_bass_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_figured_bass_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_figured_bass_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_figured_bass_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_figured_bass_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute print-spacing uses Python identifier print_spacing
    __print_spacing = p_AttributeUse(p_ExpandedName(None, 'print-spacing'), 'print_spacing', '__AbsentNamespace0_figured_bass_print_spacing', _module_typeBindings.yes_no)
    __print_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1751, 2)
    __print_spacing._UseLocation = p_Location('musicxml.xsd', 1751, 2)

    print_spacing = property(__print_spacing.value, __print_spacing.set, None, None)


    # Attribute print-dot uses Python identifier print_dot
    __print_dot = p_AttributeUse(p_ExpandedName(None, 'print-dot'), 'print_dot', '__AbsentNamespace0_figured_bass_print_dot', _module_typeBindings.yes_no)
    __print_dot._DeclarationLocation = p_Location('musicxml.xsd', 1779, 2)
    __print_dot._UseLocation = p_Location('musicxml.xsd', 1779, 2)

    print_dot = property(__print_dot.value, __print_dot.set, None, None)


    # Attribute print-lyric uses Python identifier print_lyric
    __print_lyric = p_AttributeUse(p_ExpandedName(None, 'print-lyric'), 'print_lyric', '__AbsentNamespace0_figured_bass_print_lyric', _module_typeBindings.yes_no)
    __print_lyric._DeclarationLocation = p_Location('musicxml.xsd', 1781, 2)
    __print_lyric._UseLocation = p_Location('musicxml.xsd', 1781, 2)

    print_lyric = property(__print_lyric.value, __print_lyric.set, None, None)


    # Attribute parentheses uses Python identifier parentheses
    __parentheses = p_AttributeUse(p_ExpandedName(None, 'parentheses'), 'parentheses', '__AbsentNamespace0_figured_bass_parentheses', _module_typeBindings.yes_no)
    __parentheses._DeclarationLocation = p_Location('musicxml.xsd', 3938, 2)
    __parentheses._UseLocation = p_Location('musicxml.xsd', 3938, 2)

    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    _ElementMap.update({
        __figure.name() : __figure,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __duration.name() : __duration
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __print_spacing.name() : __print_spacing,
        __print_dot.name() : __print_dot,
        __print_lyric.name() : __print_lyric,
        __parentheses.name() : __parentheses
    })
_module_typeBindings.figured_bass = figured_bass
Namespace.addCategoryObject('typeBinding', 'figured-bass', figured_bass)


# Complex type glissando with content type SIMPLE
class glissando (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'glissando')
    _XSDLocation = p_Location('musicxml.xsd', 3952, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_glissando_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_glissando_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_glissando_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_glissando_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_glissando_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_glissando_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_glissando_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_glissando_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_glissando_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_glissando_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_glissando_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_glissando_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_glissando_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3958, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3958, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_glissando_number', _module_typeBindings.number_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3959, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 3959, 4)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.glissando = glissando
Namespace.addCategoryObject('typeBinding', 'glissando', glissando)


# Complex type hammer-on-pull-off with content type SIMPLE
class hammer_on_pull_off (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'hammer-on-pull-off')
    _XSDLocation = p_Location('musicxml.xsd', 3977, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_hammer_on_pull_off_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_hammer_on_pull_off_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_hammer_on_pull_off_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_hammer_on_pull_off_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_hammer_on_pull_off_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_hammer_on_pull_off_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_hammer_on_pull_off_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_hammer_on_pull_off_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_hammer_on_pull_off_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_hammer_on_pull_off_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_hammer_on_pull_off_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 3983, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 3983, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_hammer_on_pull_off_number', _module_typeBindings.number_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 3984, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 3984, 4)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.hammer_on_pull_off = hammer_on_pull_off
Namespace.addCategoryObject('typeBinding', 'hammer-on-pull-off', hammer_on_pull_off)


# Complex type handbell with content type SIMPLE
class handbell (p_complexTypeDefinition):
    _TypeDefinition = handbell_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'handbell')
    _XSDLocation = p_Location('musicxml.xsd', 3991, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is handbell_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_handbell_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_handbell_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_handbell_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_handbell_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_handbell_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_handbell_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_handbell_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_handbell_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_handbell_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_handbell_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.handbell = handbell
Namespace.addCategoryObject('typeBinding', 'handbell', handbell)


# Complex type harmonic with content type ELEMENT_ONLY
class harmonic (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'harmonic')
    _XSDLocation = p_Location('musicxml.xsd', 4003, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element natural uses Python identifier natural
    __natural = p_ElementDeclaration(p_ExpandedName(None, 'natural'), 'natural', '__AbsentNamespace0_harmonic_natural', False, p_Location('musicxml.xsd', 4009, 4), )


    natural = property(__natural.value, __natural.set, None, 'The natural element indicates that this is a natural harmonic. These are usually notated at base pitch rather than sounding pitch.')


    # Element artificial uses Python identifier artificial
    __artificial = p_ElementDeclaration(p_ExpandedName(None, 'artificial'), 'artificial', '__AbsentNamespace0_harmonic_artificial', False, p_Location('musicxml.xsd', 4014, 4), )


    artificial = property(__artificial.value, __artificial.set, None, 'The artificial element indicates that this is an artificial harmonic.')


    # Element base-pitch uses Python identifier base_pitch
    __base_pitch = p_ElementDeclaration(p_ExpandedName(None, 'base-pitch'), 'base_pitch', '__AbsentNamespace0_harmonic_base_pitch', False, p_Location('musicxml.xsd', 4021, 4), )


    base_pitch = property(__base_pitch.value, __base_pitch.set, None, 'The base pitch is the pitch at which the string is played before touching to create the harmonic.')


    # Element touching-pitch uses Python identifier touching_pitch
    __touching_pitch = p_ElementDeclaration(p_ExpandedName(None, 'touching-pitch'), 'touching_pitch', '__AbsentNamespace0_harmonic_touching_pitch', False, p_Location('musicxml.xsd', 4026, 4), )


    touching_pitch = property(__touching_pitch.value, __touching_pitch.set, None, 'The touching-pitch is the pitch at which the string is touched lightly to produce the harmonic.')


    # Element sounding-pitch uses Python identifier sounding_pitch
    __sounding_pitch = p_ElementDeclaration(p_ExpandedName(None, 'sounding-pitch'), 'sounding_pitch', '__AbsentNamespace0_harmonic_sounding_pitch', False, p_Location('musicxml.xsd', 4031, 4), )


    sounding_pitch = property(__sounding_pitch.value, __sounding_pitch.set, None, 'The sounding-pitch is the pitch which is heard when playing the harmonic.')


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_harmonic_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_harmonic_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_harmonic_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_harmonic_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_harmonic_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_harmonic_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_harmonic_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_harmonic_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_harmonic_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_harmonic_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_harmonic_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({
        __natural.name() : __natural,
        __artificial.name() : __artificial,
        __base_pitch.name() : __base_pitch,
        __touching_pitch.name() : __touching_pitch,
        __sounding_pitch.name() : __sounding_pitch
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object
    })
_module_typeBindings.harmonic = harmonic
Namespace.addCategoryObject('typeBinding', 'harmonic', harmonic)


# Complex type hole with content type ELEMENT_ONLY
class hole (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'hole')
    _XSDLocation = p_Location('musicxml.xsd', 4054, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element hole-type uses Python identifier hole_type
    __hole_type = p_ElementDeclaration(p_ExpandedName(None, 'hole-type'), 'hole_type', '__AbsentNamespace0_hole_hole_type', False, p_Location('musicxml.xsd', 4059, 3), )


    hole_type = property(__hole_type.value, __hole_type.set, None, 'The content of the optional hole-type element indicates what the hole symbol represents in terms of instrument fingering or other techniques.')


    # Element hole-closed uses Python identifier hole_closed
    __hole_closed = p_ElementDeclaration(p_ExpandedName(None, 'hole-closed'), 'hole_closed', '__AbsentNamespace0_hole_hole_closed', False, p_Location('musicxml.xsd', 4064, 3), )


    hole_closed = property(__hole_closed.value, __hole_closed.set, None, None)


    # Element hole-shape uses Python identifier hole_shape
    __hole_shape = p_ElementDeclaration(p_ExpandedName(None, 'hole-shape'), 'hole_shape', '__AbsentNamespace0_hole_hole_shape', False, p_Location('musicxml.xsd', 4065, 3), )


    hole_shape = property(__hole_shape.value, __hole_shape.set, None, 'The optional hole-shape element indicates the shape of the hole symbol; the default is a circle.')


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_hole_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_hole_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_hole_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_hole_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_hole_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_hole_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_hole_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_hole_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_hole_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_hole_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({
        __hole_type.name() : __hole_type,
        __hole_closed.name() : __hole_closed,
        __hole_shape.name() : __hole_shape
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.hole = hole
Namespace.addCategoryObject('typeBinding', 'hole', hole)


# Complex type note with content type ELEMENT_ONLY
class note (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'note')
    _XSDLocation = p_Location('musicxml.xsd', 4194, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Element grace uses Python identifier grace
    __grace = p_ElementDeclaration(p_ExpandedName(None, 'grace'), 'grace', '__AbsentNamespace0_note_grace', False, p_Location('musicxml.xsd', 4203, 5), )


    grace = property(__grace.value, __grace.set, None, None)


    # Element tie uses Python identifier tie
    __tie = p_ElementDeclaration(p_ExpandedName(None, 'tie'), 'tie', '__AbsentNamespace0_note_tie', True, p_Location('musicxml.xsd', 4205, 5), )


    tie = property(__tie.value, __tie.set, None, None)


    # Element cue uses Python identifier cue
    __cue = p_ElementDeclaration(p_ExpandedName(None, 'cue'), 'cue', '__AbsentNamespace0_note_cue', False, p_Location('musicxml.xsd', 4208, 5), )


    cue = property(__cue.value, __cue.set, None, 'The cue element indicates the presence of a cue note.')


    # Element instrument uses Python identifier instrument
    __instrument = p_ElementDeclaration(p_ExpandedName(None, 'instrument'), 'instrument', '__AbsentNamespace0_note_instrument', False, p_Location('musicxml.xsd', 4222, 3), )


    instrument = property(__instrument.value, __instrument.set, None, None)


    # Element type uses Python identifier type
    __type = p_ElementDeclaration(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_note_type', False, p_Location('musicxml.xsd', 4224, 3), )


    type = property(__type.value, __type.set, None, None)


    # Element dot uses Python identifier dot
    __dot = p_ElementDeclaration(p_ExpandedName(None, 'dot'), 'dot', '__AbsentNamespace0_note_dot', True, p_Location('musicxml.xsd', 4225, 3), )


    dot = property(__dot.value, __dot.set, None, 'One dot element is used for each dot of prolongation. The placement element is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space.')


    # Element accidental uses Python identifier accidental
    __accidental = p_ElementDeclaration(p_ExpandedName(None, 'accidental'), 'accidental', '__AbsentNamespace0_note_accidental', False, p_Location('musicxml.xsd', 4230, 3), )


    accidental = property(__accidental.value, __accidental.set, None, None)


    # Element time-modification uses Python identifier time_modification
    __time_modification = p_ElementDeclaration(p_ExpandedName(None, 'time-modification'), 'time_modification', '__AbsentNamespace0_note_time_modification', False, p_Location('musicxml.xsd', 4231, 3), )


    time_modification = property(__time_modification.value, __time_modification.set, None, None)


    # Element stem uses Python identifier stem
    __stem = p_ElementDeclaration(p_ExpandedName(None, 'stem'), 'stem', '__AbsentNamespace0_note_stem', False, p_Location('musicxml.xsd', 4232, 3), )


    stem = property(__stem.value, __stem.set, None, None)


    # Element notehead uses Python identifier notehead
    __notehead = p_ElementDeclaration(p_ExpandedName(None, 'notehead'), 'notehead', '__AbsentNamespace0_note_notehead', False, p_Location('musicxml.xsd', 4233, 3), )


    notehead = property(__notehead.value, __notehead.set, None, None)


    # Element notehead-text uses Python identifier notehead_text
    __notehead_text = p_ElementDeclaration(p_ExpandedName(None, 'notehead-text'), 'notehead_text', '__AbsentNamespace0_note_notehead_text', False, p_Location('musicxml.xsd', 4234, 3), )


    notehead_text = property(__notehead_text.value, __notehead_text.set, None, None)


    # Element beam uses Python identifier beam
    __beam = p_ElementDeclaration(p_ExpandedName(None, 'beam'), 'beam', '__AbsentNamespace0_note_beam', True, p_Location('musicxml.xsd', 4236, 3), )


    beam = property(__beam.value, __beam.set, None, None)


    # Element notations uses Python identifier notations
    __notations = p_ElementDeclaration(p_ExpandedName(None, 'notations'), 'notations', '__AbsentNamespace0_note_notations', True, p_Location('musicxml.xsd', 4237, 3), )


    notations = property(__notations.value, __notations.set, None, None)


    # Element lyric uses Python identifier lyric
    __lyric = p_ElementDeclaration(p_ExpandedName(None, 'lyric'), 'lyric', '__AbsentNamespace0_note_lyric', True, p_Location('musicxml.xsd', 4238, 3), )


    lyric = property(__lyric.value, __lyric.set, None, None)


    # Element play uses Python identifier play
    __play = p_ElementDeclaration(p_ExpandedName(None, 'play'), 'play', '__AbsentNamespace0_note_play', False, p_Location('musicxml.xsd', 4239, 3), )


    play = property(__play.value, __play.set, None, None)


    # Element footnote uses Python identifier footnote
    __footnote = p_ElementDeclaration(p_ExpandedName(None, 'footnote'), 'footnote', '__AbsentNamespace0_note_footnote', False, p_Location('musicxml.xsd', 5054, 3), )


    footnote = property(__footnote.value, __footnote.set, None, None)


    # Element level uses Python identifier level
    __level = p_ElementDeclaration(p_ExpandedName(None, 'level'), 'level', '__AbsentNamespace0_note_level', False, p_Location('musicxml.xsd', 5063, 3), )


    level = property(__level.value, __level.set, None, None)


    # Element staff uses Python identifier staff
    __staff = p_ElementDeclaration(p_ExpandedName(None, 'staff'), 'staff', '__AbsentNamespace0_note_staff', False, p_Location('musicxml.xsd', 5072, 3), )


    staff = property(__staff.value, __staff.set, None, 'Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.')


    # Element voice uses Python identifier voice
    __voice = p_ElementDeclaration(p_ExpandedName(None, 'voice'), 'voice', '__AbsentNamespace0_note_voice', False, p_Location('musicxml.xsd', 5108, 3), )


    voice = property(__voice.value, __voice.set, None, None)


    # Element duration uses Python identifier duration
    __duration = p_ElementDeclaration(p_ExpandedName(None, 'duration'), 'duration', '__AbsentNamespace0_note_duration', False, p_Location('musicxml.xsd', 5267, 3), )


    duration = property(__duration.value, __duration.set, None, "Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.")


    # Element chord uses Python identifier chord
    __chord = p_ElementDeclaration(p_ExpandedName(None, 'chord'), 'chord', '__AbsentNamespace0_note_chord', False, p_Location('musicxml.xsd', 5290, 3), )


    chord = property(__chord.value, __chord.set, None, 'The chord element indicates that this note is an additional chord tone with the preceding note. The duration of this note can be no longer than the preceding note. In MuseData, a missing duration indicates the same length as the previous note, but the MusicXML format requires a duration for chord notes too.')


    # Element pitch uses Python identifier pitch
    __pitch = p_ElementDeclaration(p_ExpandedName(None, 'pitch'), 'pitch', '__AbsentNamespace0_note_pitch', False, p_Location('musicxml.xsd', 5296, 4), )


    pitch = property(__pitch.value, __pitch.set, None, None)


    # Element unpitched uses Python identifier unpitched
    __unpitched = p_ElementDeclaration(p_ExpandedName(None, 'unpitched'), 'unpitched', '__AbsentNamespace0_note_unpitched', False, p_Location('musicxml.xsd', 5297, 4), )


    unpitched = property(__unpitched.value, __unpitched.set, None, None)


    # Element rest uses Python identifier rest
    __rest = p_ElementDeclaration(p_ExpandedName(None, 'rest'), 'rest', '__AbsentNamespace0_note_rest', False, p_Location('musicxml.xsd', 5298, 4), )


    rest = property(__rest.value, __rest.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_note_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_note_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_note_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_note_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_note_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_note_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute print-spacing uses Python identifier print_spacing
    __print_spacing = p_AttributeUse(p_ExpandedName(None, 'print-spacing'), 'print_spacing', '__AbsentNamespace0_note_print_spacing', _module_typeBindings.yes_no)
    __print_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1751, 2)
    __print_spacing._UseLocation = p_Location('musicxml.xsd', 1751, 2)

    print_spacing = property(__print_spacing.value, __print_spacing.set, None, None)


    # Attribute print-dot uses Python identifier print_dot
    __print_dot = p_AttributeUse(p_ExpandedName(None, 'print-dot'), 'print_dot', '__AbsentNamespace0_note_print_dot', _module_typeBindings.yes_no)
    __print_dot._DeclarationLocation = p_Location('musicxml.xsd', 1779, 2)
    __print_dot._UseLocation = p_Location('musicxml.xsd', 1779, 2)

    print_dot = property(__print_dot.value, __print_dot.set, None, None)


    # Attribute print-lyric uses Python identifier print_lyric
    __print_lyric = p_AttributeUse(p_ExpandedName(None, 'print-lyric'), 'print_lyric', '__AbsentNamespace0_note_print_lyric', _module_typeBindings.yes_no)
    __print_lyric._DeclarationLocation = p_Location('musicxml.xsd', 1781, 2)
    __print_lyric._UseLocation = p_Location('musicxml.xsd', 1781, 2)

    print_lyric = property(__print_lyric.value, __print_lyric.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_note_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1869, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1869, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_note_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1870, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1870, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_note_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1871, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1871, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_note_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1872, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1872, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute dynamics uses Python identifier dynamics
    __dynamics = p_AttributeUse(p_ExpandedName(None, 'dynamics'), 'dynamics', '__AbsentNamespace0_note_dynamics', _module_typeBindings.non_negative_decimal)
    __dynamics._DeclarationLocation = p_Location('musicxml.xsd', 4245, 2)
    __dynamics._UseLocation = p_Location('musicxml.xsd', 4245, 2)

    dynamics = property(__dynamics.value, __dynamics.set, None, None)


    # Attribute end-dynamics uses Python identifier end_dynamics
    __end_dynamics = p_AttributeUse(p_ExpandedName(None, 'end-dynamics'), 'end_dynamics', '__AbsentNamespace0_note_end_dynamics', _module_typeBindings.non_negative_decimal)
    __end_dynamics._DeclarationLocation = p_Location('musicxml.xsd', 4246, 2)
    __end_dynamics._UseLocation = p_Location('musicxml.xsd', 4246, 2)

    end_dynamics = property(__end_dynamics.value, __end_dynamics.set, None, None)


    # Attribute attack uses Python identifier attack
    __attack = p_AttributeUse(p_ExpandedName(None, 'attack'), 'attack', '__AbsentNamespace0_note_attack', _module_typeBindings.divisions)
    __attack._DeclarationLocation = p_Location('musicxml.xsd', 4247, 2)
    __attack._UseLocation = p_Location('musicxml.xsd', 4247, 2)

    attack = property(__attack.value, __attack.set, None, None)


    # Attribute release uses Python identifier release
    __release = p_AttributeUse(p_ExpandedName(None, 'release'), 'release', '__AbsentNamespace0_note_release', _module_typeBindings.divisions)
    __release._DeclarationLocation = p_Location('musicxml.xsd', 4248, 2)
    __release._UseLocation = p_Location('musicxml.xsd', 4248, 2)

    release = property(__release.value, __release.set, None, None)


    # Attribute time-only uses Python identifier time_only
    __time_only = p_AttributeUse(p_ExpandedName(None, 'time-only'), 'time_only', '__AbsentNamespace0_note_time_only', _module_typeBindings.time_only)
    __time_only._DeclarationLocation = p_Location('musicxml.xsd', 4249, 2)
    __time_only._UseLocation = p_Location('musicxml.xsd', 4249, 2)

    time_only = property(__time_only.value, __time_only.set, None, None)


    # Attribute pizzicato uses Python identifier pizzicato
    __pizzicato = p_AttributeUse(p_ExpandedName(None, 'pizzicato'), 'pizzicato', '__AbsentNamespace0_note_pizzicato', _module_typeBindings.yes_no)
    __pizzicato._DeclarationLocation = p_Location('musicxml.xsd', 4250, 2)
    __pizzicato._UseLocation = p_Location('musicxml.xsd', 4250, 2)

    pizzicato = property(__pizzicato.value, __pizzicato.set, None, None)

    _ElementMap.update({
        __grace.name() : __grace,
        __tie.name() : __tie,
        __cue.name() : __cue,
        __instrument.name() : __instrument,
        __type.name() : __type,
        __dot.name() : __dot,
        __accidental.name() : __accidental,
        __time_modification.name() : __time_modification,
        __stem.name() : __stem,
        __notehead.name() : __notehead,
        __notehead_text.name() : __notehead_text,
        __beam.name() : __beam,
        __notations.name() : __notations,
        __lyric.name() : __lyric,
        __play.name() : __play,
        __footnote.name() : __footnote,
        __level.name() : __level,
        __staff.name() : __staff,
        __voice.name() : __voice,
        __duration.name() : __duration,
        __chord.name() : __chord,
        __pitch.name() : __pitch,
        __unpitched.name() : __unpitched,
        __rest.name() : __rest
    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __print_object.name() : __print_object,
        __print_spacing.name() : __print_spacing,
        __print_dot.name() : __print_dot,
        __print_lyric.name() : __print_lyric,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __dynamics.name() : __dynamics,
        __end_dynamics.name() : __end_dynamics,
        __attack.name() : __attack,
        __release.name() : __release,
        __time_only.name() : __time_only,
        __pizzicato.name() : __pizzicato
    })
_module_typeBindings.note = note
Namespace.addCategoryObject('typeBinding', 'note', note)


# Complex type notehead with content type SIMPLE
class notehead (p_complexTypeDefinition):
    _TypeDefinition = notehead_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'notehead')
    _XSDLocation = p_Location('musicxml.xsd', 4264, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is notehead_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_notehead_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_notehead_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_notehead_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_notehead_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_notehead_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute filled uses Python identifier filled
    __filled = p_AttributeUse(p_ExpandedName(None, 'filled'), 'filled', '__AbsentNamespace0_notehead_filled', _module_typeBindings.yes_no)
    __filled._DeclarationLocation = p_Location('musicxml.xsd', 4274, 4)
    __filled._UseLocation = p_Location('musicxml.xsd', 4274, 4)

    filled = property(__filled.value, __filled.set, None, None)


    # Attribute parentheses uses Python identifier parentheses
    __parentheses = p_AttributeUse(p_ExpandedName(None, 'parentheses'), 'parentheses', '__AbsentNamespace0_notehead_parentheses', _module_typeBindings.yes_no)
    __parentheses._DeclarationLocation = p_Location('musicxml.xsd', 4275, 4)
    __parentheses._UseLocation = p_Location('musicxml.xsd', 4275, 4)

    parentheses = property(__parentheses.value, __parentheses.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __filled.name() : __filled,
        __parentheses.name() : __parentheses
    })
_module_typeBindings.notehead = notehead
Namespace.addCategoryObject('typeBinding', 'notehead', notehead)


# Complex type other-notation with content type SIMPLE
class other_notation (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'other-notation')
    _XSDLocation = p_Location('musicxml.xsd', 4362, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_other_notation_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_other_notation_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_other_notation_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_other_notation_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_other_notation_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_other_notation_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_other_notation_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_other_notation_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_other_notation_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_other_notation_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_other_notation_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_other_notation_type', _module_typeBindings.start_stop_single, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4368, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 4368, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_other_notation_number', _module_typeBindings.number_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4369, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 4369, 4)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.other_notation = other_notation
Namespace.addCategoryObject('typeBinding', 'other-notation', other_notation)


# Complex type placement-text with content type SIMPLE
class placement_text (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'placement-text')
    _XSDLocation = p_Location('musicxml.xsd', 4388, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_placement_text_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_placement_text_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_placement_text_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_placement_text_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_placement_text_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_placement_text_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_placement_text_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_placement_text_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_placement_text_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_placement_text_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.placement_text = placement_text
Namespace.addCategoryObject('typeBinding', 'placement-text', placement_text)


# Complex type slide with content type SIMPLE
class slide (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'slide')
    _XSDLocation = p_Location('musicxml.xsd', 4410, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute accelerate uses Python identifier accelerate
    __accelerate = p_AttributeUse(p_ExpandedName(None, 'accelerate'), 'accelerate', '__AbsentNamespace0_slide_accelerate', _module_typeBindings.yes_no)
    __accelerate._DeclarationLocation = p_Location('musicxml.xsd', 1557, 2)
    __accelerate._UseLocation = p_Location('musicxml.xsd', 1557, 2)

    accelerate = property(__accelerate.value, __accelerate.set, None, None)


    # Attribute beats uses Python identifier beats
    __beats = p_AttributeUse(p_ExpandedName(None, 'beats'), 'beats', '__AbsentNamespace0_slide_beats', _module_typeBindings.trill_beats)
    __beats._DeclarationLocation = p_Location('musicxml.xsd', 1558, 2)
    __beats._UseLocation = p_Location('musicxml.xsd', 1558, 2)

    beats = property(__beats.value, __beats.set, None, None)


    # Attribute first-beat uses Python identifier first_beat
    __first_beat = p_AttributeUse(p_ExpandedName(None, 'first-beat'), 'first_beat', '__AbsentNamespace0_slide_first_beat', _module_typeBindings.percent)
    __first_beat._DeclarationLocation = p_Location('musicxml.xsd', 1559, 2)
    __first_beat._UseLocation = p_Location('musicxml.xsd', 1559, 2)

    first_beat = property(__first_beat.value, __first_beat.set, None, None)


    # Attribute last-beat uses Python identifier last_beat
    __last_beat = p_AttributeUse(p_ExpandedName(None, 'last-beat'), 'last_beat', '__AbsentNamespace0_slide_last_beat', _module_typeBindings.percent)
    __last_beat._DeclarationLocation = p_Location('musicxml.xsd', 1560, 2)
    __last_beat._UseLocation = p_Location('musicxml.xsd', 1560, 2)

    last_beat = property(__last_beat.value, __last_beat.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_slide_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute dash-length uses Python identifier dash_length
    __dash_length = p_AttributeUse(p_ExpandedName(None, 'dash-length'), 'dash_length', '__AbsentNamespace0_slide_dash_length', _module_typeBindings.tenths)
    __dash_length._DeclarationLocation = p_Location('musicxml.xsd', 1592, 2)
    __dash_length._UseLocation = p_Location('musicxml.xsd', 1592, 2)

    dash_length = property(__dash_length.value, __dash_length.set, None, None)


    # Attribute space-length uses Python identifier space_length
    __space_length = p_AttributeUse(p_ExpandedName(None, 'space-length'), 'space_length', '__AbsentNamespace0_slide_space_length', _module_typeBindings.tenths)
    __space_length._DeclarationLocation = p_Location('musicxml.xsd', 1593, 2)
    __space_length._UseLocation = p_Location('musicxml.xsd', 1593, 2)

    space_length = property(__space_length.value, __space_length.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_slide_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_slide_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_slide_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_slide_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute line-type uses Python identifier line_type
    __line_type = p_AttributeUse(p_ExpandedName(None, 'line-type'), 'line_type', '__AbsentNamespace0_slide_line_type', _module_typeBindings.line_type)
    __line_type._DeclarationLocation = p_Location('musicxml.xsd', 1684, 2)
    __line_type._UseLocation = p_Location('musicxml.xsd', 1684, 2)

    line_type = property(__line_type.value, __line_type.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_slide_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_slide_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_slide_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_slide_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_slide_type', _module_typeBindings.start_stop, required=True)
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4416, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 4416, 4)

    type = property(__type.value, __type.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_slide_number', _module_typeBindings.number_level, unicode_default='1')
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4417, 4)
    __number._UseLocation = p_Location('musicxml.xsd', 4417, 4)

    number = property(__number.value, __number.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __accelerate.name() : __accelerate,
        __beats.name() : __beats,
        __first_beat.name() : __first_beat,
        __last_beat.name() : __last_beat,
        __color.name() : __color,
        __dash_length.name() : __dash_length,
        __space_length.name() : __space_length,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __line_type.name() : __line_type,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type,
        __number.name() : __number
    })
_module_typeBindings.slide = slide
Namespace.addCategoryObject('typeBinding', 'slide', slide)


# Complex type style-text with content type SIMPLE
class style_text (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'style-text')
    _XSDLocation = p_Location('musicxml.xsd', 4464, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_style_text_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_style_text_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_style_text_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_style_text_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_style_text_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_style_text_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_style_text_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_style_text_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_style_text_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.style_text = style_text
Namespace.addCategoryObject('typeBinding', 'style-text', style_text)


# Complex type text-element-data with content type SIMPLE
class text_element_data (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'text-element-data')
    _XSDLocation = p_Location('musicxml.xsd', 4555, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_text_element_data_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = p_Location('musicxml.xsd', 4566, 4)

    lang = property(__lang.value, __lang.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_text_element_data_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_text_element_data_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_text_element_data_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_text_element_data_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_text_element_data_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = p_AttributeUse(p_ExpandedName(None, 'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_text_element_data_letter_spacing', _module_typeBindings.number_or_normal)
    __letter_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = p_Location('musicxml.xsd', 1654, 2)

    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)


    # Attribute underline uses Python identifier underline
    __underline = p_AttributeUse(p_ExpandedName(None, 'underline'), 'underline', '__AbsentNamespace0_text_element_data_underline', _module_typeBindings.number_of_lines)
    __underline._DeclarationLocation = p_Location('musicxml.xsd', 1788, 2)
    __underline._UseLocation = p_Location('musicxml.xsd', 1788, 2)

    underline = property(__underline.value, __underline.set, None, None)


    # Attribute overline uses Python identifier overline
    __overline = p_AttributeUse(p_ExpandedName(None, 'overline'), 'overline', '__AbsentNamespace0_text_element_data_overline', _module_typeBindings.number_of_lines)
    __overline._DeclarationLocation = p_Location('musicxml.xsd', 1789, 2)
    __overline._UseLocation = p_Location('musicxml.xsd', 1789, 2)

    overline = property(__overline.value, __overline.set, None, None)


    # Attribute line-through uses Python identifier line_through
    __line_through = p_AttributeUse(p_ExpandedName(None, 'line-through'), 'line_through', '__AbsentNamespace0_text_element_data_line_through', _module_typeBindings.number_of_lines)
    __line_through._DeclarationLocation = p_Location('musicxml.xsd', 1790, 2)
    __line_through._UseLocation = p_Location('musicxml.xsd', 1790, 2)

    line_through = property(__line_through.value, __line_through.set, None, None)


    # Attribute dir uses Python identifier dir
    __dir = p_AttributeUse(p_ExpandedName(None, 'dir'), 'dir', '__AbsentNamespace0_text_element_data_dir', _module_typeBindings.text_direction)
    __dir._DeclarationLocation = p_Location('musicxml.xsd', 1797, 2)
    __dir._UseLocation = p_Location('musicxml.xsd', 1797, 2)

    dir = property(__dir.value, __dir.set, None, None)


    # Attribute rotation uses Python identifier rotation
    __rotation = p_AttributeUse(p_ExpandedName(None, 'rotation'), 'rotation', '__AbsentNamespace0_text_element_data_rotation', _module_typeBindings.rotation_degrees)
    __rotation._DeclarationLocation = p_Location('musicxml.xsd', 1820, 2)
    __rotation._UseLocation = p_Location('musicxml.xsd', 1820, 2)

    rotation = property(__rotation.value, __rotation.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __letter_spacing.name() : __letter_spacing,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation
    })
_module_typeBindings.text_element_data = text_element_data
Namespace.addCategoryObject('typeBinding', 'text-element-data', text_element_data)


# Complex type text-font-color with content type SIMPLE
class text_font_color (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'text-font-color')
    _XSDLocation = p_Location('musicxml.xsd', 4572, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute {http://www.w3.org/XML/1998/namespace}lang uses Python identifier lang
    __lang = p_AttributeUse(p_ExpandedName(pyxb.namespace.XML, 'lang'), 'lang', '__AbsentNamespace0_text_font_color_httpwww_w3_orgXML1998namespacelang', pyxb.binding.xml_.STD_ANON_lang)
    __lang._DeclarationLocation = None
    __lang._UseLocation = p_Location('musicxml.xsd', 4583, 4)

    lang = property(__lang.value, __lang.set, None, None)


    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_text_font_color_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_text_font_color_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_text_font_color_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_text_font_color_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_text_font_color_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute letter-spacing uses Python identifier letter_spacing
    __letter_spacing = p_AttributeUse(p_ExpandedName(None, 'letter-spacing'), 'letter_spacing', '__AbsentNamespace0_text_font_color_letter_spacing', _module_typeBindings.number_or_normal)
    __letter_spacing._DeclarationLocation = p_Location('musicxml.xsd', 1654, 2)
    __letter_spacing._UseLocation = p_Location('musicxml.xsd', 1654, 2)

    letter_spacing = property(__letter_spacing.value, __letter_spacing.set, None, None)


    # Attribute underline uses Python identifier underline
    __underline = p_AttributeUse(p_ExpandedName(None, 'underline'), 'underline', '__AbsentNamespace0_text_font_color_underline', _module_typeBindings.number_of_lines)
    __underline._DeclarationLocation = p_Location('musicxml.xsd', 1788, 2)
    __underline._UseLocation = p_Location('musicxml.xsd', 1788, 2)

    underline = property(__underline.value, __underline.set, None, None)


    # Attribute overline uses Python identifier overline
    __overline = p_AttributeUse(p_ExpandedName(None, 'overline'), 'overline', '__AbsentNamespace0_text_font_color_overline', _module_typeBindings.number_of_lines)
    __overline._DeclarationLocation = p_Location('musicxml.xsd', 1789, 2)
    __overline._UseLocation = p_Location('musicxml.xsd', 1789, 2)

    overline = property(__overline.value, __overline.set, None, None)


    # Attribute line-through uses Python identifier line_through
    __line_through = p_AttributeUse(p_ExpandedName(None, 'line-through'), 'line_through', '__AbsentNamespace0_text_font_color_line_through', _module_typeBindings.number_of_lines)
    __line_through._DeclarationLocation = p_Location('musicxml.xsd', 1790, 2)
    __line_through._UseLocation = p_Location('musicxml.xsd', 1790, 2)

    line_through = property(__line_through.value, __line_through.set, None, None)


    # Attribute dir uses Python identifier dir
    __dir = p_AttributeUse(p_ExpandedName(None, 'dir'), 'dir', '__AbsentNamespace0_text_font_color_dir', _module_typeBindings.text_direction)
    __dir._DeclarationLocation = p_Location('musicxml.xsd', 1797, 2)
    __dir._UseLocation = p_Location('musicxml.xsd', 1797, 2)

    dir = property(__dir.value, __dir.set, None, None)


    # Attribute rotation uses Python identifier rotation
    __rotation = p_AttributeUse(p_ExpandedName(None, 'rotation'), 'rotation', '__AbsentNamespace0_text_font_color_rotation', _module_typeBindings.rotation_degrees)
    __rotation._DeclarationLocation = p_Location('musicxml.xsd', 1820, 2)
    __rotation._UseLocation = p_Location('musicxml.xsd', 1820, 2)

    rotation = property(__rotation.value, __rotation.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __lang.name() : __lang,
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __letter_spacing.name() : __letter_spacing,
        __underline.name() : __underline,
        __overline.name() : __overline,
        __line_through.name() : __line_through,
        __dir.name() : __dir,
        __rotation.name() : __rotation
    })
_module_typeBindings.text_font_color = text_font_color
Namespace.addCategoryObject('typeBinding', 'text-font-color', text_font_color)


# Complex type tremolo with content type SIMPLE
class tremolo (p_complexTypeDefinition):
    _TypeDefinition = tremolo_marks
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tremolo')
    _XSDLocation = p_Location('musicxml.xsd', 4644, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is tremolo_marks

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_tremolo_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_tremolo_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_tremolo_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_tremolo_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_tremolo_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute placement uses Python identifier placement
    __placement = p_AttributeUse(p_ExpandedName(None, 'placement'), 'placement', '__AbsentNamespace0_tremolo_placement', _module_typeBindings.above_below)
    __placement._DeclarationLocation = p_Location('musicxml.xsd', 1698, 2)
    __placement._UseLocation = p_Location('musicxml.xsd', 1698, 2)

    placement = property(__placement.value, __placement.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_tremolo_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_tremolo_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_tremolo_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_tremolo_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_tremolo_type', _module_typeBindings.start_stop_single, unicode_default='single')
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4654, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 4654, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __placement.name() : __placement,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __type.name() : __type
    })
_module_typeBindings.tremolo = tremolo
Namespace.addCategoryObject('typeBinding', 'tremolo', tremolo)


# Complex type tuplet-dot with content type EMPTY
class tuplet_dot (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tuplet-dot')
    _XSDLocation = p_Location('musicxml.xsd', 4691, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_tuplet_dot_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_tuplet_dot_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_tuplet_dot_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_tuplet_dot_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_tuplet_dot_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
_module_typeBindings.tuplet_dot = tuplet_dot
Namespace.addCategoryObject('typeBinding', 'tuplet-dot', tuplet_dot)


# Complex type tuplet-number with content type SIMPLE
class tuplet_number (p_complexTypeDefinition):
    _TypeDefinition = p_nonNegativeInteger
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tuplet-number')
    _XSDLocation = p_Location('musicxml.xsd', 4699, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_nonNegativeInteger

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_tuplet_number_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_tuplet_number_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_tuplet_number_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_tuplet_number_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_tuplet_number_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
_module_typeBindings.tuplet_number = tuplet_number
Namespace.addCategoryObject('typeBinding', 'tuplet-number', tuplet_number)


# Complex type tuplet-type with content type SIMPLE
class tuplet_type (p_complexTypeDefinition):
    _TypeDefinition = note_type_value
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'tuplet-type')
    _XSDLocation = p_Location('musicxml.xsd', 4722, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is note_type_value

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_tuplet_type_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_tuplet_type_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_tuplet_type_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_tuplet_type_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_tuplet_type_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
_module_typeBindings.tuplet_type = tuplet_type
Namespace.addCategoryObject('typeBinding', 'tuplet-type', tuplet_type)


# Complex type empty-font with content type EMPTY
class empty_font (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'empty-font')
    _XSDLocation = p_Location('musicxml.xsd', 4790, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_empty_font_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_empty_font_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_empty_font_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_empty_font_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight
    })
_module_typeBindings.empty_font = empty_font
Namespace.addCategoryObject('typeBinding', 'empty-font', empty_font)


# Complex type group-name with content type SIMPLE
class group_name (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'group-name')
    _XSDLocation = p_Location('musicxml.xsd', 4808, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_group_name_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_group_name_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_group_name_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_group_name_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_group_name_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute justify uses Python identifier justify
    __justify = p_AttributeUse(p_ExpandedName(None, 'justify'), 'justify', '__AbsentNamespace0_group_name_justify', _module_typeBindings.left_center_right)
    __justify._DeclarationLocation = p_Location('musicxml.xsd', 1647, 2)
    __justify._UseLocation = p_Location('musicxml.xsd', 1647, 2)

    justify = property(__justify.value, __justify.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_group_name_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_group_name_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_group_name_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_group_name_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __justify.name() : __justify,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y
    })
_module_typeBindings.group_name = group_name
Namespace.addCategoryObject('typeBinding', 'group-name', group_name)


# Complex type lyric-font with content type EMPTY
class lyric_font (p_complexTypeDefinition):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'lyric-font')
    _XSDLocation = p_Location('musicxml.xsd', 4831, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_anyType

    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_lyric_font_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_lyric_font_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_lyric_font_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_lyric_font_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute number uses Python identifier number
    __number = p_AttributeUse(p_ExpandedName(None, 'number'), 'number', '__AbsentNamespace0_lyric_font_number', p_NMTOKEN)
    __number._DeclarationLocation = p_Location('musicxml.xsd', 4835, 2)
    __number._UseLocation = p_Location('musicxml.xsd', 4835, 2)

    number = property(__number.value, __number.set, None, None)


    # Attribute name uses Python identifier name
    __name = p_AttributeUse(p_ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_lyric_font_name', p_token)
    __name._DeclarationLocation = p_Location('musicxml.xsd', 4836, 2)
    __name._UseLocation = p_Location('musicxml.xsd', 4836, 2)

    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __number.name() : __number,
        __name.name() : __name
    })
_module_typeBindings.lyric_font = lyric_font
Namespace.addCategoryObject('typeBinding', 'lyric-font', lyric_font)


# Complex type part-name with content type SIMPLE
class part_name (p_complexTypeDefinition):
    _TypeDefinition = p_string
    _ContentTypeTag = p_complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'part-name')
    _XSDLocation = p_Location('musicxml.xsd', 4904, 1)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is p_string

    # Attribute color uses Python identifier color
    __color = p_AttributeUse(p_ExpandedName(None, 'color'), 'color', '__AbsentNamespace0_part_name_color', _module_typeBindings.color)
    __color._DeclarationLocation = p_Location('musicxml.xsd', 1585, 2)
    __color._UseLocation = p_Location('musicxml.xsd', 1585, 2)

    color = property(__color.value, __color.set, None, None)


    # Attribute font-family uses Python identifier font_family
    __font_family = p_AttributeUse(p_ExpandedName(None, 'font-family'), 'font_family', '__AbsentNamespace0_part_name_font_family', _module_typeBindings.comma_separated_text)
    __font_family._DeclarationLocation = p_Location('musicxml.xsd', 1623, 2)
    __font_family._UseLocation = p_Location('musicxml.xsd', 1623, 2)

    font_family = property(__font_family.value, __font_family.set, None, None)


    # Attribute font-style uses Python identifier font_style
    __font_style = p_AttributeUse(p_ExpandedName(None, 'font-style'), 'font_style', '__AbsentNamespace0_part_name_font_style', _module_typeBindings.font_style)
    __font_style._DeclarationLocation = p_Location('musicxml.xsd', 1624, 2)
    __font_style._UseLocation = p_Location('musicxml.xsd', 1624, 2)

    font_style = property(__font_style.value, __font_style.set, None, None)


    # Attribute font-size uses Python identifier font_size
    __font_size = p_AttributeUse(p_ExpandedName(None, 'font-size'), 'font_size', '__AbsentNamespace0_part_name_font_size', _module_typeBindings.font_size)
    __font_size._DeclarationLocation = p_Location('musicxml.xsd', 1625, 2)
    __font_size._UseLocation = p_Location('musicxml.xsd', 1625, 2)

    font_size = property(__font_size.value, __font_size.set, None, None)


    # Attribute font-weight uses Python identifier font_weight
    __font_weight = p_AttributeUse(p_ExpandedName(None, 'font-weight'), 'font_weight', '__AbsentNamespace0_part_name_font_weight', _module_typeBindings.font_weight)
    __font_weight._DeclarationLocation = p_Location('musicxml.xsd', 1626, 2)
    __font_weight._UseLocation = p_Location('musicxml.xsd', 1626, 2)

    font_weight = property(__font_weight.value, __font_weight.set, None, None)


    # Attribute justify uses Python identifier justify
    __justify = p_AttributeUse(p_ExpandedName(None, 'justify'), 'justify', '__AbsentNamespace0_part_name_justify', _module_typeBindings.left_center_right)
    __justify._DeclarationLocation = p_Location('musicxml.xsd', 1647, 2)
    __justify._UseLocation = p_Location('musicxml.xsd', 1647, 2)

    justify = property(__justify.value, __justify.set, None, None)


    # Attribute default-x uses Python identifier default_x
    __default_x = p_AttributeUse(p_ExpandedName(None, 'default-x'), 'default_x', '__AbsentNamespace0_part_name_default_x', _module_typeBindings.tenths)
    __default_x._DeclarationLocation = p_Location('musicxml.xsd', 1734, 2)
    __default_x._UseLocation = p_Location('musicxml.xsd', 1734, 2)

    default_x = property(__default_x.value, __default_x.set, None, None)


    # Attribute default-y uses Python identifier default_y
    __default_y = p_AttributeUse(p_ExpandedName(None, 'default-y'), 'default_y', '__AbsentNamespace0_part_name_default_y', _module_typeBindings.tenths)
    __default_y._DeclarationLocation = p_Location('musicxml.xsd', 1735, 2)
    __default_y._UseLocation = p_Location('musicxml.xsd', 1735, 2)

    default_y = property(__default_y.value, __default_y.set, None, None)


    # Attribute relative-x uses Python identifier relative_x
    __relative_x = p_AttributeUse(p_ExpandedName(None, 'relative-x'), 'relative_x', '__AbsentNamespace0_part_name_relative_x', _module_typeBindings.tenths)
    __relative_x._DeclarationLocation = p_Location('musicxml.xsd', 1736, 2)
    __relative_x._UseLocation = p_Location('musicxml.xsd', 1736, 2)

    relative_x = property(__relative_x.value, __relative_x.set, None, None)


    # Attribute relative-y uses Python identifier relative_y
    __relative_y = p_AttributeUse(p_ExpandedName(None, 'relative-y'), 'relative_y', '__AbsentNamespace0_part_name_relative_y', _module_typeBindings.tenths)
    __relative_y._DeclarationLocation = p_Location('musicxml.xsd', 1737, 2)
    __relative_y._UseLocation = p_Location('musicxml.xsd', 1737, 2)

    relative_y = property(__relative_y.value, __relative_y.set, None, None)


    # Attribute print-object uses Python identifier print_object
    __print_object = p_AttributeUse(p_ExpandedName(None, 'print-object'), 'print_object', '__AbsentNamespace0_part_name_print_object', _module_typeBindings.yes_no)
    __print_object._DeclarationLocation = p_Location('musicxml.xsd', 1744, 2)
    __print_object._UseLocation = p_Location('musicxml.xsd', 1744, 2)

    print_object = property(__print_object.value, __print_object.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __color.name() : __color,
        __font_family.name() : __font_family,
        __font_style.name() : __font_style,
        __font_size.name() : __font_size,
        __font_weight.name() : __font_weight,
        __justify.name() : __justify,
        __default_x.name() : __default_x,
        __default_y.name() : __default_y,
        __relative_x.name() : __relative_x,
        __relative_y.name() : __relative_y,
        __print_object.name() : __print_object
    })
_module_typeBindings.part_name = part_name
Namespace.addCategoryObject('typeBinding', 'part-name', part_name)


# Complex type heel-toe with content type EMPTY
class heel_toe (empty_placement):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'heel-toe')
    _XSDLocation = p_Location('musicxml.xsd', 4043, 1)
    _ElementMap = empty_placement._ElementMap.copy()
    _AttributeMap = empty_placement._AttributeMap.copy()
    # Base type is empty_placement

    # Attribute color inherited from empty-placement

    # Attribute font_family inherited from empty-placement

    # Attribute font_style inherited from empty-placement

    # Attribute font_size inherited from empty-placement

    # Attribute font_weight inherited from empty-placement

    # Attribute placement inherited from empty-placement

    # Attribute default_x inherited from empty-placement

    # Attribute default_y inherited from empty-placement

    # Attribute relative_x inherited from empty-placement

    # Attribute relative_y inherited from empty-placement

    # Attribute substitution uses Python identifier substitution
    __substitution = p_AttributeUse(p_ExpandedName(None, 'substitution'), 'substitution', '__AbsentNamespace0_heel_toe_substitution', _module_typeBindings.yes_no)
    __substitution._DeclarationLocation = p_Location('musicxml.xsd', 4049, 4)
    __substitution._UseLocation = p_Location('musicxml.xsd', 4049, 4)

    substitution = property(__substitution.value, __substitution.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __substitution.name() : __substitution
    })
_module_typeBindings.heel_toe = heel_toe
Namespace.addCategoryObject('typeBinding', 'heel-toe', heel_toe)


# Complex type mordent with content type EMPTY
class mordent (empty_trill_sound):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'mordent')
    _XSDLocation = p_Location('musicxml.xsd', 4144, 1)
    _ElementMap = empty_trill_sound._ElementMap.copy()
    _AttributeMap = empty_trill_sound._AttributeMap.copy()
    # Base type is empty_trill_sound

    # Attribute color inherited from empty-trill-sound

    # Attribute font_family inherited from empty-trill-sound

    # Attribute font_style inherited from empty-trill-sound

    # Attribute font_size inherited from empty-trill-sound

    # Attribute font_weight inherited from empty-trill-sound

    # Attribute placement inherited from empty-trill-sound

    # Attribute default_x inherited from empty-trill-sound

    # Attribute default_y inherited from empty-trill-sound

    # Attribute relative_x inherited from empty-trill-sound

    # Attribute relative_y inherited from empty-trill-sound

    # Attribute start_note inherited from empty-trill-sound

    # Attribute trill_step inherited from empty-trill-sound

    # Attribute two_note_turn inherited from empty-trill-sound

    # Attribute accelerate inherited from empty-trill-sound

    # Attribute beats inherited from empty-trill-sound

    # Attribute second_beat inherited from empty-trill-sound

    # Attribute last_beat inherited from empty-trill-sound

    # Attribute long uses Python identifier long
    __long = p_AttributeUse(p_ExpandedName(None, 'long'), 'long', '__AbsentNamespace0_mordent_long', _module_typeBindings.yes_no)
    __long._DeclarationLocation = p_Location('musicxml.xsd', 4150, 4)
    __long._UseLocation = p_Location('musicxml.xsd', 4150, 4)

    long = property(__long.value, __long.set, None, None)


    # Attribute approach uses Python identifier approach
    __approach = p_AttributeUse(p_ExpandedName(None, 'approach'), 'approach', '__AbsentNamespace0_mordent_approach', _module_typeBindings.above_below)
    __approach._DeclarationLocation = p_Location('musicxml.xsd', 4151, 4)
    __approach._UseLocation = p_Location('musicxml.xsd', 4151, 4)

    approach = property(__approach.value, __approach.set, None, None)


    # Attribute departure uses Python identifier departure
    __departure = p_AttributeUse(p_ExpandedName(None, 'departure'), 'departure', '__AbsentNamespace0_mordent_departure', _module_typeBindings.above_below)
    __departure._DeclarationLocation = p_Location('musicxml.xsd', 4152, 4)
    __departure._UseLocation = p_Location('musicxml.xsd', 4152, 4)

    departure = property(__departure.value, __departure.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __long.name() : __long,
        __approach.name() : __approach,
        __departure.name() : __departure
    })
_module_typeBindings.mordent = mordent
Namespace.addCategoryObject('typeBinding', 'mordent', mordent)


# Complex type strong-accent with content type EMPTY
class strong_accent (empty_placement):
    _TypeDefinition = None
    _ContentTypeTag = p_complexTypeDefinition._CT_EMPTY
    _Abstract = False
    _ExpandedName = p_ExpandedName(Namespace, 'strong-accent')
    _XSDLocation = p_Location('musicxml.xsd', 4453, 1)
    _ElementMap = empty_placement._ElementMap.copy()
    _AttributeMap = empty_placement._AttributeMap.copy()
    # Base type is empty_placement

    # Attribute color inherited from empty-placement

    # Attribute font_family inherited from empty-placement

    # Attribute font_style inherited from empty-placement

    # Attribute font_size inherited from empty-placement

    # Attribute font_weight inherited from empty-placement

    # Attribute placement inherited from empty-placement

    # Attribute default_x inherited from empty-placement

    # Attribute default_y inherited from empty-placement

    # Attribute relative_x inherited from empty-placement

    # Attribute relative_y inherited from empty-placement

    # Attribute type uses Python identifier type
    __type = p_AttributeUse(p_ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_strong_accent_type', _module_typeBindings.up_down, unicode_default='up')
    __type._DeclarationLocation = p_Location('musicxml.xsd', 4459, 4)
    __type._UseLocation = p_Location('musicxml.xsd', 4459, 4)

    type = property(__type.value, __type.set, None, None)

    _ElementMap.update({

    })
    _AttributeMap.update({
        __type.name() : __type
    })
_module_typeBindings.strong_accent = strong_accent
Namespace.addCategoryObject('typeBinding', 'strong-accent', strong_accent)


score_partwise = p_element(p_ExpandedName(Namespace, 'score-partwise'), CTD_ANON, documentation='The score-partwise element is the root element for a partwise MusicXML score. It includes a score-header group followed by a series of parts with measures inside. The document-attributes attribute group includes the version attribute.', location=p_Location('musicxml.xsd', 5378, 1))
Namespace.addCategoryObject('elementBinding', score_partwise.name().localName(), score_partwise)

score_timewise = p_element(p_ExpandedName(Namespace, 'score-timewise'), CTD_ANON_2, documentation='The score-timewise element is the root element for a timewise MusicXML score. It includes a score-header group followed by a series of measures with parts inside. The document-attributes attribute group includes the version attribute.', location=p_Location('musicxml.xsd', 5403, 1))
Namespace.addCategoryObject('elementBinding', score_timewise.name().localName(), score_timewise)



midi_instrument._AddElement(p_element(p_ExpandedName(None, 'midi-channel'), midi_16, scope=midi_instrument, documentation='The midi-channel element specifies a MIDI 1.0 channel numbers ranging from 1 to 16.', location=p_Location('musicxml.xsd', 2162, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'midi-name'), p_string, scope=midi_instrument, documentation='The midi-name element corresponds to a ProgramName meta-event within a Standard MIDI File.', location=p_Location('musicxml.xsd', 2167, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'midi-bank'), midi_16384, scope=midi_instrument, documentation='The midi-bank element specified a MIDI 1.0 bank number ranging from 1 to 16,384.', location=p_Location('musicxml.xsd', 2172, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'midi-program'), midi_128, scope=midi_instrument, documentation='The midi-program element specifies a MIDI 1.0 program number ranging from 1 to 128.', location=p_Location('musicxml.xsd', 2177, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'midi-unpitched'), midi_128, scope=midi_instrument, documentation='For unpitched instruments, the midi-unpitched element specifies a MIDI 1.0 note number ranging from 1 to 128. It is usually used with MIDI banks for percussion. Note that MIDI 1.0 note numbers are generally specified from 0 to 127 rather than the 1 to 128 numbering used in this element.', location=p_Location('musicxml.xsd', 2182, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'volume'), percent, scope=midi_instrument, documentation='The volume element value is a percentage of the maximum ranging from 0 to 100, with decimal values allowed. This corresponds to a scaling value for the MIDI 1.0 channel volume controller.', location=p_Location('musicxml.xsd', 2187, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'pan'), rotation_degrees, scope=midi_instrument, documentation='The pan and elevation elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For pan, 0 is straight ahead, -90 is hard left, 90 is hard right, and -180 and 180 are directly behind the listener.', location=p_Location('musicxml.xsd', 2192, 3)))

midi_instrument._AddElement(p_element(p_ExpandedName(None, 'elevation'), rotation_degrees, scope=midi_instrument, documentation='The elevation and pan elements allow placing of sound in a 3-D space relative to the listener. Both are expressed in degrees ranging from -180 to 180. For elevation, 0 is level with the listener, 90 is directly above, and -90 is directly below.', location=p_Location('musicxml.xsd', 2197, 3)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2162, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2167, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2172, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2177, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2182, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2187, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2192, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2197, 3))
    counters.add(cc_7)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'midi-channel')), p_Location('musicxml.xsd', 2162, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'midi-name')), p_Location('musicxml.xsd', 2167, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'midi-bank')), p_Location('musicxml.xsd', 2172, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'midi-program')), p_Location('musicxml.xsd', 2177, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'midi-unpitched')), p_Location('musicxml.xsd', 2182, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'volume')), p_Location('musicxml.xsd', 2187, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'pan')), p_Location('musicxml.xsd', 2192, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(midi_instrument._UseForTag(p_ExpandedName(None, 'elevation')), p_Location('musicxml.xsd', 2197, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
midi_instrument._Automaton = _BuildAutomaton()




play._AddElement(p_element(p_ExpandedName(None, 'ipa'), p_string, scope=play, documentation='The ipa element represents International Phonetic Alphabet (IPA) sounds for vocal music. String content is limited to IPA 2005 symbols represented in Unicode 6.0.', location=p_Location('musicxml.xsd', 2236, 4)))

play._AddElement(p_element(p_ExpandedName(None, 'mute'), mute, scope=play, location=p_Location('musicxml.xsd', 2241, 4)))

play._AddElement(p_element(p_ExpandedName(None, 'semi-pitched'), semi_pitched, scope=play, location=p_Location('musicxml.xsd', 2242, 4)))

play._AddElement(p_element(p_ExpandedName(None, 'other-play'), other_play, scope=play, location=p_Location('musicxml.xsd', 2243, 4)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2235, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(play._UseForTag(p_ExpandedName(None, 'ipa')), p_Location('musicxml.xsd', 2236, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(play._UseForTag(p_ExpandedName(None, 'mute')), p_Location('musicxml.xsd', 2241, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(play._UseForTag(p_ExpandedName(None, 'semi-pitched')), p_Location('musicxml.xsd', 2242, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(play._UseForTag(p_ExpandedName(None, 'other-play')), p_Location('musicxml.xsd', 2243, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
play._Automaton = _BuildAutomaton_()




attributes._AddElement(p_element(p_ExpandedName(None, 'divisions'), positive_divisions, scope=attributes, documentation="Musical notation duration is commonly represented as fractions. The divisions element indicates how many divisions per quarter note are used to indicate a note's duration. For example, if duration = 1 and divisions = 2, this is an eighth note duration. Duration and divisions are used directly for generating sound output, so they must be chosen to take tuplets into account. Using a divisions element lets us use just one number to represent a duration for each note in the score, while retaining the full power of a fractional representation. If maximum compatibility with Standard MIDI 1.0 files is important, do not have the divisions value exceed 16383.", location=p_Location('musicxml.xsd', 2293, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'key'), key, scope=attributes, documentation='The key element represents a key signature. Both traditional and non-traditional key signatures are supported. The optional number attribute refers to staff numbers. If absent, the key signature applies to all staves in the part.', location=p_Location('musicxml.xsd', 2299, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'time'), time, scope=attributes, documentation='Time signatures are represented by the beats element for the numerator and the beat-type element for the denominator.', location=p_Location('musicxml.xsd', 2305, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'staves'), p_nonNegativeInteger, scope=attributes, documentation='The staves element is used if there is more than one staff represented in the given part (e.g., 2 staves for typical piano parts). If absent, a value of 1 is assumed. Staves are ordered from top to bottom in a part in numerical order, with staff 1 above staff 2.', location=p_Location('musicxml.xsd', 2311, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'part-symbol'), part_symbol, scope=attributes, documentation='The part-symbol element indicates how a symbol for a multi-staff part is indicated in the score.', location=p_Location('musicxml.xsd', 2317, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'instruments'), p_nonNegativeInteger, scope=attributes, documentation='The instruments element is only used if more than one instrument is represented in the part (e.g., oboe I and II where they play together most of the time). If absent, a value of 1 is assumed.', location=p_Location('musicxml.xsd', 2323, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'clef'), clef, scope=attributes, documentation='Clefs are represented by a combination of sign, line, and clef-octave-change elements.', location=p_Location('musicxml.xsd', 2329, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'staff-details'), staff_details, scope=attributes, documentation='The staff-details element is used to indicate different types of staves.', location=p_Location('musicxml.xsd', 2335, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'transpose'), transpose, scope=attributes, documentation='If the part is being encoded for a transposing instrument in written vs. concert pitch, the transposition must be encoded in the transpose element using the transpose type.', location=p_Location('musicxml.xsd', 2341, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'directive'), CTD_ANON_6, scope=attributes, documentation='Directives are like directions, but can be grouped together with attributes for convenience. This is typically used for tempo markings at the beginning of a piece of music. This element has been deprecated in Version 2.0 in favor of the directive attribute for direction elements. Language names come from ISO 639, with optional country subcodes from ISO 3166.', location=p_Location('musicxml.xsd', 2347, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'measure-style'), measure_style, scope=attributes, documentation='A measure-style indicates a special way to print partial to multiple measures within a part. This includes multiple rests over several measures, repeats of beats, single, or multiple measures, and use of slash notation.', location=p_Location('musicxml.xsd', 2361, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=attributes, location=p_Location('musicxml.xsd', 5054, 3)))

attributes._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=attributes, location=p_Location('musicxml.xsd', 5063, 3)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2293, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2299, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2305, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2311, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2317, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2323, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2329, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2335, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2341, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2347, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2361, 3))
    counters.add(cc_12)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'divisions')), p_Location('musicxml.xsd', 2293, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'key')), p_Location('musicxml.xsd', 2299, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'time')), p_Location('musicxml.xsd', 2305, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'staves')), p_Location('musicxml.xsd', 2311, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'part-symbol')), p_Location('musicxml.xsd', 2317, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'instruments')), p_Location('musicxml.xsd', 2323, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'clef')), p_Location('musicxml.xsd', 2329, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'staff-details')), p_Location('musicxml.xsd', 2335, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'transpose')), p_Location('musicxml.xsd', 2341, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'directive')), p_Location('musicxml.xsd', 2347, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = p_ElementUse(attributes._UseForTag(p_ExpandedName(None, 'measure-style')), p_Location('musicxml.xsd', 2361, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
attributes._Automaton = _BuildAutomaton_2()




bass._AddElement(p_element(p_ExpandedName(None, 'bass-step'), bass_step, scope=bass, location=p_Location('musicxml.xsd', 2738, 3)))

bass._AddElement(p_element(p_ExpandedName(None, 'bass-alter'), bass_alter, scope=bass, location=p_Location('musicxml.xsd', 2739, 3)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2739, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = p_ElementUse(bass._UseForTag(p_ExpandedName(None, 'bass-step')), p_Location('musicxml.xsd', 2738, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(bass._UseForTag(p_ExpandedName(None, 'bass-alter')), p_Location('musicxml.xsd', 2739, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bass._Automaton = _BuildAutomaton_3()




direction_type._AddElement(p_element(p_ExpandedName(None, 'rehearsal'), formatted_text, scope=direction_type, documentation='The rehearsal type specifies a rehearsal mark. Language is Italian ("it") by default. Enclosure is square by default. Left justification is assumed if not specified.', location=p_Location('musicxml.xsd', 2877, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'segno'), empty_print_style_align, scope=direction_type, documentation='The segno element is the visual indicator of a segno sign. A sound element is needed to guide playback applications reliably.', location=p_Location('musicxml.xsd', 2882, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'words'), formatted_text, scope=direction_type, documentation='The words element specifies a standard text direction. Left justification is assumed if not specified. Language is Italian ("it") by default. Enclosure is none by default.', location=p_Location('musicxml.xsd', 2887, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'coda'), empty_print_style_align, scope=direction_type, documentation='The coda element is the visual indicator of a coda sign. A sound element is needed to guide playback applications reliably.', location=p_Location('musicxml.xsd', 2892, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'wedge'), wedge, scope=direction_type, location=p_Location('musicxml.xsd', 2897, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'dynamics'), dynamics, scope=direction_type, location=p_Location('musicxml.xsd', 2898, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'dashes'), dashes, scope=direction_type, location=p_Location('musicxml.xsd', 2899, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'bracket'), bracket, scope=direction_type, location=p_Location('musicxml.xsd', 2900, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'pedal'), pedal, scope=direction_type, location=p_Location('musicxml.xsd', 2901, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'metronome'), metronome, scope=direction_type, location=p_Location('musicxml.xsd', 2902, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'octave-shift'), octave_shift, scope=direction_type, location=p_Location('musicxml.xsd', 2903, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'harp-pedals'), harp_pedals, scope=direction_type, location=p_Location('musicxml.xsd', 2904, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'damp'), empty_print_style_align, scope=direction_type, documentation='The damp element specifies a harp damping mark.', location=p_Location('musicxml.xsd', 2905, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'damp-all'), empty_print_style_align, scope=direction_type, documentation='The damp-all element specifies a harp damping mark for all strings.', location=p_Location('musicxml.xsd', 2910, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'eyeglasses'), empty_print_style_align, scope=direction_type, documentation='The eyeglasses element specifies the eyeglasses symbol, common in commercial music.', location=p_Location('musicxml.xsd', 2915, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'string-mute'), string_mute, scope=direction_type, location=p_Location('musicxml.xsd', 2920, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'scordatura'), scordatura, scope=direction_type, location=p_Location('musicxml.xsd', 2921, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'image'), image, scope=direction_type, location=p_Location('musicxml.xsd', 2922, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'principal-voice'), principal_voice, scope=direction_type, location=p_Location('musicxml.xsd', 2923, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'accordion-registration'), accordion_registration, scope=direction_type, location=p_Location('musicxml.xsd', 2924, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'percussion'), percussion, scope=direction_type, location=p_Location('musicxml.xsd', 2925, 3)))

direction_type._AddElement(p_element(p_ExpandedName(None, 'other-direction'), other_direction, scope=direction_type, location=p_Location('musicxml.xsd', 2926, 3)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'rehearsal')), p_Location('musicxml.xsd', 2877, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'segno')), p_Location('musicxml.xsd', 2882, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'words')), p_Location('musicxml.xsd', 2887, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'coda')), p_Location('musicxml.xsd', 2892, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'wedge')), p_Location('musicxml.xsd', 2897, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'dynamics')), p_Location('musicxml.xsd', 2898, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'dashes')), p_Location('musicxml.xsd', 2899, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'bracket')), p_Location('musicxml.xsd', 2900, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'pedal')), p_Location('musicxml.xsd', 2901, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'metronome')), p_Location('musicxml.xsd', 2902, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'octave-shift')), p_Location('musicxml.xsd', 2903, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'harp-pedals')), p_Location('musicxml.xsd', 2904, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'damp')), p_Location('musicxml.xsd', 2905, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'damp-all')), p_Location('musicxml.xsd', 2910, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'eyeglasses')), p_Location('musicxml.xsd', 2915, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'string-mute')), p_Location('musicxml.xsd', 2920, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'scordatura')), p_Location('musicxml.xsd', 2921, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'image')), p_Location('musicxml.xsd', 2922, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'principal-voice')), p_Location('musicxml.xsd', 2923, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'accordion-registration')), p_Location('musicxml.xsd', 2924, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'percussion')), p_Location('musicxml.xsd', 2925, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = p_ElementUse(direction_type._UseForTag(p_ExpandedName(None, 'other-direction')), p_Location('musicxml.xsd', 2926, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    transitions = []
    st_15._set_transitionSet(transitions)
    transitions = []
    st_16._set_transitionSet(transitions)
    transitions = []
    st_17._set_transitionSet(transitions)
    transitions = []
    st_18._set_transitionSet(transitions)
    transitions = []
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
direction_type._Automaton = _BuildAutomaton_4()




frame_note._AddElement(p_element(p_ExpandedName(None, 'string'), string, scope=frame_note, location=p_Location('musicxml.xsd', 2985, 3)))

frame_note._AddElement(p_element(p_ExpandedName(None, 'fret'), fret, scope=frame_note, location=p_Location('musicxml.xsd', 2986, 3)))

frame_note._AddElement(p_element(p_ExpandedName(None, 'fingering'), fingering, scope=frame_note, location=p_Location('musicxml.xsd', 2987, 3)))

frame_note._AddElement(p_element(p_ExpandedName(None, 'barre'), barre, scope=frame_note, location=p_Location('musicxml.xsd', 2988, 3)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2987, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2988, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = p_ElementUse(frame_note._UseForTag(p_ExpandedName(None, 'string')), p_Location('musicxml.xsd', 2985, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(frame_note._UseForTag(p_ExpandedName(None, 'fret')), p_Location('musicxml.xsd', 2986, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(frame_note._UseForTag(p_ExpandedName(None, 'fingering')), p_Location('musicxml.xsd', 2987, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(frame_note._UseForTag(p_ExpandedName(None, 'barre')), p_Location('musicxml.xsd', 2988, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
frame_note._Automaton = _BuildAutomaton_5()




metronome_note._AddElement(p_element(p_ExpandedName(None, 'metronome-type'), note_type_value, scope=metronome_note, documentation='The metronome-type element works like the type element in defining metric relationships.', location=p_Location('musicxml.xsd', 3144, 3)))

metronome_note._AddElement(p_element(p_ExpandedName(None, 'metronome-dot'), empty, scope=metronome_note, documentation='The metronome-dot element works like the dot element in defining metric relationships.', location=p_Location('musicxml.xsd', 3149, 3)))

metronome_note._AddElement(p_element(p_ExpandedName(None, 'metronome-beam'), metronome_beam, scope=metronome_note, location=p_Location('musicxml.xsd', 3154, 3)))

metronome_note._AddElement(p_element(p_ExpandedName(None, 'metronome-tuplet'), metronome_tuplet, scope=metronome_note, location=p_Location('musicxml.xsd', 3155, 3)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3149, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3154, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3155, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = p_ElementUse(metronome_note._UseForTag(p_ExpandedName(None, 'metronome-type')), p_Location('musicxml.xsd', 3144, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(metronome_note._UseForTag(p_ExpandedName(None, 'metronome-dot')), p_Location('musicxml.xsd', 3149, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(metronome_note._UseForTag(p_ExpandedName(None, 'metronome-beam')), p_Location('musicxml.xsd', 3154, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(metronome_note._UseForTag(p_ExpandedName(None, 'metronome-tuplet')), p_Location('musicxml.xsd', 3155, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
metronome_note._Automaton = _BuildAutomaton_6()




pedal_tuning._AddElement(p_element(p_ExpandedName(None, 'pedal-step'), step, scope=pedal_tuning, documentation='The pedal-step element defines the pitch step for a single harp pedal.', location=p_Location('musicxml.xsd', 3221, 3)))

pedal_tuning._AddElement(p_element(p_ExpandedName(None, 'pedal-alter'), semitones, scope=pedal_tuning, documentation='The pedal-alter element defines the chromatic alteration for a single harp pedal.', location=p_Location('musicxml.xsd', 3226, 3)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(pedal_tuning._UseForTag(p_ExpandedName(None, 'pedal-step')), p_Location('musicxml.xsd', 3221, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(pedal_tuning._UseForTag(p_ExpandedName(None, 'pedal-alter')), p_Location('musicxml.xsd', 3226, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pedal_tuning._Automaton = _BuildAutomaton_7()




root._AddElement(p_element(p_ExpandedName(None, 'root-step'), root_step, scope=root, location=p_Location('musicxml.xsd', 3300, 3)))

root._AddElement(p_element(p_ExpandedName(None, 'root-alter'), root_alter, scope=root, location=p_Location('musicxml.xsd', 3301, 3)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3301, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = p_ElementUse(root._UseForTag(p_ExpandedName(None, 'root-step')), p_Location('musicxml.xsd', 3300, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(root._UseForTag(p_ExpandedName(None, 'root-alter')), p_Location('musicxml.xsd', 3301, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
root._Automaton = _BuildAutomaton_8()




scordatura._AddElement(p_element(p_ExpandedName(None, 'accord'), accord, scope=scordatura, location=p_Location('musicxml.xsd', 3335, 3)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(scordatura._UseForTag(p_ExpandedName(None, 'accord')), p_Location('musicxml.xsd', 3335, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
scordatura._Automaton = _BuildAutomaton_9()




encoding._AddElement(p_element(p_ExpandedName(None, 'encoding-date'), yyyy_mm_dd, scope=encoding, location=p_Location('musicxml.xsd', 3436, 3)))

encoding._AddElement(p_element(p_ExpandedName(None, 'encoder'), typed_text, scope=encoding, location=p_Location('musicxml.xsd', 3437, 3)))

encoding._AddElement(p_element(p_ExpandedName(None, 'software'), p_string, scope=encoding, location=p_Location('musicxml.xsd', 3438, 3)))

encoding._AddElement(p_element(p_ExpandedName(None, 'encoding-description'), p_string, scope=encoding, location=p_Location('musicxml.xsd', 3439, 3)))

encoding._AddElement(p_element(p_ExpandedName(None, 'supports'), supports, scope=encoding, location=p_Location('musicxml.xsd', 3440, 3)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3435, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(encoding._UseForTag(p_ExpandedName(None, 'encoding-date')), p_Location('musicxml.xsd', 3436, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(encoding._UseForTag(p_ExpandedName(None, 'encoder')), p_Location('musicxml.xsd', 3437, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(encoding._UseForTag(p_ExpandedName(None, 'software')), p_Location('musicxml.xsd', 3438, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(encoding._UseForTag(p_ExpandedName(None, 'encoding-description')), p_Location('musicxml.xsd', 3439, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(encoding._UseForTag(p_ExpandedName(None, 'supports')), p_Location('musicxml.xsd', 3440, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
encoding._Automaton = _BuildAutomaton_10()




identification._AddElement(p_element(p_ExpandedName(None, 'creator'), typed_text, scope=identification, documentation='The creator element is borrowed from Dublin Core. It is used for the creators of the score. The type attribute is used to distinguish different creative contributions. Thus, there can be multiple creators within an identification. Standard type values are composer, lyricist, and arranger. Other type values may be used for different types of creative roles. The type attribute should usually be used even if there is just a single creator element. The MusicXML format does not use the creator / contributor distinction from Dublin Core.', location=p_Location('musicxml.xsd', 3449, 3)))

identification._AddElement(p_element(p_ExpandedName(None, 'rights'), typed_text, scope=identification, documentation='The rights element is borrowed from Dublin Core. It contains copyright and other intellectual property notices. Words, music, and derivatives can have different types, so multiple rights tags with different type attributes are supported. Standard type values are music, words, and arrangement, but other types may be used. The type attribute is only needed when there are multiple rights elements.', location=p_Location('musicxml.xsd', 3454, 3)))

identification._AddElement(p_element(p_ExpandedName(None, 'encoding'), encoding, scope=identification, location=p_Location('musicxml.xsd', 3459, 3)))

identification._AddElement(p_element(p_ExpandedName(None, 'source'), p_string, scope=identification, documentation='The source for the music that is encoded. This is similar to the Dublin Core source element.', location=p_Location('musicxml.xsd', 3460, 3)))

identification._AddElement(p_element(p_ExpandedName(None, 'relation'), typed_text, scope=identification, documentation='A related resource for the music that is encoded. This is similar to the Dublin Core relation element. Standard type values are music, words, and arrangement, but other types may be used.', location=p_Location('musicxml.xsd', 3465, 3)))

identification._AddElement(p_element(p_ExpandedName(None, 'miscellaneous'), miscellaneous, scope=identification, location=p_Location('musicxml.xsd', 3470, 3)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3449, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3454, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3459, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3460, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3465, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3470, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(identification._UseForTag(p_ExpandedName(None, 'creator')), p_Location('musicxml.xsd', 3449, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(identification._UseForTag(p_ExpandedName(None, 'rights')), p_Location('musicxml.xsd', 3454, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(identification._UseForTag(p_ExpandedName(None, 'encoding')), p_Location('musicxml.xsd', 3459, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(identification._UseForTag(p_ExpandedName(None, 'source')), p_Location('musicxml.xsd', 3460, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(identification._UseForTag(p_ExpandedName(None, 'relation')), p_Location('musicxml.xsd', 3465, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(identification._UseForTag(p_ExpandedName(None, 'miscellaneous')), p_Location('musicxml.xsd', 3470, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
identification._Automaton = _BuildAutomaton_11()




miscellaneous._AddElement(p_element(p_ExpandedName(None, 'miscellaneous-field'), miscellaneous_field, scope=miscellaneous, location=p_Location('musicxml.xsd', 3479, 3)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3479, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(miscellaneous._UseForTag(p_ExpandedName(None, 'miscellaneous-field')), p_Location('musicxml.xsd', 3479, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
miscellaneous._Automaton = _BuildAutomaton_12()




appearance._AddElement(p_element(p_ExpandedName(None, 'line-width'), line_width, scope=appearance, location=p_Location('musicxml.xsd', 3511, 3)))

appearance._AddElement(p_element(p_ExpandedName(None, 'note-size'), note_size, scope=appearance, location=p_Location('musicxml.xsd', 3512, 3)))

appearance._AddElement(p_element(p_ExpandedName(None, 'distance'), distance, scope=appearance, location=p_Location('musicxml.xsd', 3513, 3)))

appearance._AddElement(p_element(p_ExpandedName(None, 'other-appearance'), other_appearance, scope=appearance, location=p_Location('musicxml.xsd', 3514, 3)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3511, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3512, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3513, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3514, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(appearance._UseForTag(p_ExpandedName(None, 'line-width')), p_Location('musicxml.xsd', 3511, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(appearance._UseForTag(p_ExpandedName(None, 'note-size')), p_Location('musicxml.xsd', 3512, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(appearance._UseForTag(p_ExpandedName(None, 'distance')), p_Location('musicxml.xsd', 3513, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(appearance._UseForTag(p_ExpandedName(None, 'other-appearance')), p_Location('musicxml.xsd', 3514, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
appearance._Automaton = _BuildAutomaton_13()




measure_layout._AddElement(p_element(p_ExpandedName(None, 'measure-distance'), tenths, scope=measure_layout, documentation='The measure-distance element specifies the horizontal distance from the previous measure. This value is only used for systems where there is horizontal whitespace in the middle of a system, as in systems with codas. To specify the measure width, use the width attribute of the measure element.', location=p_Location('musicxml.xsd', 3545, 3)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3545, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(measure_layout._UseForTag(p_ExpandedName(None, 'measure-distance')), p_Location('musicxml.xsd', 3545, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
measure_layout._Automaton = _BuildAutomaton_14()




page_layout._AddElement(p_element(p_ExpandedName(None, 'page-height'), tenths, scope=page_layout, location=p_Location('musicxml.xsd', 3581, 4)))

page_layout._AddElement(p_element(p_ExpandedName(None, 'page-width'), tenths, scope=page_layout, location=p_Location('musicxml.xsd', 3582, 4)))

page_layout._AddElement(p_element(p_ExpandedName(None, 'page-margins'), page_margins, scope=page_layout, location=p_Location('musicxml.xsd', 3584, 3)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3580, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=2, metadata=p_Location('musicxml.xsd', 3584, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = p_ElementUse(page_layout._UseForTag(p_ExpandedName(None, 'page-height')), p_Location('musicxml.xsd', 3581, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(page_layout._UseForTag(p_ExpandedName(None, 'page-width')), p_Location('musicxml.xsd', 3582, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(page_layout._UseForTag(p_ExpandedName(None, 'page-margins')), p_Location('musicxml.xsd', 3584, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
page_layout._Automaton = _BuildAutomaton_15()




scaling._AddElement(p_element(p_ExpandedName(None, 'millimeters'), millimeters, scope=scaling, location=p_Location('musicxml.xsd', 3601, 3)))

scaling._AddElement(p_element(p_ExpandedName(None, 'tenths'), tenths, scope=scaling, location=p_Location('musicxml.xsd', 3602, 3)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(scaling._UseForTag(p_ExpandedName(None, 'millimeters')), p_Location('musicxml.xsd', 3601, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(scaling._UseForTag(p_ExpandedName(None, 'tenths')), p_Location('musicxml.xsd', 3602, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
scaling._Automaton = _BuildAutomaton_16()




system_dividers._AddElement(p_element(p_ExpandedName(None, 'left-divider'), empty_print_object_style_align, scope=system_dividers, location=p_Location('musicxml.xsd', 3623, 3)))

system_dividers._AddElement(p_element(p_ExpandedName(None, 'right-divider'), empty_print_object_style_align, scope=system_dividers, location=p_Location('musicxml.xsd', 3624, 3)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(system_dividers._UseForTag(p_ExpandedName(None, 'left-divider')), p_Location('musicxml.xsd', 3623, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(system_dividers._UseForTag(p_ExpandedName(None, 'right-divider')), p_Location('musicxml.xsd', 3624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
system_dividers._Automaton = _BuildAutomaton_17()




system_layout._AddElement(p_element(p_ExpandedName(None, 'system-margins'), system_margins, scope=system_layout, location=p_Location('musicxml.xsd', 3635, 3)))

system_layout._AddElement(p_element(p_ExpandedName(None, 'system-distance'), tenths, scope=system_layout, location=p_Location('musicxml.xsd', 3636, 3)))

system_layout._AddElement(p_element(p_ExpandedName(None, 'top-system-distance'), tenths, scope=system_layout, location=p_Location('musicxml.xsd', 3637, 3)))

system_layout._AddElement(p_element(p_ExpandedName(None, 'system-dividers'), system_dividers, scope=system_layout, location=p_Location('musicxml.xsd', 3638, 3)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3635, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3636, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3637, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3638, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(system_layout._UseForTag(p_ExpandedName(None, 'system-margins')), p_Location('musicxml.xsd', 3635, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(system_layout._UseForTag(p_ExpandedName(None, 'system-distance')), p_Location('musicxml.xsd', 3636, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(system_layout._UseForTag(p_ExpandedName(None, 'top-system-distance')), p_Location('musicxml.xsd', 3637, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(system_layout._UseForTag(p_ExpandedName(None, 'system-dividers')), p_Location('musicxml.xsd', 3638, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
system_layout._Automaton = _BuildAutomaton_18()




system_margins._AddElement(p_element(p_ExpandedName(None, 'left-margin'), tenths, scope=system_margins, location=p_Location('musicxml.xsd', 5255, 3)))

system_margins._AddElement(p_element(p_ExpandedName(None, 'right-margin'), tenths, scope=system_margins, location=p_Location('musicxml.xsd', 5256, 3)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(system_margins._UseForTag(p_ExpandedName(None, 'left-margin')), p_Location('musicxml.xsd', 5255, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(system_margins._UseForTag(p_ExpandedName(None, 'right-margin')), p_Location('musicxml.xsd', 5256, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
system_margins._Automaton = _BuildAutomaton_19()




articulations._AddElement(p_element(p_ExpandedName(None, 'accent'), empty_placement, scope=articulations, documentation='The accent element indicates a regular horizontal accent mark.', location=p_Location('musicxml.xsd', 3714, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'strong-accent'), strong_accent, scope=articulations, documentation='The strong-accent element indicates a vertical accent mark.', location=p_Location('musicxml.xsd', 3719, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'staccato'), empty_placement, scope=articulations, documentation='The staccato element is used for a dot articulation, as opposed to a stroke or a wedge.', location=p_Location('musicxml.xsd', 3724, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'tenuto'), empty_placement, scope=articulations, documentation='The tenuto element indicates a tenuto line symbol.', location=p_Location('musicxml.xsd', 3729, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'detached-legato'), empty_placement, scope=articulations, documentation='The detached-legato element indicates the combination of a tenuto line and staccato dot symbol.', location=p_Location('musicxml.xsd', 3734, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'staccatissimo'), empty_placement, scope=articulations, documentation='The staccatissimo element is used for a wedge articulation, as opposed to a dot or a stroke.', location=p_Location('musicxml.xsd', 3739, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'spiccato'), empty_placement, scope=articulations, documentation='The spiccato element is used for a stroke articulation, as opposed to a dot or a wedge.', location=p_Location('musicxml.xsd', 3744, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'scoop'), empty_line, scope=articulations, documentation='The scoop element is an indeterminate slide attached to a single note. The scoop element appears before the main note and comes from below the main pitch.', location=p_Location('musicxml.xsd', 3749, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'plop'), empty_line, scope=articulations, documentation='The plop element is an indeterminate slide attached to a single note. The plop element appears before the main note and comes from above the main pitch.', location=p_Location('musicxml.xsd', 3754, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'doit'), empty_line, scope=articulations, documentation='The doit element is an indeterminate slide attached to a single note. The doit element appears after the main note and goes above the main pitch.', location=p_Location('musicxml.xsd', 3759, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'falloff'), empty_line, scope=articulations, documentation='The falloff element is an indeterminate slide attached to a single note. The falloff element appears before the main note and goes below the main pitch.', location=p_Location('musicxml.xsd', 3764, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'breath-mark'), breath_mark, scope=articulations, location=p_Location('musicxml.xsd', 3769, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'caesura'), empty_placement, scope=articulations, documentation='The caesura element indicates a slight pause. It is notated using a "railroad tracks" symbol.', location=p_Location('musicxml.xsd', 3770, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'stress'), empty_placement, scope=articulations, documentation='The stress element indicates a stressed note.', location=p_Location('musicxml.xsd', 3775, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'unstress'), empty_placement, scope=articulations, documentation='The unstress element indicates an unstressed note. It is often notated using a u-shaped symbol.', location=p_Location('musicxml.xsd', 3780, 3)))

articulations._AddElement(p_element(p_ExpandedName(None, 'other-articulation'), placement_text, scope=articulations, documentation='The other-articulation element is used to define any articulations not yet in the MusicXML format. This allows extended representation, though without application interoperability.', location=p_Location('musicxml.xsd', 3785, 3)))

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3713, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'accent')), p_Location('musicxml.xsd', 3714, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'strong-accent')), p_Location('musicxml.xsd', 3719, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'staccato')), p_Location('musicxml.xsd', 3724, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'tenuto')), p_Location('musicxml.xsd', 3729, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'detached-legato')), p_Location('musicxml.xsd', 3734, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'staccatissimo')), p_Location('musicxml.xsd', 3739, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'spiccato')), p_Location('musicxml.xsd', 3744, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'scoop')), p_Location('musicxml.xsd', 3749, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'plop')), p_Location('musicxml.xsd', 3754, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'doit')), p_Location('musicxml.xsd', 3759, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'falloff')), p_Location('musicxml.xsd', 3764, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'breath-mark')), p_Location('musicxml.xsd', 3769, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'caesura')), p_Location('musicxml.xsd', 3770, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'stress')), p_Location('musicxml.xsd', 3775, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'unstress')), p_Location('musicxml.xsd', 3780, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(articulations._UseForTag(p_ExpandedName(None, 'other-articulation')), p_Location('musicxml.xsd', 3785, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
articulations._Automaton = _BuildAutomaton_20()




backup._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=backup, location=p_Location('musicxml.xsd', 5054, 3)))

backup._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=backup, location=p_Location('musicxml.xsd', 5063, 3)))

backup._AddElement(p_element(p_ExpandedName(None, 'duration'), positive_divisions, scope=backup, documentation="Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=p_Location('musicxml.xsd', 5267, 3)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = p_ElementUse(backup._UseForTag(p_ExpandedName(None, 'duration')), p_Location('musicxml.xsd', 5267, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(backup._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(backup._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
backup._Automaton = _BuildAutomaton_21()




figure._AddElement(p_element(p_ExpandedName(None, 'prefix'), style_text, scope=figure, documentation='Values for the prefix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. The prefix element may contain additional values for symbols specific to particular figured bass styles.', location=p_Location('musicxml.xsd', 3906, 3)))

figure._AddElement(p_element(p_ExpandedName(None, 'figure-number'), style_text, scope=figure, documentation='A figure-number is a number. Overstrikes of the figure number are represented in the suffix element.', location=p_Location('musicxml.xsd', 3911, 3)))

figure._AddElement(p_element(p_ExpandedName(None, 'suffix'), style_text, scope=figure, documentation='Values for the suffix element include the accidental values sharp, flat, natural, double-sharp, flat-flat, and sharp-sharp. Suffixes include both symbols that come after the figure number and those that overstrike the figure number. The suffix value slash is used for slashed numbers indicating chromatic alteration. The orientation and display of the slash usually depends on the figure number. The suffix element may contain additional values for symbols specific to particular figured bass styles.', location=p_Location('musicxml.xsd', 3916, 3)))

figure._AddElement(p_element(p_ExpandedName(None, 'extend'), extend, scope=figure, location=p_Location('musicxml.xsd', 3921, 3)))

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3906, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3911, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3916, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3921, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(figure._UseForTag(p_ExpandedName(None, 'prefix')), p_Location('musicxml.xsd', 3906, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(figure._UseForTag(p_ExpandedName(None, 'figure-number')), p_Location('musicxml.xsd', 3911, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(figure._UseForTag(p_ExpandedName(None, 'suffix')), p_Location('musicxml.xsd', 3916, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(figure._UseForTag(p_ExpandedName(None, 'extend')), p_Location('musicxml.xsd', 3921, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
figure._Automaton = _BuildAutomaton_22()




forward._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=forward, location=p_Location('musicxml.xsd', 5054, 3)))

forward._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=forward, location=p_Location('musicxml.xsd', 5063, 3)))

forward._AddElement(p_element(p_ExpandedName(None, 'staff'), p_positiveInteger, scope=forward, documentation='Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=p_Location('musicxml.xsd', 5072, 3)))

forward._AddElement(p_element(p_ExpandedName(None, 'voice'), p_string, scope=forward, location=p_Location('musicxml.xsd', 5108, 3)))

forward._AddElement(p_element(p_ExpandedName(None, 'duration'), positive_divisions, scope=forward, documentation="Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=p_Location('musicxml.xsd', 5267, 3)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5032, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5033, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5034, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3948, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = p_ElementUse(forward._UseForTag(p_ExpandedName(None, 'duration')), p_Location('musicxml.xsd', 5267, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(forward._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(forward._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(forward._UseForTag(p_ExpandedName(None, 'voice')), p_Location('musicxml.xsd', 5108, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(forward._UseForTag(p_ExpandedName(None, 'staff')), p_Location('musicxml.xsd', 5072, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
forward._Automaton = _BuildAutomaton_23()




notehead_text._AddElement(p_element(p_ExpandedName(None, 'display-text'), formatted_text, scope=notehead_text, location=p_Location('musicxml.xsd', 4288, 4)))

notehead_text._AddElement(p_element(p_ExpandedName(None, 'accidental-text'), accidental_text, scope=notehead_text, location=p_Location('musicxml.xsd', 4289, 4)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(notehead_text._UseForTag(p_ExpandedName(None, 'display-text')), p_Location('musicxml.xsd', 4288, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(notehead_text._UseForTag(p_ExpandedName(None, 'accidental-text')), p_Location('musicxml.xsd', 4289, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
notehead_text._Automaton = _BuildAutomaton_24()




ornaments._AddElement(p_element(p_ExpandedName(None, 'trill-mark'), empty_trill_sound, scope=ornaments, documentation='The trill-mark element represents the trill-mark symbol.', location=p_Location('musicxml.xsd', 4300, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'turn'), horizontal_turn, scope=ornaments, documentation='The turn element is the normal turn shape which goes up then down.', location=p_Location('musicxml.xsd', 4305, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'delayed-turn'), horizontal_turn, scope=ornaments, documentation='The delayed-turn element indicates a normal turn that is delayed until the end of the current note.', location=p_Location('musicxml.xsd', 4310, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'inverted-turn'), horizontal_turn, scope=ornaments, documentation='The inverted-turn element has the shape which goes down and then up.', location=p_Location('musicxml.xsd', 4315, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'delayed-inverted-turn'), horizontal_turn, scope=ornaments, documentation='The delayed-inverted-turn element indicates an inverted turn that is delayed until the end of the current note.', location=p_Location('musicxml.xsd', 4320, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'vertical-turn'), empty_trill_sound, scope=ornaments, documentation='The vertical-turn element has the turn symbol shape arranged vertically going from upper left to lower right.', location=p_Location('musicxml.xsd', 4325, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'shake'), empty_trill_sound, scope=ornaments, documentation='The shake element has a similar appearance to an inverted-mordent element.', location=p_Location('musicxml.xsd', 4330, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'wavy-line'), wavy_line, scope=ornaments, location=p_Location('musicxml.xsd', 4335, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'mordent'), mordent, scope=ornaments, documentation='The mordent element represents the sign with the vertical line. The long attribute is "no" by default.', location=p_Location('musicxml.xsd', 4336, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'inverted-mordent'), mordent, scope=ornaments, documentation='The inverted-mordent element represents the sign without the vertical line. The long attribute is "no" by default.', location=p_Location('musicxml.xsd', 4341, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'schleifer'), empty_placement, scope=ornaments, documentation='The name for this ornament is based on the German, to avoid confusion with the more common slide element defined earlier.', location=p_Location('musicxml.xsd', 4346, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'tremolo'), tremolo, scope=ornaments, location=p_Location('musicxml.xsd', 4351, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'other-ornament'), placement_text, scope=ornaments, documentation='The other-ornament element is used to define any ornaments not yet in the MusicXML format. This allows extended representation, though without application interoperability.', location=p_Location('musicxml.xsd', 4352, 4)))

ornaments._AddElement(p_element(p_ExpandedName(None, 'accidental-mark'), accidental_mark, scope=ornaments, location=p_Location('musicxml.xsd', 4358, 3)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4298, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4358, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'trill-mark')), p_Location('musicxml.xsd', 4300, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'turn')), p_Location('musicxml.xsd', 4305, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'delayed-turn')), p_Location('musicxml.xsd', 4310, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'inverted-turn')), p_Location('musicxml.xsd', 4315, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'delayed-inverted-turn')), p_Location('musicxml.xsd', 4320, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'vertical-turn')), p_Location('musicxml.xsd', 4325, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'shake')), p_Location('musicxml.xsd', 4330, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'wavy-line')), p_Location('musicxml.xsd', 4335, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'mordent')), p_Location('musicxml.xsd', 4336, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'inverted-mordent')), p_Location('musicxml.xsd', 4341, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'schleifer')), p_Location('musicxml.xsd', 4346, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'tremolo')), p_Location('musicxml.xsd', 4351, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'other-ornament')), p_Location('musicxml.xsd', 4352, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(ornaments._UseForTag(p_ExpandedName(None, 'accidental-mark')), p_Location('musicxml.xsd', 4358, 3))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ornaments._Automaton = _BuildAutomaton_25()




pitch._AddElement(p_element(p_ExpandedName(None, 'step'), step, scope=pitch, location=p_Location('musicxml.xsd', 4382, 3)))

pitch._AddElement(p_element(p_ExpandedName(None, 'alter'), semitones, scope=pitch, location=p_Location('musicxml.xsd', 4383, 3)))

pitch._AddElement(p_element(p_ExpandedName(None, 'octave'), octave, scope=pitch, location=p_Location('musicxml.xsd', 4384, 3)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4383, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(pitch._UseForTag(p_ExpandedName(None, 'step')), p_Location('musicxml.xsd', 4382, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(pitch._UseForTag(p_ExpandedName(None, 'alter')), p_Location('musicxml.xsd', 4383, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(pitch._UseForTag(p_ExpandedName(None, 'octave')), p_Location('musicxml.xsd', 4384, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
pitch._Automaton = _BuildAutomaton_26()




technical._AddElement(p_element(p_ExpandedName(None, 'up-bow'), empty_placement, scope=technical, documentation='The up-bow element represents the symbol that is used both for up-bowing on bowed instruments, and up-stroke on plucked instruments.', location=p_Location('musicxml.xsd', 4480, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'down-bow'), empty_placement, scope=technical, documentation='The down-bow element represents the symbol that is used both for down-bowing on bowed instruments, and down-stroke on plucked instruments.', location=p_Location('musicxml.xsd', 4485, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'harmonic'), harmonic, scope=technical, location=p_Location('musicxml.xsd', 4490, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'open-string'), empty_placement, scope=technical, documentation='The open-string element represents the zero-shaped open string symbol.', location=p_Location('musicxml.xsd', 4491, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'thumb-position'), empty_placement, scope=technical, documentation='The thumb-position element represents the thumb position symbol. This is a circle with a line, where the line does not come within the circle. It is distinct from the snap pizzicato symbol, where the line comes inside the circle.', location=p_Location('musicxml.xsd', 4496, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'fingering'), fingering, scope=technical, location=p_Location('musicxml.xsd', 4501, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'pluck'), placement_text, scope=technical, documentation='The pluck element is used to specify the plucking fingering on a fretted instrument, where the fingering element refers to the fretting fingering. Typical values are p, i, m, a for pulgar/thumb, indicio/index, medio/middle, and anular/ring fingers.', location=p_Location('musicxml.xsd', 4502, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'double-tongue'), empty_placement, scope=technical, documentation='The double-tongue element represents the double tongue symbol (two dots arranged horizontally).', location=p_Location('musicxml.xsd', 4507, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'triple-tongue'), empty_placement, scope=technical, documentation='The triple-tongue element represents the triple tongue symbol (three dots arranged horizontally).', location=p_Location('musicxml.xsd', 4512, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'stopped'), empty_placement, scope=technical, documentation='The stopped element represents the stopped symbol, which looks like a plus sign.', location=p_Location('musicxml.xsd', 4517, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'snap-pizzicato'), empty_placement, scope=technical, documentation='\tThe snap-pizzicato element represents the snap pizzicato symbol. This is a circle with a line, where the line comes inside the circle. It is distinct from the thumb-position symbol, where the line does not come inside the circle.', location=p_Location('musicxml.xsd', 4522, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'fret'), fret, scope=technical, location=p_Location('musicxml.xsd', 4527, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'string'), string, scope=technical, location=p_Location('musicxml.xsd', 4528, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'hammer-on'), hammer_on_pull_off, scope=technical, location=p_Location('musicxml.xsd', 4529, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'pull-off'), hammer_on_pull_off, scope=technical, location=p_Location('musicxml.xsd', 4530, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'bend'), bend, scope=technical, location=p_Location('musicxml.xsd', 4531, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'tap'), placement_text, scope=technical, documentation='The tap element indicates a tap on the fretboard. The element content allows specification of the notation; + and T are common choices. If empty, the display is application-specific.', location=p_Location('musicxml.xsd', 4532, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'heel'), heel_toe, scope=technical, location=p_Location('musicxml.xsd', 4537, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'toe'), heel_toe, scope=technical, location=p_Location('musicxml.xsd', 4538, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'fingernails'), empty_placement, scope=technical, documentation='The fingernails element is used in notation for harp and other plucked string instruments.', location=p_Location('musicxml.xsd', 4539, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'hole'), hole, scope=technical, location=p_Location('musicxml.xsd', 4544, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'arrow'), arrow, scope=technical, location=p_Location('musicxml.xsd', 4545, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'handbell'), handbell, scope=technical, location=p_Location('musicxml.xsd', 4546, 3)))

technical._AddElement(p_element(p_ExpandedName(None, 'other-technical'), placement_text, scope=technical, documentation='The other-technical element is used to define any technical indications not yet in the MusicXML format. This allows extended representation, though without application interoperability.', location=p_Location('musicxml.xsd', 4547, 3)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4479, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'up-bow')), p_Location('musicxml.xsd', 4480, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'down-bow')), p_Location('musicxml.xsd', 4485, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'harmonic')), p_Location('musicxml.xsd', 4490, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'open-string')), p_Location('musicxml.xsd', 4491, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'thumb-position')), p_Location('musicxml.xsd', 4496, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'fingering')), p_Location('musicxml.xsd', 4501, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'pluck')), p_Location('musicxml.xsd', 4502, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'double-tongue')), p_Location('musicxml.xsd', 4507, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'triple-tongue')), p_Location('musicxml.xsd', 4512, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'stopped')), p_Location('musicxml.xsd', 4517, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'snap-pizzicato')), p_Location('musicxml.xsd', 4522, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'fret')), p_Location('musicxml.xsd', 4527, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'string')), p_Location('musicxml.xsd', 4528, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'hammer-on')), p_Location('musicxml.xsd', 4529, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'pull-off')), p_Location('musicxml.xsd', 4530, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'bend')), p_Location('musicxml.xsd', 4531, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'tap')), p_Location('musicxml.xsd', 4532, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'heel')), p_Location('musicxml.xsd', 4537, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'toe')), p_Location('musicxml.xsd', 4538, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'fingernails')), p_Location('musicxml.xsd', 4539, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'hole')), p_Location('musicxml.xsd', 4544, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'arrow')), p_Location('musicxml.xsd', 4545, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'handbell')), p_Location('musicxml.xsd', 4546, 3))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(technical._UseForTag(p_ExpandedName(None, 'other-technical')), p_Location('musicxml.xsd', 4547, 3))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
technical._Automaton = _BuildAutomaton_27()




time_modification._AddElement(p_element(p_ExpandedName(None, 'actual-notes'), p_nonNegativeInteger, scope=time_modification, documentation='The actual-notes element describes how many notes are played in the time usually occupied by the number in the normal-notes element.', location=p_Location('musicxml.xsd', 4619, 3)))

time_modification._AddElement(p_element(p_ExpandedName(None, 'normal-notes'), p_nonNegativeInteger, scope=time_modification, documentation='The normal-notes element describes how many notes are usually played in the time occupied by the number in the actual-notes element.', location=p_Location('musicxml.xsd', 4624, 3)))

time_modification._AddElement(p_element(p_ExpandedName(None, 'normal-type'), note_type_value, scope=time_modification, documentation='If the type associated with the number in the normal-notes element is different than the current note type (e.g., a quarter note within an eighth note triplet), then the normal-notes type (e.g. eighth) is specified in the normal-type and normal-dot elements.', location=p_Location('musicxml.xsd', 4630, 4)))

time_modification._AddElement(p_element(p_ExpandedName(None, 'normal-dot'), empty, scope=time_modification, documentation='The normal-dot element is used to specify dotted normal tuplet types.', location=p_Location('musicxml.xsd', 4635, 4)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4629, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4635, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = p_ElementUse(time_modification._UseForTag(p_ExpandedName(None, 'actual-notes')), p_Location('musicxml.xsd', 4619, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(time_modification._UseForTag(p_ExpandedName(None, 'normal-notes')), p_Location('musicxml.xsd', 4624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(time_modification._UseForTag(p_ExpandedName(None, 'normal-type')), p_Location('musicxml.xsd', 4630, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(time_modification._UseForTag(p_ExpandedName(None, 'normal-dot')), p_Location('musicxml.xsd', 4635, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
time_modification._Automaton = _BuildAutomaton_28()




tuplet_portion._AddElement(p_element(p_ExpandedName(None, 'tuplet-number'), tuplet_number, scope=tuplet_portion, location=p_Location('musicxml.xsd', 4716, 3)))

tuplet_portion._AddElement(p_element(p_ExpandedName(None, 'tuplet-type'), tuplet_type, scope=tuplet_portion, location=p_Location('musicxml.xsd', 4717, 3)))

tuplet_portion._AddElement(p_element(p_ExpandedName(None, 'tuplet-dot'), tuplet_dot, scope=tuplet_portion, location=p_Location('musicxml.xsd', 4718, 3)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4716, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4717, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4718, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(tuplet_portion._UseForTag(p_ExpandedName(None, 'tuplet-number')), p_Location('musicxml.xsd', 4716, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(tuplet_portion._UseForTag(p_ExpandedName(None, 'tuplet-type')), p_Location('musicxml.xsd', 4717, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(tuplet_portion._UseForTag(p_ExpandedName(None, 'tuplet-dot')), p_Location('musicxml.xsd', 4718, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
tuplet_portion._Automaton = _BuildAutomaton_29()




unpitched._AddElement(p_element(p_ExpandedName(None, 'display-step'), step, scope=unpitched, location=p_Location('musicxml.xsd', 5280, 3)))

unpitched._AddElement(p_element(p_ExpandedName(None, 'display-octave'), octave, scope=unpitched, location=p_Location('musicxml.xsd', 5281, 3)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4739, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(unpitched._UseForTag(p_ExpandedName(None, 'display-step')), p_Location('musicxml.xsd', 5280, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(unpitched._UseForTag(p_ExpandedName(None, 'display-octave')), p_Location('musicxml.xsd', 5281, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
unpitched._Automaton = _BuildAutomaton_30()




credit._AddElement(p_element(p_ExpandedName(None, 'credit-type'), p_string, scope=credit, location=p_Location('musicxml.xsd', 4757, 3)))

credit._AddElement(p_element(p_ExpandedName(None, 'link'), link, scope=credit, location=p_Location('musicxml.xsd', 4758, 3)))

credit._AddElement(p_element(p_ExpandedName(None, 'bookmark'), bookmark, scope=credit, location=p_Location('musicxml.xsd', 4759, 3)))

credit._AddElement(p_element(p_ExpandedName(None, 'credit-image'), image, scope=credit, location=p_Location('musicxml.xsd', 4761, 4)))

credit._AddElement(p_element(p_ExpandedName(None, 'credit-words'), formatted_text, scope=credit, location=p_Location('musicxml.xsd', 4763, 5)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4757, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4758, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4759, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4764, 5))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4765, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4766, 6))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'credit-type')), p_Location('musicxml.xsd', 4757, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'link')), p_Location('musicxml.xsd', 4758, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'bookmark')), p_Location('musicxml.xsd', 4759, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'credit-image')), p_Location('musicxml.xsd', 4761, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'credit-words')), p_Location('musicxml.xsd', 4763, 5))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'link')), p_Location('musicxml.xsd', 4765, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'bookmark')), p_Location('musicxml.xsd', 4766, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(credit._UseForTag(p_ExpandedName(None, 'credit-words')), p_Location('musicxml.xsd', 4767, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
credit._Automaton = _BuildAutomaton_31()




defaults._AddElement(p_element(p_ExpandedName(None, 'scaling'), scaling, scope=defaults, location=p_Location('musicxml.xsd', 4780, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'appearance'), appearance, scope=defaults, location=p_Location('musicxml.xsd', 4782, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'music-font'), empty_font, scope=defaults, location=p_Location('musicxml.xsd', 4783, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'word-font'), empty_font, scope=defaults, location=p_Location('musicxml.xsd', 4784, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'lyric-font'), lyric_font, scope=defaults, location=p_Location('musicxml.xsd', 4785, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'lyric-language'), lyric_language, scope=defaults, location=p_Location('musicxml.xsd', 4786, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'page-layout'), page_layout, scope=defaults, location=p_Location('musicxml.xsd', 5244, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'system-layout'), system_layout, scope=defaults, location=p_Location('musicxml.xsd', 5245, 3)))

defaults._AddElement(p_element(p_ExpandedName(None, 'staff-layout'), staff_layout, scope=defaults, location=p_Location('musicxml.xsd', 5246, 3)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4780, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5244, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5245, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5246, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4782, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4783, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4784, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4785, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4786, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'scaling')), p_Location('musicxml.xsd', 4780, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'page-layout')), p_Location('musicxml.xsd', 5244, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'system-layout')), p_Location('musicxml.xsd', 5245, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'staff-layout')), p_Location('musicxml.xsd', 5246, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'appearance')), p_Location('musicxml.xsd', 4782, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'music-font')), p_Location('musicxml.xsd', 4783, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'word-font')), p_Location('musicxml.xsd', 4784, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'lyric-font')), p_Location('musicxml.xsd', 4785, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(defaults._UseForTag(p_ExpandedName(None, 'lyric-language')), p_Location('musicxml.xsd', 4786, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
defaults._Automaton = _BuildAutomaton_32()




part_list._AddElement(p_element(p_ExpandedName(None, 'part-group'), part_group, scope=part_list, location=p_Location('musicxml.xsd', 5333, 3)))

part_list._AddElement(p_element(p_ExpandedName(None, 'score-part'), score_part, scope=part_list, documentation='Each MusicXML part corresponds to a track in a Standard MIDI Format 1 file. The score-instrument elements are used when there are multiple instruments per track. The midi-device element is used to make a MIDI device or port assignment for the given track. Initial midi-instrument assignments may be made here as well.', location=p_Location('musicxml.xsd', 5366, 3)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4895, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4897, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = p_ElementUse(part_list._UseForTag(p_ExpandedName(None, 'part-group')), p_Location('musicxml.xsd', 5333, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(part_list._UseForTag(p_ExpandedName(None, 'score-part')), p_Location('musicxml.xsd', 5366, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(part_list._UseForTag(p_ExpandedName(None, 'part-group')), p_Location('musicxml.xsd', 5333, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(part_list._UseForTag(p_ExpandedName(None, 'score-part')), p_Location('musicxml.xsd', 5366, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
part_list._Automaton = _BuildAutomaton_33()




score_instrument._AddElement(p_element(p_ExpandedName(None, 'instrument-name'), p_string, scope=score_instrument, documentation='The instrument-name element is typically used within a software application, rather than appearing on the printed page of a score.', location=p_Location('musicxml.xsd', 4922, 3)))

score_instrument._AddElement(p_element(p_ExpandedName(None, 'instrument-abbreviation'), p_string, scope=score_instrument, documentation='The optional instrument-abbreviation element is typically used within a software application, rather than appearing on the printed page of a score.', location=p_Location('musicxml.xsd', 4927, 3)))

score_instrument._AddElement(p_element(p_ExpandedName(None, 'instrument-sound'), p_string, scope=score_instrument, documentation='The instrument-sound element describes the default timbre of the score-instrument. This description is independent of a particular virtual or MIDI instrument specification and allows playback to be shared more easily between applications and libraries.', location=p_Location('musicxml.xsd', 4932, 3)))

score_instrument._AddElement(p_element(p_ExpandedName(None, 'solo'), empty, scope=score_instrument, documentation='The solo element was added in Version 2.0. It is present if performance is intended by a solo instrument.', location=p_Location('musicxml.xsd', 4938, 4)))

score_instrument._AddElement(p_element(p_ExpandedName(None, 'ensemble'), positive_integer_or_empty, scope=score_instrument, documentation='The ensemble element was added in Version 2.0. It is present if performance is intended by an ensemble such as an orchestral section. The text of the ensemble element contains the size of the section, or is empty if the ensemble size is not specified.', location=p_Location('musicxml.xsd', 4943, 4)))

score_instrument._AddElement(p_element(p_ExpandedName(None, 'virtual-instrument'), virtual_instrument, scope=score_instrument, location=p_Location('musicxml.xsd', 4949, 3)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4927, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4932, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4937, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4949, 3))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = p_ElementUse(score_instrument._UseForTag(p_ExpandedName(None, 'instrument-name')), p_Location('musicxml.xsd', 4922, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(score_instrument._UseForTag(p_ExpandedName(None, 'instrument-abbreviation')), p_Location('musicxml.xsd', 4927, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(score_instrument._UseForTag(p_ExpandedName(None, 'instrument-sound')), p_Location('musicxml.xsd', 4932, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(score_instrument._UseForTag(p_ExpandedName(None, 'solo')), p_Location('musicxml.xsd', 4938, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(score_instrument._UseForTag(p_ExpandedName(None, 'ensemble')), p_Location('musicxml.xsd', 4943, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(score_instrument._UseForTag(p_ExpandedName(None, 'virtual-instrument')), p_Location('musicxml.xsd', 4949, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
score_instrument._Automaton = _BuildAutomaton_34()




score_part._AddElement(p_element(p_ExpandedName(None, 'identification'), identification, scope=score_part, location=p_Location('musicxml.xsd', 4959, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'part-name'), part_name, scope=score_part, location=p_Location('musicxml.xsd', 4960, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'part-name-display'), name_display, scope=score_part, location=p_Location('musicxml.xsd', 4961, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'part-abbreviation'), part_name, scope=score_part, location=p_Location('musicxml.xsd', 4962, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'part-abbreviation-display'), name_display, scope=score_part, location=p_Location('musicxml.xsd', 4963, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'group'), p_string, scope=score_part, documentation='The group element allows the use of different versions of the part for different purposes. Typical values include score, parts, sound, and data. Ordering information that is directly encoded in MuseData can be derived from the ordering within a MusicXML score or opus.', location=p_Location('musicxml.xsd', 4964, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'score-instrument'), score_instrument, scope=score_part, location=p_Location('musicxml.xsd', 4969, 3)))

score_part._AddElement(p_element(p_ExpandedName(None, 'midi-device'), midi_device, scope=score_part, location=p_Location('musicxml.xsd', 4971, 4)))

score_part._AddElement(p_element(p_ExpandedName(None, 'midi-instrument'), midi_instrument, scope=score_part, location=p_Location('musicxml.xsd', 4972, 4)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4959, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4961, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4962, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4963, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4964, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4969, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4970, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4971, 4))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4972, 4))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'identification')), p_Location('musicxml.xsd', 4959, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'part-name')), p_Location('musicxml.xsd', 4960, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'part-name-display')), p_Location('musicxml.xsd', 4961, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'part-abbreviation')), p_Location('musicxml.xsd', 4962, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'part-abbreviation-display')), p_Location('musicxml.xsd', 4963, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'group')), p_Location('musicxml.xsd', 4964, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'score-instrument')), p_Location('musicxml.xsd', 4969, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'midi-device')), p_Location('musicxml.xsd', 4971, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(score_part._UseForTag(p_ExpandedName(None, 'midi-instrument')), p_Location('musicxml.xsd', 4972, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, True),
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
score_part._Automaton = _BuildAutomaton_35()




virtual_instrument._AddElement(p_element(p_ExpandedName(None, 'virtual-library'), p_string, scope=virtual_instrument, documentation='The virtual-library element indicates the virtual instrument library name.', location=p_Location('musicxml.xsd', 4983, 3)))

virtual_instrument._AddElement(p_element(p_ExpandedName(None, 'virtual-name'), p_string, scope=virtual_instrument, documentation='The virtual-name element indicates the library-specific name for the virtual instrument.', location=p_Location('musicxml.xsd', 4988, 3)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4983, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4988, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(virtual_instrument._UseForTag(p_ExpandedName(None, 'virtual-library')), p_Location('musicxml.xsd', 4983, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(virtual_instrument._UseForTag(p_ExpandedName(None, 'virtual-name')), p_Location('musicxml.xsd', 4988, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
virtual_instrument._Automaton = _BuildAutomaton_36()




work._AddElement(p_element(p_ExpandedName(None, 'work-number'), p_string, scope=work, documentation='The work-number element specifies the number of a work, such as its opus number.', location=p_Location('musicxml.xsd', 5001, 3)))

work._AddElement(p_element(p_ExpandedName(None, 'work-title'), p_string, scope=work, documentation='The work-title element specifies the title of a work, not including its opus or other work number.', location=p_Location('musicxml.xsd', 5006, 3)))

work._AddElement(p_element(p_ExpandedName(None, 'opus'), opus, scope=work, location=p_Location('musicxml.xsd', 5011, 3)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5001, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5006, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5011, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(work._UseForTag(p_ExpandedName(None, 'work-number')), p_Location('musicxml.xsd', 5001, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(work._UseForTag(p_ExpandedName(None, 'work-title')), p_Location('musicxml.xsd', 5006, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(work._UseForTag(p_ExpandedName(None, 'opus')), p_Location('musicxml.xsd', 5011, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
work._Automaton = _BuildAutomaton_37()




CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'work'), work, scope=CTD_ANON, location=p_Location('musicxml.xsd', 5343, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'movement-number'), p_string, scope=CTD_ANON, documentation='The movement-number element specifies the number of a movement.', location=p_Location('musicxml.xsd', 5344, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'movement-title'), p_string, scope=CTD_ANON, documentation='The movement-title element specifies the title of a movement, not including its number.', location=p_Location('musicxml.xsd', 5349, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'identification'), identification, scope=CTD_ANON, location=p_Location('musicxml.xsd', 5354, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'defaults'), defaults, scope=CTD_ANON, location=p_Location('musicxml.xsd', 5355, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'credit'), credit, scope=CTD_ANON, location=p_Location('musicxml.xsd', 5356, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'part-list'), part_list, scope=CTD_ANON, location=p_Location('musicxml.xsd', 5357, 3)))

CTD_ANON._AddElement(p_element(p_ExpandedName(None, 'part'), CTD_ANON_, scope=CTD_ANON, location=p_Location('musicxml.xsd', 5385, 4)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5343, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5344, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5349, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5354, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5355, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5356, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'work')), p_Location('musicxml.xsd', 5343, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'movement-number')), p_Location('musicxml.xsd', 5344, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'movement-title')), p_Location('musicxml.xsd', 5349, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'identification')), p_Location('musicxml.xsd', 5354, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'defaults')), p_Location('musicxml.xsd', 5355, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'credit')), p_Location('musicxml.xsd', 5356, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'part-list')), p_Location('musicxml.xsd', 5357, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = p_ElementUse(CTD_ANON._UseForTag(p_ExpandedName(None, 'part')), p_Location('musicxml.xsd', 5385, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_38()




CTD_ANON_._AddElement(p_element(p_ExpandedName(None, 'measure'), CTD_ANON_4, scope=CTD_ANON_, location=p_Location('musicxml.xsd', 5388, 7)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(CTD_ANON_._UseForTag(p_ExpandedName(None, 'measure')), p_Location('musicxml.xsd', 5388, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_39()




CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'work'), work, scope=CTD_ANON_2, location=p_Location('musicxml.xsd', 5343, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'movement-number'), p_string, scope=CTD_ANON_2, documentation='The movement-number element specifies the number of a movement.', location=p_Location('musicxml.xsd', 5344, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'movement-title'), p_string, scope=CTD_ANON_2, documentation='The movement-title element specifies the title of a movement, not including its number.', location=p_Location('musicxml.xsd', 5349, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'identification'), identification, scope=CTD_ANON_2, location=p_Location('musicxml.xsd', 5354, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'defaults'), defaults, scope=CTD_ANON_2, location=p_Location('musicxml.xsd', 5355, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'credit'), credit, scope=CTD_ANON_2, location=p_Location('musicxml.xsd', 5356, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'part-list'), part_list, scope=CTD_ANON_2, location=p_Location('musicxml.xsd', 5357, 3)))

CTD_ANON_2._AddElement(p_element(p_ExpandedName(None, 'measure'), CTD_ANON_5, scope=CTD_ANON_2, location=p_Location('musicxml.xsd', 5410, 4)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5343, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5344, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5349, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5354, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5355, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5356, 3))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'work')), p_Location('musicxml.xsd', 5343, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'movement-number')), p_Location('musicxml.xsd', 5344, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'movement-title')), p_Location('musicxml.xsd', 5349, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'identification')), p_Location('musicxml.xsd', 5354, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'defaults')), p_Location('musicxml.xsd', 5355, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'credit')), p_Location('musicxml.xsd', 5356, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'part-list')), p_Location('musicxml.xsd', 5357, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = p_ElementUse(CTD_ANON_2._UseForTag(p_ExpandedName(None, 'measure')), p_Location('musicxml.xsd', 5410, 4))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_40()




CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'note'), note, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5311, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'backup'), backup, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5312, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'forward'), forward, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5313, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'direction'), direction, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5314, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'attributes'), attributes, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5315, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'harmony'), harmony, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5316, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'figured-bass'), figured_bass, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5317, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'print'), print_, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5318, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'sound'), sound, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5319, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'barline'), barline, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5320, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'grouping'), grouping, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5321, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'link'), link, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5322, 4)))

CTD_ANON_3._AddElement(p_element(p_ExpandedName(None, 'bookmark'), bookmark, scope=CTD_ANON_3, location=p_Location('musicxml.xsd', 5323, 4)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5310, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'note')), p_Location('musicxml.xsd', 5311, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'backup')), p_Location('musicxml.xsd', 5312, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'forward')), p_Location('musicxml.xsd', 5313, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'direction')), p_Location('musicxml.xsd', 5314, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'attributes')), p_Location('musicxml.xsd', 5315, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'harmony')), p_Location('musicxml.xsd', 5316, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'figured-bass')), p_Location('musicxml.xsd', 5317, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'print')), p_Location('musicxml.xsd', 5318, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'sound')), p_Location('musicxml.xsd', 5319, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'barline')), p_Location('musicxml.xsd', 5320, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'grouping')), p_Location('musicxml.xsd', 5321, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'link')), p_Location('musicxml.xsd', 5322, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_3._UseForTag(p_ExpandedName(None, 'bookmark')), p_Location('musicxml.xsd', 5323, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_41()




name_display._AddElement(p_element(p_ExpandedName(None, 'display-text'), formatted_text, scope=name_display, location=p_Location('musicxml.xsd', 2212, 4)))

name_display._AddElement(p_element(p_ExpandedName(None, 'accidental-text'), accidental_text, scope=name_display, location=p_Location('musicxml.xsd', 2213, 4)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2211, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(name_display._UseForTag(p_ExpandedName(None, 'display-text')), p_Location('musicxml.xsd', 2212, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(name_display._UseForTag(p_ExpandedName(None, 'accidental-text')), p_Location('musicxml.xsd', 2213, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
name_display._Automaton = _BuildAutomaton_42()




beat_repeat._AddElement(p_element(p_ExpandedName(None, 'slash-type'), note_type_value, scope=beat_repeat, documentation='The slash-type element indicates the graphical note type to use for the display of repetition marks.', location=p_Location('musicxml.xsd', 5142, 3)))

beat_repeat._AddElement(p_element(p_ExpandedName(None, 'slash-dot'), empty, scope=beat_repeat, documentation='The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.', location=p_Location('musicxml.xsd', 5147, 3)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2376, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5147, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(beat_repeat._UseForTag(p_ExpandedName(None, 'slash-type')), p_Location('musicxml.xsd', 5142, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(beat_repeat._UseForTag(p_ExpandedName(None, 'slash-dot')), p_Location('musicxml.xsd', 5147, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
beat_repeat._Automaton = _BuildAutomaton_43()




interchangeable._AddElement(p_element(p_ExpandedName(None, 'time-relation'), time_relation, scope=interchangeable, location=p_Location('musicxml.xsd', 2433, 3)))

interchangeable._AddElement(p_element(p_ExpandedName(None, 'beats'), p_string, scope=interchangeable, documentation='The beats element indicates the number of beats, as found in the numerator of a time signature.', location=p_Location('musicxml.xsd', 5160, 3)))

interchangeable._AddElement(p_element(p_ExpandedName(None, 'beat-type'), p_string, scope=interchangeable, documentation='The beat-type element indicates the beat unit, as found in the denominator of a time signature.', location=p_Location('musicxml.xsd', 5165, 3)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2433, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(interchangeable._UseForTag(p_ExpandedName(None, 'time-relation')), p_Location('musicxml.xsd', 2433, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(interchangeable._UseForTag(p_ExpandedName(None, 'beats')), p_Location('musicxml.xsd', 5160, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(interchangeable._UseForTag(p_ExpandedName(None, 'beat-type')), p_Location('musicxml.xsd', 5165, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
interchangeable._Automaton = _BuildAutomaton_44()




slash._AddElement(p_element(p_ExpandedName(None, 'slash-type'), note_type_value, scope=slash, documentation='The slash-type element indicates the graphical note type to use for the display of repetition marks.', location=p_Location('musicxml.xsd', 5142, 3)))

slash._AddElement(p_element(p_ExpandedName(None, 'slash-dot'), empty, scope=slash, documentation='The slash-dot element is used to specify any augmentation dots in the note type used to display repetition marks.', location=p_Location('musicxml.xsd', 5147, 3)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2532, 2))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5147, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(slash._UseForTag(p_ExpandedName(None, 'slash-type')), p_Location('musicxml.xsd', 5142, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(slash._UseForTag(p_ExpandedName(None, 'slash-dot')), p_Location('musicxml.xsd', 5147, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
slash._Automaton = _BuildAutomaton_45()




staff_details._AddElement(p_element(p_ExpandedName(None, 'staff-type'), staff_type, scope=staff_details, location=p_Location('musicxml.xsd', 2543, 3)))

staff_details._AddElement(p_element(p_ExpandedName(None, 'staff-lines'), p_nonNegativeInteger, scope=staff_details, documentation='The staff-lines element specifies the number of lines for a non 5-line staff.', location=p_Location('musicxml.xsd', 2544, 3)))

staff_details._AddElement(p_element(p_ExpandedName(None, 'staff-tuning'), staff_tuning, scope=staff_details, location=p_Location('musicxml.xsd', 2549, 3)))

staff_details._AddElement(p_element(p_ExpandedName(None, 'capo'), p_nonNegativeInteger, scope=staff_details, documentation='The capo element indicates at which fret a capo should be placed on a fretted instrument. This changes the open tuning of the strings specified by staff-tuning by the specified number of half-steps.', location=p_Location('musicxml.xsd', 2550, 3)))

staff_details._AddElement(p_element(p_ExpandedName(None, 'staff-size'), non_negative_decimal, scope=staff_details, documentation="The staff-size element indicates how large a staff space is on this staff, expressed as a percentage of the work's default scaling. Values less than 100 make the staff space smaller while values over 100 make the staff space larger. A staff-type of cue, ossia, or editorial implies a staff-size of less than 100, but the exact value is implementation-dependent unless specified here. Staff size affects staff height only, not the relationship of the staff to the left and right margins.", location=p_Location('musicxml.xsd', 2555, 3)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2543, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2544, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2549, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2550, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2555, 3))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(staff_details._UseForTag(p_ExpandedName(None, 'staff-type')), p_Location('musicxml.xsd', 2543, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(staff_details._UseForTag(p_ExpandedName(None, 'staff-lines')), p_Location('musicxml.xsd', 2544, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(staff_details._UseForTag(p_ExpandedName(None, 'staff-tuning')), p_Location('musicxml.xsd', 2549, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(staff_details._UseForTag(p_ExpandedName(None, 'capo')), p_Location('musicxml.xsd', 2550, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(staff_details._UseForTag(p_ExpandedName(None, 'staff-size')), p_Location('musicxml.xsd', 2555, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
staff_details._Automaton = _BuildAutomaton_46()




staff_tuning._AddElement(p_element(p_ExpandedName(None, 'tuning-step'), step, scope=staff_tuning, documentation='The tuning-step element is represented like the step element, with a different name to reflect is different function.', location=p_Location('musicxml.xsd', 5085, 3)))

staff_tuning._AddElement(p_element(p_ExpandedName(None, 'tuning-alter'), semitones, scope=staff_tuning, documentation='The tuning-alter element is represented like the alter element, with a different name to reflect is different function.', location=p_Location('musicxml.xsd', 5090, 3)))

staff_tuning._AddElement(p_element(p_ExpandedName(None, 'tuning-octave'), octave, scope=staff_tuning, documentation='The tuning-octave element is represented like the octave element, with a different name to reflect is different function.', location=p_Location('musicxml.xsd', 5095, 3)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5090, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(staff_tuning._UseForTag(p_ExpandedName(None, 'tuning-step')), p_Location('musicxml.xsd', 5085, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(staff_tuning._UseForTag(p_ExpandedName(None, 'tuning-alter')), p_Location('musicxml.xsd', 5090, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(staff_tuning._UseForTag(p_ExpandedName(None, 'tuning-octave')), p_Location('musicxml.xsd', 5095, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
staff_tuning._Automaton = _BuildAutomaton_47()




transpose._AddElement(p_element(p_ExpandedName(None, 'diatonic'), p_integer, scope=transpose, documentation='The diatonic element specifies the number of pitch steps needed to go from written to sounding pitch. This allows for correct spelling of enharmonic transpositions.', location=p_Location('musicxml.xsd', 2604, 3)))

transpose._AddElement(p_element(p_ExpandedName(None, 'chromatic'), semitones, scope=transpose, documentation='The chromatic element represents the number of semitones needed to get from written to sounding pitch. This value does not include octave-change values; the values for both elements need to be added to the written pitch to get the correct sounding pitch.', location=p_Location('musicxml.xsd', 2609, 3)))

transpose._AddElement(p_element(p_ExpandedName(None, 'octave-change'), p_integer, scope=transpose, documentation='The octave-change element indicates how many octaves to add to get from written pitch to sounding pitch.', location=p_Location('musicxml.xsd', 2614, 3)))

transpose._AddElement(p_element(p_ExpandedName(None, 'double'), empty, scope=transpose, documentation='If the double element is present, it indicates that the music is doubled one octave down from what is currently written (as is the case for mixed cello / bass parts in orchestral literature).', location=p_Location('musicxml.xsd', 2619, 3)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2604, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2614, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2619, 3))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = p_ElementUse(transpose._UseForTag(p_ExpandedName(None, 'diatonic')), p_Location('musicxml.xsd', 2604, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(transpose._UseForTag(p_ExpandedName(None, 'chromatic')), p_Location('musicxml.xsd', 2609, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(transpose._UseForTag(p_ExpandedName(None, 'octave-change')), p_Location('musicxml.xsd', 2614, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(transpose._UseForTag(p_ExpandedName(None, 'double')), p_Location('musicxml.xsd', 2619, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
transpose._Automaton = _BuildAutomaton_48()




barline._AddElement(p_element(p_ExpandedName(None, 'bar-style'), bar_style_color, scope=barline, location=p_Location('musicxml.xsd', 2648, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'wavy-line'), wavy_line, scope=barline, location=p_Location('musicxml.xsd', 2650, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'segno'), empty_print_style_align, scope=barline, location=p_Location('musicxml.xsd', 2651, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'coda'), empty_print_style_align, scope=barline, location=p_Location('musicxml.xsd', 2652, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'fermata'), fermata, scope=barline, location=p_Location('musicxml.xsd', 2653, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'ending'), ending, scope=barline, location=p_Location('musicxml.xsd', 2654, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'repeat'), repeat, scope=barline, location=p_Location('musicxml.xsd', 2655, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=barline, location=p_Location('musicxml.xsd', 5054, 3)))

barline._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=barline, location=p_Location('musicxml.xsd', 5063, 3)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2648, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2650, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2651, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2652, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=2, metadata=p_Location('musicxml.xsd', 2653, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2654, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2655, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'bar-style')), p_Location('musicxml.xsd', 2648, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'wavy-line')), p_Location('musicxml.xsd', 2650, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'segno')), p_Location('musicxml.xsd', 2651, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'coda')), p_Location('musicxml.xsd', 2652, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'fermata')), p_Location('musicxml.xsd', 2653, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'ending')), p_Location('musicxml.xsd', 2654, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(barline._UseForTag(p_ExpandedName(None, 'repeat')), p_Location('musicxml.xsd', 2655, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
barline._Automaton = _BuildAutomaton_49()




accord._AddElement(p_element(p_ExpandedName(None, 'tuning-step'), step, scope=accord, documentation='The tuning-step element is represented like the step element, with a different name to reflect is different function.', location=p_Location('musicxml.xsd', 5085, 3)))

accord._AddElement(p_element(p_ExpandedName(None, 'tuning-alter'), semitones, scope=accord, documentation='The tuning-alter element is represented like the alter element, with a different name to reflect is different function.', location=p_Location('musicxml.xsd', 5090, 3)))

accord._AddElement(p_element(p_ExpandedName(None, 'tuning-octave'), octave, scope=accord, documentation='The tuning-octave element is represented like the octave element, with a different name to reflect is different function.', location=p_Location('musicxml.xsd', 5095, 3)))

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5090, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(accord._UseForTag(p_ExpandedName(None, 'tuning-step')), p_Location('musicxml.xsd', 5085, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(accord._UseForTag(p_ExpandedName(None, 'tuning-alter')), p_Location('musicxml.xsd', 5090, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(accord._UseForTag(p_ExpandedName(None, 'tuning-octave')), p_Location('musicxml.xsd', 5095, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
accord._Automaton = _BuildAutomaton_50()




degree._AddElement(p_element(p_ExpandedName(None, 'degree-value'), degree_value, scope=degree, location=p_Location('musicxml.xsd', 2811, 3)))

degree._AddElement(p_element(p_ExpandedName(None, 'degree-alter'), degree_alter, scope=degree, location=p_Location('musicxml.xsd', 2812, 3)))

degree._AddElement(p_element(p_ExpandedName(None, 'degree-type'), degree_type, scope=degree, location=p_Location('musicxml.xsd', 2813, 3)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(degree._UseForTag(p_ExpandedName(None, 'degree-value')), p_Location('musicxml.xsd', 2811, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(degree._UseForTag(p_ExpandedName(None, 'degree-alter')), p_Location('musicxml.xsd', 2812, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(degree._UseForTag(p_ExpandedName(None, 'degree-type')), p_Location('musicxml.xsd', 2813, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
degree._Automaton = _BuildAutomaton_51()




direction._AddElement(p_element(p_ExpandedName(None, 'direction-type'), direction_type, scope=direction, location=p_Location('musicxml.xsd', 2862, 3)))

direction._AddElement(p_element(p_ExpandedName(None, 'offset'), offset, scope=direction, location=p_Location('musicxml.xsd', 2863, 3)))

direction._AddElement(p_element(p_ExpandedName(None, 'sound'), sound, scope=direction, location=p_Location('musicxml.xsd', 2866, 3)))

direction._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=direction, location=p_Location('musicxml.xsd', 5054, 3)))

direction._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=direction, location=p_Location('musicxml.xsd', 5063, 3)))

direction._AddElement(p_element(p_ExpandedName(None, 'staff'), p_positiveInteger, scope=direction, documentation='Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=p_Location('musicxml.xsd', 5072, 3)))

direction._AddElement(p_element(p_ExpandedName(None, 'voice'), p_string, scope=direction, location=p_Location('musicxml.xsd', 5108, 3)))

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2863, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5043, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5044, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5045, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2865, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2866, 3))
    counters.add(cc_5)
    states = []
    final_update = set()
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'direction-type')), p_Location('musicxml.xsd', 2862, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'offset')), p_Location('musicxml.xsd', 2863, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'voice')), p_Location('musicxml.xsd', 5108, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'staff')), p_Location('musicxml.xsd', 5072, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(direction._UseForTag(p_ExpandedName(None, 'sound')), p_Location('musicxml.xsd', 2866, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
direction._Automaton = _BuildAutomaton_52()




frame._AddElement(p_element(p_ExpandedName(None, 'frame-strings'), p_positiveInteger, scope=frame, documentation='The frame-strings element gives the overall size of the frame in vertical lines (strings).', location=p_Location('musicxml.xsd', 2958, 3)))

frame._AddElement(p_element(p_ExpandedName(None, 'frame-frets'), p_positiveInteger, scope=frame, documentation='The frame-frets element gives the overall size of the frame in horizontal spaces (frets).', location=p_Location('musicxml.xsd', 2963, 3)))

frame._AddElement(p_element(p_ExpandedName(None, 'first-fret'), first_fret, scope=frame, location=p_Location('musicxml.xsd', 2968, 3)))

frame._AddElement(p_element(p_ExpandedName(None, 'frame-note'), frame_note, scope=frame, location=p_Location('musicxml.xsd', 2969, 3)))

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2968, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(frame._UseForTag(p_ExpandedName(None, 'frame-strings')), p_Location('musicxml.xsd', 2958, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(frame._UseForTag(p_ExpandedName(None, 'frame-frets')), p_Location('musicxml.xsd', 2963, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = p_ElementUse(frame._UseForTag(p_ExpandedName(None, 'first-fret')), p_Location('musicxml.xsd', 2968, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(frame._UseForTag(p_ExpandedName(None, 'frame-note')), p_Location('musicxml.xsd', 2969, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
frame._Automaton = _BuildAutomaton_53()




grouping._AddElement(p_element(p_ExpandedName(None, 'feature'), feature, scope=grouping, location=p_Location('musicxml.xsd', 2999, 3)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2999, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(grouping._UseForTag(p_ExpandedName(None, 'feature')), p_Location('musicxml.xsd', 2999, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
grouping._Automaton = _BuildAutomaton_54()




def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4629, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4635, 4))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = p_ElementUse(metronome_tuplet._UseForTag(p_ExpandedName(None, 'actual-notes')), p_Location('musicxml.xsd', 4619, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(metronome_tuplet._UseForTag(p_ExpandedName(None, 'normal-notes')), p_Location('musicxml.xsd', 4624, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(metronome_tuplet._UseForTag(p_ExpandedName(None, 'normal-type')), p_Location('musicxml.xsd', 4630, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(metronome_tuplet._UseForTag(p_ExpandedName(None, 'normal-dot')), p_Location('musicxml.xsd', 4635, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
metronome_tuplet._Automaton = _BuildAutomaton_55()




print_._AddElement(p_element(p_ExpandedName(None, 'measure-layout'), measure_layout, scope=print_, location=p_Location('musicxml.xsd', 3287, 3)))

print_._AddElement(p_element(p_ExpandedName(None, 'measure-numbering'), measure_numbering, scope=print_, location=p_Location('musicxml.xsd', 3288, 3)))

print_._AddElement(p_element(p_ExpandedName(None, 'part-name-display'), name_display, scope=print_, location=p_Location('musicxml.xsd', 3289, 3)))

print_._AddElement(p_element(p_ExpandedName(None, 'part-abbreviation-display'), name_display, scope=print_, location=p_Location('musicxml.xsd', 3290, 3)))

print_._AddElement(p_element(p_ExpandedName(None, 'page-layout'), page_layout, scope=print_, location=p_Location('musicxml.xsd', 5244, 3)))

print_._AddElement(p_element(p_ExpandedName(None, 'system-layout'), system_layout, scope=print_, location=p_Location('musicxml.xsd', 5245, 3)))

print_._AddElement(p_element(p_ExpandedName(None, 'staff-layout'), staff_layout, scope=print_, location=p_Location('musicxml.xsd', 5246, 3)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5244, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5245, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5246, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3287, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3288, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3289, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3290, 3))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'page-layout')), p_Location('musicxml.xsd', 5244, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'system-layout')), p_Location('musicxml.xsd', 5245, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'staff-layout')), p_Location('musicxml.xsd', 5246, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'measure-layout')), p_Location('musicxml.xsd', 3287, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'measure-numbering')), p_Location('musicxml.xsd', 3288, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'part-name-display')), p_Location('musicxml.xsd', 3289, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(print_._UseForTag(p_ExpandedName(None, 'part-abbreviation-display')), p_Location('musicxml.xsd', 3290, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
print_._Automaton = _BuildAutomaton_56()




stick._AddElement(p_element(p_ExpandedName(None, 'stick-type'), stick_type, scope=stick, location=p_Location('musicxml.xsd', 3401, 3)))

stick._AddElement(p_element(p_ExpandedName(None, 'stick-material'), stick_material, scope=stick, location=p_Location('musicxml.xsd', 3402, 3)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(stick._UseForTag(p_ExpandedName(None, 'stick-type')), p_Location('musicxml.xsd', 3401, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(stick._UseForTag(p_ExpandedName(None, 'stick-material')), p_Location('musicxml.xsd', 3402, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
stick._Automaton = _BuildAutomaton_57()




page_margins._AddElement(p_element(p_ExpandedName(None, 'top-margin'), tenths, scope=page_margins, location=p_Location('musicxml.xsd', 5234, 3)))

page_margins._AddElement(p_element(p_ExpandedName(None, 'bottom-margin'), tenths, scope=page_margins, location=p_Location('musicxml.xsd', 5235, 3)))

page_margins._AddElement(p_element(p_ExpandedName(None, 'left-margin'), tenths, scope=page_margins, location=p_Location('musicxml.xsd', 5255, 3)))

page_margins._AddElement(p_element(p_ExpandedName(None, 'right-margin'), tenths, scope=page_margins, location=p_Location('musicxml.xsd', 5256, 3)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = p_ElementUse(page_margins._UseForTag(p_ExpandedName(None, 'left-margin')), p_Location('musicxml.xsd', 5255, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(page_margins._UseForTag(p_ExpandedName(None, 'right-margin')), p_Location('musicxml.xsd', 5256, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = p_ElementUse(page_margins._UseForTag(p_ExpandedName(None, 'top-margin')), p_Location('musicxml.xsd', 5234, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(page_margins._UseForTag(p_ExpandedName(None, 'bottom-margin')), p_Location('musicxml.xsd', 5235, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
page_margins._Automaton = _BuildAutomaton_58()




staff_layout._AddElement(p_element(p_ExpandedName(None, 'staff-distance'), tenths, scope=staff_layout, location=p_Location('musicxml.xsd', 3611, 3)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3611, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(staff_layout._UseForTag(p_ExpandedName(None, 'staff-distance')), p_Location('musicxml.xsd', 3611, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
staff_layout._Automaton = _BuildAutomaton_59()




lyric._AddElement(p_element(p_ExpandedName(None, 'syllabic'), syllabic, scope=lyric, location=p_Location('musicxml.xsd', 4100, 5)))

lyric._AddElement(p_element(p_ExpandedName(None, 'text'), text_element_data, scope=lyric, location=p_Location('musicxml.xsd', 4101, 5)))

lyric._AddElement(p_element(p_ExpandedName(None, 'elision'), text_font_color, scope=lyric, location=p_Location('musicxml.xsd', 4104, 7)))

lyric._AddElement(p_element(p_ExpandedName(None, 'extend'), extend, scope=lyric, location=p_Location('musicxml.xsd', 4109, 5)))

lyric._AddElement(p_element(p_ExpandedName(None, 'laughing'), empty, scope=lyric, documentation='The laughing element is taken from Humdrum.', location=p_Location('musicxml.xsd', 4112, 4)))

lyric._AddElement(p_element(p_ExpandedName(None, 'humming'), empty, scope=lyric, documentation='The humming element is taken from Humdrum.', location=p_Location('musicxml.xsd', 4117, 4)))

lyric._AddElement(p_element(p_ExpandedName(None, 'end-line'), empty, scope=lyric, documentation='The end-line element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.', location=p_Location('musicxml.xsd', 4123, 3)))

lyric._AddElement(p_element(p_ExpandedName(None, 'end-paragraph'), empty, scope=lyric, documentation='The end-paragraph element comes from RP-017 for Standard MIDI File Lyric meta-events. It facilitates lyric display for Karaoke and similar applications.', location=p_Location('musicxml.xsd', 4128, 3)))

lyric._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=lyric, location=p_Location('musicxml.xsd', 5054, 3)))

lyric._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=lyric, location=p_Location('musicxml.xsd', 5063, 3)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4100, 5))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4102, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4103, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4105, 7))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4109, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4123, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4128, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_8)
    states = []
    final_update = None
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'syllabic')), p_Location('musicxml.xsd', 4100, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'text')), p_Location('musicxml.xsd', 4101, 5))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'elision')), p_Location('musicxml.xsd', 4104, 7))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'syllabic')), p_Location('musicxml.xsd', 4105, 7))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'text')), p_Location('musicxml.xsd', 4107, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'extend')), p_Location('musicxml.xsd', 4109, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'extend')), p_Location('musicxml.xsd', 4111, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'laughing')), p_Location('musicxml.xsd', 4112, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'humming')), p_Location('musicxml.xsd', 4117, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'end-line')), p_Location('musicxml.xsd', 4123, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'end-paragraph')), p_Location('musicxml.xsd', 4128, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(lyric._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
lyric._Automaton = _BuildAutomaton_60()




notations._AddElement(p_element(p_ExpandedName(None, 'tied'), tied, scope=notations, location=p_Location('musicxml.xsd', 4175, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'slur'), slur, scope=notations, location=p_Location('musicxml.xsd', 4176, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'tuplet'), tuplet, scope=notations, location=p_Location('musicxml.xsd', 4177, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'glissando'), glissando, scope=notations, location=p_Location('musicxml.xsd', 4178, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'slide'), slide, scope=notations, location=p_Location('musicxml.xsd', 4179, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'ornaments'), ornaments, scope=notations, location=p_Location('musicxml.xsd', 4180, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'technical'), technical, scope=notations, location=p_Location('musicxml.xsd', 4181, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'articulations'), articulations, scope=notations, location=p_Location('musicxml.xsd', 4182, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'dynamics'), dynamics, scope=notations, location=p_Location('musicxml.xsd', 4183, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'fermata'), fermata, scope=notations, location=p_Location('musicxml.xsd', 4184, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'arpeggiate'), arpeggiate, scope=notations, location=p_Location('musicxml.xsd', 4185, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'non-arpeggiate'), non_arpeggiate, scope=notations, location=p_Location('musicxml.xsd', 4186, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'accidental-mark'), accidental_mark, scope=notations, location=p_Location('musicxml.xsd', 4187, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'other-notation'), other_notation, scope=notations, location=p_Location('musicxml.xsd', 4188, 4)))

notations._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=notations, location=p_Location('musicxml.xsd', 5054, 3)))

notations._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=notations, location=p_Location('musicxml.xsd', 5063, 3)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4174, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'tied')), p_Location('musicxml.xsd', 4175, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'slur')), p_Location('musicxml.xsd', 4176, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'tuplet')), p_Location('musicxml.xsd', 4177, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'glissando')), p_Location('musicxml.xsd', 4178, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'slide')), p_Location('musicxml.xsd', 4179, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'ornaments')), p_Location('musicxml.xsd', 4180, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'technical')), p_Location('musicxml.xsd', 4181, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'articulations')), p_Location('musicxml.xsd', 4182, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'dynamics')), p_Location('musicxml.xsd', 4183, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'fermata')), p_Location('musicxml.xsd', 4184, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'arpeggiate')), p_Location('musicxml.xsd', 4185, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'non-arpeggiate')), p_Location('musicxml.xsd', 4186, 4))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'accidental-mark')), p_Location('musicxml.xsd', 4187, 4))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(notations._UseForTag(p_ExpandedName(None, 'other-notation')), p_Location('musicxml.xsd', 4188, 4))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
notations._Automaton = _BuildAutomaton_61()




rest._AddElement(p_element(p_ExpandedName(None, 'display-step'), step, scope=rest, location=p_Location('musicxml.xsd', 5280, 3)))

rest._AddElement(p_element(p_ExpandedName(None, 'display-octave'), octave, scope=rest, location=p_Location('musicxml.xsd', 5281, 3)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4405, 3))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(rest._UseForTag(p_ExpandedName(None, 'display-step')), p_Location('musicxml.xsd', 5280, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(rest._UseForTag(p_ExpandedName(None, 'display-octave')), p_Location('musicxml.xsd', 5281, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
rest._Automaton = _BuildAutomaton_62()




tuplet._AddElement(p_element(p_ExpandedName(None, 'tuplet-actual'), tuplet_portion, scope=tuplet, documentation='The tuplet-actual element provide optional full control over how the actual part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.', location=p_Location('musicxml.xsd', 4670, 3)))

tuplet._AddElement(p_element(p_ExpandedName(None, 'tuplet-normal'), tuplet_portion, scope=tuplet, documentation='The tuplet-normal element provide optional full control over how the normal part of the tuplet is displayed, including number and note type (with dots). If any of these elements are absent, their values are based on the time-modification element.', location=p_Location('musicxml.xsd', 4675, 3)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4670, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4675, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(tuplet._UseForTag(p_ExpandedName(None, 'tuplet-actual')), p_Location('musicxml.xsd', 4670, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(tuplet._UseForTag(p_ExpandedName(None, 'tuplet-normal')), p_Location('musicxml.xsd', 4675, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
tuplet._Automaton = _BuildAutomaton_63()




part_group._AddElement(p_element(p_ExpandedName(None, 'group-name'), group_name, scope=part_group, location=p_Location('musicxml.xsd', 4865, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'group-name-display'), name_display, scope=part_group, documentation='Formatting specified in the group-name-display element overrides formatting specified in the group-name element.', location=p_Location('musicxml.xsd', 4866, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'group-abbreviation'), group_name, scope=part_group, location=p_Location('musicxml.xsd', 4871, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'group-abbreviation-display'), name_display, scope=part_group, documentation='Formatting specified in the group-abbreviation-display element overrides formatting specified in the group-abbreviation element.', location=p_Location('musicxml.xsd', 4872, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'group-symbol'), group_symbol, scope=part_group, location=p_Location('musicxml.xsd', 4877, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'group-barline'), group_barline, scope=part_group, location=p_Location('musicxml.xsd', 4878, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'group-time'), empty, scope=part_group, documentation='The group-time element indicates that the displayed time signatures should stretch across all parts and staves in the group.', location=p_Location('musicxml.xsd', 4879, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=part_group, location=p_Location('musicxml.xsd', 5054, 3)))

part_group._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=part_group, location=p_Location('musicxml.xsd', 5063, 3)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4865, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4866, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4871, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4872, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4877, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4878, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4879, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_8)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-name')), p_Location('musicxml.xsd', 4865, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-name-display')), p_Location('musicxml.xsd', 4866, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-abbreviation')), p_Location('musicxml.xsd', 4871, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-abbreviation-display')), p_Location('musicxml.xsd', 4872, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-symbol')), p_Location('musicxml.xsd', 4877, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-barline')), p_Location('musicxml.xsd', 4878, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'group-time')), p_Location('musicxml.xsd', 4879, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(part_group._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
part_group._Automaton = _BuildAutomaton_64()




CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'note'), note, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5311, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'backup'), backup, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5312, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'forward'), forward, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5313, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'direction'), direction, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5314, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'attributes'), attributes, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5315, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'harmony'), harmony, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5316, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'figured-bass'), figured_bass, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5317, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'print'), print_, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5318, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'sound'), sound, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5319, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'barline'), barline, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5320, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'grouping'), grouping, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5321, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'link'), link, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5322, 4)))

CTD_ANON_4._AddElement(p_element(p_ExpandedName(None, 'bookmark'), bookmark, scope=CTD_ANON_4, location=p_Location('musicxml.xsd', 5323, 4)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5310, 3))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'note')), p_Location('musicxml.xsd', 5311, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'backup')), p_Location('musicxml.xsd', 5312, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'forward')), p_Location('musicxml.xsd', 5313, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'direction')), p_Location('musicxml.xsd', 5314, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'attributes')), p_Location('musicxml.xsd', 5315, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'harmony')), p_Location('musicxml.xsd', 5316, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'figured-bass')), p_Location('musicxml.xsd', 5317, 4))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'print')), p_Location('musicxml.xsd', 5318, 4))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'sound')), p_Location('musicxml.xsd', 5319, 4))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'barline')), p_Location('musicxml.xsd', 5320, 4))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'grouping')), p_Location('musicxml.xsd', 5321, 4))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'link')), p_Location('musicxml.xsd', 5322, 4))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(CTD_ANON_4._UseForTag(p_ExpandedName(None, 'bookmark')), p_Location('musicxml.xsd', 5323, 4))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_65()




CTD_ANON_5._AddElement(p_element(p_ExpandedName(None, 'part'), CTD_ANON_3, scope=CTD_ANON_5, location=p_Location('musicxml.xsd', 5413, 7)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(CTD_ANON_5._UseForTag(p_ExpandedName(None, 'part')), p_Location('musicxml.xsd', 5413, 7))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_66()




dynamics._AddElement(p_element(p_ExpandedName(None, 'p'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 1998, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'pp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 1999, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'ppp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2000, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'pppp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2001, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'ppppp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2002, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'pppppp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2003, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'f'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2004, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'ff'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2005, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'fff'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2006, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'ffff'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2007, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'fffff'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2008, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'ffffff'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2009, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'mp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2010, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'mf'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2011, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'sf'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2012, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'sfp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2013, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'sfpp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2014, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'fp'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2015, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'rf'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2016, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'rfz'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2017, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'sfz'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2018, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'sffz'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2019, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'fz'), empty, scope=dynamics, location=p_Location('musicxml.xsd', 2020, 3)))

dynamics._AddElement(p_element(p_ExpandedName(None, 'other-dynamics'), p_string, scope=dynamics, location=p_Location('musicxml.xsd', 2021, 3)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 1997, 2))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'p')), p_Location('musicxml.xsd', 1998, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'pp')), p_Location('musicxml.xsd', 1999, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'ppp')), p_Location('musicxml.xsd', 2000, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'pppp')), p_Location('musicxml.xsd', 2001, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'ppppp')), p_Location('musicxml.xsd', 2002, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'pppppp')), p_Location('musicxml.xsd', 2003, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'f')), p_Location('musicxml.xsd', 2004, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'ff')), p_Location('musicxml.xsd', 2005, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'fff')), p_Location('musicxml.xsd', 2006, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'ffff')), p_Location('musicxml.xsd', 2007, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'fffff')), p_Location('musicxml.xsd', 2008, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'ffffff')), p_Location('musicxml.xsd', 2009, 3))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'mp')), p_Location('musicxml.xsd', 2010, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'mf')), p_Location('musicxml.xsd', 2011, 3))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'sf')), p_Location('musicxml.xsd', 2012, 3))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'sfp')), p_Location('musicxml.xsd', 2013, 3))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'sfpp')), p_Location('musicxml.xsd', 2014, 3))
    st_16 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'fp')), p_Location('musicxml.xsd', 2015, 3))
    st_17 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'rf')), p_Location('musicxml.xsd', 2016, 3))
    st_18 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'rfz')), p_Location('musicxml.xsd', 2017, 3))
    st_19 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'sfz')), p_Location('musicxml.xsd', 2018, 3))
    st_20 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'sffz')), p_Location('musicxml.xsd', 2019, 3))
    st_21 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'fz')), p_Location('musicxml.xsd', 2020, 3))
    st_22 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(dynamics._UseForTag(p_ExpandedName(None, 'other-dynamics')), p_Location('musicxml.xsd', 2021, 3))
    st_23 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
dynamics._Automaton = _BuildAutomaton_67()




clef._AddElement(p_element(p_ExpandedName(None, 'sign'), clef_sign, scope=clef, documentation='The sign element represents the clef symbol.', location=p_Location('musicxml.xsd', 2404, 3)))

clef._AddElement(p_element(p_ExpandedName(None, 'line'), staff_line, scope=clef, documentation='Line numbers are counted from the bottom of the staff. Standard values are 2 for the G sign (treble clef), 4 for the F sign (bass clef), 3 for the C sign (alto clef) and 5 for TAB (on a 6-line staff).', location=p_Location('musicxml.xsd', 2409, 3)))

clef._AddElement(p_element(p_ExpandedName(None, 'clef-octave-change'), p_integer, scope=clef, documentation='The clef-octave-change element is used for transposing clefs. A treble clef for tenors would have a value of -1.', location=p_Location('musicxml.xsd', 2414, 3)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2409, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2414, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = p_ElementUse(clef._UseForTag(p_ExpandedName(None, 'sign')), p_Location('musicxml.xsd', 2404, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(clef._UseForTag(p_ExpandedName(None, 'line')), p_Location('musicxml.xsd', 2409, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(clef._UseForTag(p_ExpandedName(None, 'clef-octave-change')), p_Location('musicxml.xsd', 2414, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
clef._Automaton = _BuildAutomaton_68()




key._AddElement(p_element(p_ExpandedName(None, 'key-octave'), key_octave, scope=key, documentation='The optional list of key-octave elements is used to specify in which octave each element of the key signature appears.', location=p_Location('musicxml.xsd', 2449, 3)))

key._AddElement(p_element(p_ExpandedName(None, 'key-step'), step, scope=key, documentation='Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-step element indicates the pitch step to be altered, represented using the same names as in the step element.', location=p_Location('musicxml.xsd', 5119, 3)))

key._AddElement(p_element(p_ExpandedName(None, 'key-alter'), semitones, scope=key, documentation='Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-alter element represents the alteration for a given pitch step, represented with semitones in the same manner as the alter element.', location=p_Location('musicxml.xsd', 5124, 3)))

key._AddElement(p_element(p_ExpandedName(None, 'key-accidental'), accidental_value, scope=key, documentation='Non-traditional key signatures can be represented using the Humdrum/Scot concept of a list of altered tones. The key-accidental element indicates the accidental to be displayed in the key signature, represented in the same manner as the accidental element. It is used for disambiguating microtonal accidentals.', location=p_Location('musicxml.xsd', 5129, 3)))

key._AddElement(p_element(p_ExpandedName(None, 'cancel'), cancel, scope=key, location=p_Location('musicxml.xsd', 5178, 3)))

key._AddElement(p_element(p_ExpandedName(None, 'fifths'), fifths, scope=key, location=p_Location('musicxml.xsd', 5179, 3)))

key._AddElement(p_element(p_ExpandedName(None, 'mode'), mode, scope=key, location=p_Location('musicxml.xsd', 5180, 3)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5178, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5180, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2447, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5129, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 2449, 3))
    counters.add(cc_4)
    states = []
    final_update = None
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'cancel')), p_Location('musicxml.xsd', 5178, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'fifths')), p_Location('musicxml.xsd', 5179, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'mode')), p_Location('musicxml.xsd', 5180, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'key-step')), p_Location('musicxml.xsd', 5119, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'key-alter')), p_Location('musicxml.xsd', 5124, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'key-accidental')), p_Location('musicxml.xsd', 5129, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(key._UseForTag(p_ExpandedName(None, 'key-octave')), p_Location('musicxml.xsd', 2449, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
key._Automaton = _BuildAutomaton_69()




measure_style._AddElement(p_element(p_ExpandedName(None, 'multiple-rest'), multiple_rest, scope=measure_style, location=p_Location('musicxml.xsd', 2493, 3)))

measure_style._AddElement(p_element(p_ExpandedName(None, 'measure-repeat'), measure_repeat, scope=measure_style, location=p_Location('musicxml.xsd', 2494, 3)))

measure_style._AddElement(p_element(p_ExpandedName(None, 'beat-repeat'), beat_repeat, scope=measure_style, location=p_Location('musicxml.xsd', 2495, 3)))

measure_style._AddElement(p_element(p_ExpandedName(None, 'slash'), slash, scope=measure_style, location=p_Location('musicxml.xsd', 2496, 3)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(measure_style._UseForTag(p_ExpandedName(None, 'multiple-rest')), p_Location('musicxml.xsd', 2493, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(measure_style._UseForTag(p_ExpandedName(None, 'measure-repeat')), p_Location('musicxml.xsd', 2494, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(measure_style._UseForTag(p_ExpandedName(None, 'beat-repeat')), p_Location('musicxml.xsd', 2495, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(measure_style._UseForTag(p_ExpandedName(None, 'slash')), p_Location('musicxml.xsd', 2496, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
measure_style._Automaton = _BuildAutomaton_70()




time._AddElement(p_element(p_ExpandedName(None, 'interchangeable'), interchangeable, scope=time, location=p_Location('musicxml.xsd', 2584, 4)))

time._AddElement(p_element(p_ExpandedName(None, 'senza-misura'), p_string, scope=time, documentation="A senza-misura element explicitly indicates that no time signature is present. The optional element content indicates the symbol to be used, if any, such as an X. The time element's symbol attribute is not used when a senza-misura element is present.", location=p_Location('musicxml.xsd', 2586, 3)))

time._AddElement(p_element(p_ExpandedName(None, 'beats'), p_string, scope=time, documentation='The beats element indicates the number of beats, as found in the numerator of a time signature.', location=p_Location('musicxml.xsd', 5160, 3)))

time._AddElement(p_element(p_ExpandedName(None, 'beat-type'), p_string, scope=time, documentation='The beat-type element indicates the beat unit, as found in the denominator of a time signature.', location=p_Location('musicxml.xsd', 5165, 3)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2584, 4))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = p_ElementUse(time._UseForTag(p_ExpandedName(None, 'beats')), p_Location('musicxml.xsd', 5160, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(time._UseForTag(p_ExpandedName(None, 'beat-type')), p_Location('musicxml.xsd', 5165, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(time._UseForTag(p_ExpandedName(None, 'interchangeable')), p_Location('musicxml.xsd', 2584, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(time._UseForTag(p_ExpandedName(None, 'senza-misura')), p_Location('musicxml.xsd', 2586, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
time._Automaton = _BuildAutomaton_71()




accordion_registration._AddElement(p_element(p_ExpandedName(None, 'accordion-high'), empty, scope=accordion_registration, documentation="The accordion-high element indicates the presence of a dot in the high (4') section of the registration symbol.", location=p_Location('musicxml.xsd', 2706, 3)))

accordion_registration._AddElement(p_element(p_ExpandedName(None, 'accordion-middle'), accordion_middle, scope=accordion_registration, documentation="The accordion-middle element indicates the presence of 1 to 3 dots in the middle (8') section of the registration symbol.", location=p_Location('musicxml.xsd', 2711, 3)))

accordion_registration._AddElement(p_element(p_ExpandedName(None, 'accordion-low'), empty, scope=accordion_registration, documentation="The accordion-low element indicates the presence of a dot in the low (16') section of the registration symbol.", location=p_Location('musicxml.xsd', 2716, 3)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2706, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2711, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 2716, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(accordion_registration._UseForTag(p_ExpandedName(None, 'accordion-high')), p_Location('musicxml.xsd', 2706, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(accordion_registration._UseForTag(p_ExpandedName(None, 'accordion-middle')), p_Location('musicxml.xsd', 2711, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(accordion_registration._UseForTag(p_ExpandedName(None, 'accordion-low')), p_Location('musicxml.xsd', 2716, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
accordion_registration._Automaton = _BuildAutomaton_72()




harmony._AddElement(p_element(p_ExpandedName(None, 'frame'), frame, scope=harmony, location=p_Location('musicxml.xsd', 3016, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'offset'), offset, scope=harmony, location=p_Location('musicxml.xsd', 3017, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=harmony, location=p_Location('musicxml.xsd', 5054, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=harmony, location=p_Location('musicxml.xsd', 5063, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'staff'), p_positiveInteger, scope=harmony, documentation='Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=p_Location('musicxml.xsd', 5072, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'root'), root, scope=harmony, location=p_Location('musicxml.xsd', 5212, 4)))

harmony._AddElement(p_element(p_ExpandedName(None, 'function'), style_text, scope=harmony, documentation='The function element is used to represent classical functional harmony with an indication like I, II, III rather than C, D, E. It is relative to the key that is specified in the MusicXML encoding.', location=p_Location('musicxml.xsd', 5213, 4)))

harmony._AddElement(p_element(p_ExpandedName(None, 'kind'), kind, scope=harmony, location=p_Location('musicxml.xsd', 5219, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'inversion'), inversion, scope=harmony, location=p_Location('musicxml.xsd', 5220, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'bass'), bass, scope=harmony, location=p_Location('musicxml.xsd', 5221, 3)))

harmony._AddElement(p_element(p_ExpandedName(None, 'degree'), degree, scope=harmony, location=p_Location('musicxml.xsd', 5222, 3)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5220, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5221, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5222, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3016, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3017, 3))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3019, 3))
    counters.add(cc_7)
    states = []
    final_update = None
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'root')), p_Location('musicxml.xsd', 5212, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'function')), p_Location('musicxml.xsd', 5213, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'kind')), p_Location('musicxml.xsd', 5219, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'inversion')), p_Location('musicxml.xsd', 5220, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'bass')), p_Location('musicxml.xsd', 5221, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'degree')), p_Location('musicxml.xsd', 5222, 3))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'frame')), p_Location('musicxml.xsd', 3016, 3))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'offset')), p_Location('musicxml.xsd', 3017, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(harmony._UseForTag(p_ExpandedName(None, 'staff')), p_Location('musicxml.xsd', 5072, 3))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
harmony._Automaton = _BuildAutomaton_73()




harp_pedals._AddElement(p_element(p_ExpandedName(None, 'pedal-tuning'), pedal_tuning, scope=harp_pedals, location=p_Location('musicxml.xsd', 3033, 3)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(harp_pedals._UseForTag(p_ExpandedName(None, 'pedal-tuning')), p_Location('musicxml.xsd', 3033, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
harp_pedals._Automaton = _BuildAutomaton_74()




metronome._AddElement(p_element(p_ExpandedName(None, 'per-minute'), per_minute, scope=metronome, location=p_Location('musicxml.xsd', 3107, 5)))

metronome._AddElement(p_element(p_ExpandedName(None, 'metronome-note'), metronome_note, scope=metronome, location=p_Location('musicxml.xsd', 3112, 4)))

metronome._AddElement(p_element(p_ExpandedName(None, 'metronome-relation'), p_string, scope=metronome, documentation='The metronome-relation element describes the relationship symbol that goes between the two sets of metronome-note elements. The currently allowed value is equals, but this may expand in future versions. If the element is empty, the equals value is used.', location=p_Location('musicxml.xsd', 3114, 5)))

metronome._AddElement(p_element(p_ExpandedName(None, 'beat-unit'), note_type_value, scope=metronome, documentation='The beat-unit element indicates the graphical note type to use in a metronome mark.', location=p_Location('musicxml.xsd', 5191, 3)))

metronome._AddElement(p_element(p_ExpandedName(None, 'beat-unit-dot'), empty, scope=metronome, documentation='The beat-unit-dot element is used to specify any augmentation dots for a metronome mark note.', location=p_Location('musicxml.xsd', 5196, 3)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5196, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 5196, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3113, 4))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'beat-unit')), p_Location('musicxml.xsd', 5191, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'beat-unit-dot')), p_Location('musicxml.xsd', 5196, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'per-minute')), p_Location('musicxml.xsd', 3107, 5))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'beat-unit')), p_Location('musicxml.xsd', 5191, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'beat-unit-dot')), p_Location('musicxml.xsd', 5196, 3))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'metronome-note')), p_Location('musicxml.xsd', 3112, 4))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'metronome-relation')), p_Location('musicxml.xsd', 3114, 5))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(metronome._UseForTag(p_ExpandedName(None, 'metronome-note')), p_Location('musicxml.xsd', 3119, 5))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
metronome._Automaton = _BuildAutomaton_75()




percussion._AddElement(p_element(p_ExpandedName(None, 'glass'), glass, scope=percussion, location=p_Location('musicxml.xsd', 3250, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'metal'), metal, scope=percussion, location=p_Location('musicxml.xsd', 3251, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'wood'), wood, scope=percussion, location=p_Location('musicxml.xsd', 3252, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'pitched'), pitched, scope=percussion, location=p_Location('musicxml.xsd', 3253, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'membrane'), membrane, scope=percussion, location=p_Location('musicxml.xsd', 3254, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'effect'), effect, scope=percussion, location=p_Location('musicxml.xsd', 3255, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'timpani'), empty, scope=percussion, location=p_Location('musicxml.xsd', 3256, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'beater'), beater, scope=percussion, location=p_Location('musicxml.xsd', 3257, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'stick'), stick, scope=percussion, location=p_Location('musicxml.xsd', 3258, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'stick-location'), stick_location, scope=percussion, location=p_Location('musicxml.xsd', 3259, 3)))

percussion._AddElement(p_element(p_ExpandedName(None, 'other-percussion'), p_string, scope=percussion, location=p_Location('musicxml.xsd', 3260, 3)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'glass')), p_Location('musicxml.xsd', 3250, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'metal')), p_Location('musicxml.xsd', 3251, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'wood')), p_Location('musicxml.xsd', 3252, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'pitched')), p_Location('musicxml.xsd', 3253, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'membrane')), p_Location('musicxml.xsd', 3254, 3))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'effect')), p_Location('musicxml.xsd', 3255, 3))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'timpani')), p_Location('musicxml.xsd', 3256, 3))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'beater')), p_Location('musicxml.xsd', 3257, 3))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'stick')), p_Location('musicxml.xsd', 3258, 3))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'stick-location')), p_Location('musicxml.xsd', 3259, 3))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = p_ElementUse(percussion._UseForTag(p_ExpandedName(None, 'other-percussion')), p_Location('musicxml.xsd', 3260, 3))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
percussion._Automaton = _BuildAutomaton_76()




sound._AddElement(p_element(p_ExpandedName(None, 'midi-device'), midi_device, scope=sound, location=p_Location('musicxml.xsd', 3371, 4)))

sound._AddElement(p_element(p_ExpandedName(None, 'midi-instrument'), midi_instrument, scope=sound, location=p_Location('musicxml.xsd', 3372, 4)))

sound._AddElement(p_element(p_ExpandedName(None, 'play'), play, scope=sound, location=p_Location('musicxml.xsd', 3373, 4)))

sound._AddElement(p_element(p_ExpandedName(None, 'offset'), offset, scope=sound, location=p_Location('musicxml.xsd', 3375, 3)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 3370, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3371, 4))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3372, 4))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3373, 4))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3375, 3))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(sound._UseForTag(p_ExpandedName(None, 'midi-device')), p_Location('musicxml.xsd', 3371, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(sound._UseForTag(p_ExpandedName(None, 'midi-instrument')), p_Location('musicxml.xsd', 3372, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = p_ElementUse(sound._UseForTag(p_ExpandedName(None, 'play')), p_Location('musicxml.xsd', 3373, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(sound._UseForTag(p_ExpandedName(None, 'offset')), p_Location('musicxml.xsd', 3375, 3))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_1, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_2, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True),
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False),
        fac.UpdateInstruction(cc_3, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
sound._Automaton = _BuildAutomaton_77()




arrow._AddElement(p_element(p_ExpandedName(None, 'arrow-direction'), arrow_direction, scope=arrow, location=p_Location('musicxml.xsd', 3799, 4)))

arrow._AddElement(p_element(p_ExpandedName(None, 'arrow-style'), arrow_style, scope=arrow, location=p_Location('musicxml.xsd', 3800, 4)))

arrow._AddElement(p_element(p_ExpandedName(None, 'circular-arrow'), circular_arrow, scope=arrow, location=p_Location('musicxml.xsd', 3802, 3)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3800, 4))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = p_ElementUse(arrow._UseForTag(p_ExpandedName(None, 'arrow-direction')), p_Location('musicxml.xsd', 3799, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(arrow._UseForTag(p_ExpandedName(None, 'arrow-style')), p_Location('musicxml.xsd', 3800, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(arrow._UseForTag(p_ExpandedName(None, 'circular-arrow')), p_Location('musicxml.xsd', 3802, 3))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
arrow._Automaton = _BuildAutomaton_78()




bend._AddElement(p_element(p_ExpandedName(None, 'bend-alter'), semitones, scope=bend, documentation='The bend-alter element indicates the number of steps in the bend, similar to the alter element. As with the alter element, numbers like 0.5 can be used to indicate microtones. Negative numbers indicate pre-bends or releases; the pre-bend and release elements are used to distinguish what is intended.', location=p_Location('musicxml.xsd', 3843, 3)))

bend._AddElement(p_element(p_ExpandedName(None, 'pre-bend'), empty, scope=bend, documentation='The pre-bend element indicates that this is a pre-bend rather than a normal bend or a release.', location=p_Location('musicxml.xsd', 3849, 4)))

bend._AddElement(p_element(p_ExpandedName(None, 'release'), empty, scope=bend, documentation='The release element indicates that this is a release rather than a normal bend or pre-bend.', location=p_Location('musicxml.xsd', 3854, 4)))

bend._AddElement(p_element(p_ExpandedName(None, 'with-bar'), placement_text, scope=bend, documentation='The with-bar element indicates that the bend is to be done at the bridge with a whammy or vibrato bar. The content of the element indicates how this should be notated.', location=p_Location('musicxml.xsd', 3860, 3)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3848, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3860, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    symbol = p_ElementUse(bend._UseForTag(p_ExpandedName(None, 'bend-alter')), p_Location('musicxml.xsd', 3843, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(bend._UseForTag(p_ExpandedName(None, 'pre-bend')), p_Location('musicxml.xsd', 3849, 4))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(bend._UseForTag(p_ExpandedName(None, 'release')), p_Location('musicxml.xsd', 3854, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(bend._UseForTag(p_ExpandedName(None, 'with-bar')), p_Location('musicxml.xsd', 3860, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
bend._Automaton = _BuildAutomaton_79()




figured_bass._AddElement(p_element(p_ExpandedName(None, 'figure'), figure, scope=figured_bass, location=p_Location('musicxml.xsd', 3932, 3)))

figured_bass._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=figured_bass, location=p_Location('musicxml.xsd', 5054, 3)))

figured_bass._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=figured_bass, location=p_Location('musicxml.xsd', 5063, 3)))

figured_bass._AddElement(p_element(p_ExpandedName(None, 'duration'), positive_divisions, scope=figured_bass, documentation="Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=p_Location('musicxml.xsd', 5267, 3)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 3933, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5022, 3))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5023, 3))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = p_ElementUse(figured_bass._UseForTag(p_ExpandedName(None, 'figure')), p_Location('musicxml.xsd', 3932, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(figured_bass._UseForTag(p_ExpandedName(None, 'duration')), p_Location('musicxml.xsd', 5267, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(figured_bass._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = p_ElementUse(figured_bass._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
figured_bass._Automaton = _BuildAutomaton_80()




harmonic._AddElement(p_element(p_ExpandedName(None, 'natural'), empty, scope=harmonic, documentation='The natural element indicates that this is a natural harmonic. These are usually notated at base pitch rather than sounding pitch.', location=p_Location('musicxml.xsd', 4009, 4)))

harmonic._AddElement(p_element(p_ExpandedName(None, 'artificial'), empty, scope=harmonic, documentation='The artificial element indicates that this is an artificial harmonic.', location=p_Location('musicxml.xsd', 4014, 4)))

harmonic._AddElement(p_element(p_ExpandedName(None, 'base-pitch'), empty, scope=harmonic, documentation='The base pitch is the pitch at which the string is played before touching to create the harmonic.', location=p_Location('musicxml.xsd', 4021, 4)))

harmonic._AddElement(p_element(p_ExpandedName(None, 'touching-pitch'), empty, scope=harmonic, documentation='The touching-pitch is the pitch at which the string is touched lightly to produce the harmonic.', location=p_Location('musicxml.xsd', 4026, 4)))

harmonic._AddElement(p_element(p_ExpandedName(None, 'sounding-pitch'), empty, scope=harmonic, documentation='The sounding-pitch is the pitch which is heard when playing the harmonic.', location=p_Location('musicxml.xsd', 4031, 4)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4008, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4020, 3))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(harmonic._UseForTag(p_ExpandedName(None, 'natural')), p_Location('musicxml.xsd', 4009, 4))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = p_ElementUse(harmonic._UseForTag(p_ExpandedName(None, 'artificial')), p_Location('musicxml.xsd', 4014, 4))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(harmonic._UseForTag(p_ExpandedName(None, 'base-pitch')), p_Location('musicxml.xsd', 4021, 4))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(harmonic._UseForTag(p_ExpandedName(None, 'touching-pitch')), p_Location('musicxml.xsd', 4026, 4))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(harmonic._UseForTag(p_ExpandedName(None, 'sounding-pitch')), p_Location('musicxml.xsd', 4031, 4))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
harmonic._Automaton = _BuildAutomaton_81()




hole._AddElement(p_element(p_ExpandedName(None, 'hole-type'), p_string, scope=hole, documentation='The content of the optional hole-type element indicates what the hole symbol represents in terms of instrument fingering or other techniques.', location=p_Location('musicxml.xsd', 4059, 3)))

hole._AddElement(p_element(p_ExpandedName(None, 'hole-closed'), hole_closed, scope=hole, location=p_Location('musicxml.xsd', 4064, 3)))

hole._AddElement(p_element(p_ExpandedName(None, 'hole-shape'), p_string, scope=hole, documentation='The optional hole-shape element indicates the shape of the hole symbol; the default is a circle.', location=p_Location('musicxml.xsd', 4065, 3)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4059, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4065, 3))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = p_ElementUse(hole._UseForTag(p_ExpandedName(None, 'hole-type')), p_Location('musicxml.xsd', 4059, 3))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = p_ElementUse(hole._UseForTag(p_ExpandedName(None, 'hole-closed')), p_Location('musicxml.xsd', 4064, 3))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(hole._UseForTag(p_ExpandedName(None, 'hole-shape')), p_Location('musicxml.xsd', 4065, 3))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
hole._Automaton = _BuildAutomaton_82()




note._AddElement(p_element(p_ExpandedName(None, 'grace'), grace, scope=note, location=p_Location('musicxml.xsd', 4203, 5)))

note._AddElement(p_element(p_ExpandedName(None, 'tie'), tie, scope=note, location=p_Location('musicxml.xsd', 4205, 5)))

note._AddElement(p_element(p_ExpandedName(None, 'cue'), empty, scope=note, documentation='The cue element indicates the presence of a cue note.', location=p_Location('musicxml.xsd', 4208, 5)))

note._AddElement(p_element(p_ExpandedName(None, 'instrument'), instrument, scope=note, location=p_Location('musicxml.xsd', 4222, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'type'), note_type, scope=note, location=p_Location('musicxml.xsd', 4224, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'dot'), empty_placement, scope=note, documentation='One dot element is used for each dot of prolongation. The placement element is used to specify whether the dot should appear above or below the staff line. It is ignored for notes that appear on a staff space.', location=p_Location('musicxml.xsd', 4225, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'accidental'), accidental, scope=note, location=p_Location('musicxml.xsd', 4230, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'time-modification'), time_modification, scope=note, location=p_Location('musicxml.xsd', 4231, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'stem'), stem, scope=note, location=p_Location('musicxml.xsd', 4232, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'notehead'), notehead, scope=note, location=p_Location('musicxml.xsd', 4233, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'notehead-text'), notehead_text, scope=note, location=p_Location('musicxml.xsd', 4234, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'beam'), beam, scope=note, location=p_Location('musicxml.xsd', 4236, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'notations'), notations, scope=note, location=p_Location('musicxml.xsd', 4237, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'lyric'), lyric, scope=note, location=p_Location('musicxml.xsd', 4238, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'play'), play, scope=note, location=p_Location('musicxml.xsd', 4239, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'footnote'), formatted_text, scope=note, location=p_Location('musicxml.xsd', 5054, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'level'), level, scope=note, location=p_Location('musicxml.xsd', 5063, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'staff'), p_positiveInteger, scope=note, documentation='Staff assignment is only needed for music notated on multiple staves. Used by both notes and directions. Staff values are numbers, with 1 referring to the top-most staff in a part.', location=p_Location('musicxml.xsd', 5072, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'voice'), p_string, scope=note, location=p_Location('musicxml.xsd', 5108, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'duration'), positive_divisions, scope=note, documentation="Duration is a positive number specified in division units. This is the intended duration vs. notated duration (for instance, swing eighths vs. even eighths, or differences in dotted notes in Baroque-era music). Differences in duration specific to an interpretation or performance should use the note element's attack and release attributes.", location=p_Location('musicxml.xsd', 5267, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'chord'), empty, scope=note, documentation='The chord element indicates that this note is an additional chord tone with the preceding note. The duration of this note can be no longer than the preceding note. In MuseData, a missing duration indicates the same length as the previous note, but the MusicXML format requires a duration for chord notes too.', location=p_Location('musicxml.xsd', 5290, 3)))

note._AddElement(p_element(p_ExpandedName(None, 'pitch'), pitch, scope=note, location=p_Location('musicxml.xsd', 5296, 4)))

note._AddElement(p_element(p_ExpandedName(None, 'unpitched'), unpitched, scope=note, location=p_Location('musicxml.xsd', 5297, 4)))

note._AddElement(p_element(p_ExpandedName(None, 'rest'), rest, scope=note, location=p_Location('musicxml.xsd', 5298, 4)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5290, 3))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=2, metadata=p_Location('musicxml.xsd', 4205, 5))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5290, 3))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5290, 3))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=2, metadata=p_Location('musicxml.xsd', 4219, 5))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4222, 3))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5032, 3))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5033, 3))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 5034, 3))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4224, 3))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4225, 3))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4230, 3))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4231, 3))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4232, 3))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4233, 3))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4234, 3))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4235, 3))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=8, metadata=p_Location('musicxml.xsd', 4236, 3))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4237, 3))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=None, metadata=p_Location('musicxml.xsd', 4238, 3))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=p_Location('musicxml.xsd', 4239, 3))
    counters.add(cc_20)
    states = []
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'grace')), p_Location('musicxml.xsd', 4203, 5))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'chord')), p_Location('musicxml.xsd', 5290, 3))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'pitch')), p_Location('musicxml.xsd', 5296, 4))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'unpitched')), p_Location('musicxml.xsd', 5297, 4))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'rest')), p_Location('musicxml.xsd', 5298, 4))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'tie')), p_Location('musicxml.xsd', 4205, 5))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'cue')), p_Location('musicxml.xsd', 4208, 5))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'chord')), p_Location('musicxml.xsd', 5290, 3))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'pitch')), p_Location('musicxml.xsd', 5296, 4))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'unpitched')), p_Location('musicxml.xsd', 5297, 4))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'rest')), p_Location('musicxml.xsd', 5298, 4))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'duration')), p_Location('musicxml.xsd', 5267, 3))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'chord')), p_Location('musicxml.xsd', 5290, 3))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'pitch')), p_Location('musicxml.xsd', 5296, 4))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'unpitched')), p_Location('musicxml.xsd', 5297, 4))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'rest')), p_Location('musicxml.xsd', 5298, 4))
    st_15 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'duration')), p_Location('musicxml.xsd', 5267, 3))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'tie')), p_Location('musicxml.xsd', 4219, 5))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'instrument')), p_Location('musicxml.xsd', 4222, 3))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'footnote')), p_Location('musicxml.xsd', 5054, 3))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'level')), p_Location('musicxml.xsd', 5063, 3))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'voice')), p_Location('musicxml.xsd', 5108, 3))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'type')), p_Location('musicxml.xsd', 4224, 3))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'dot')), p_Location('musicxml.xsd', 4225, 3))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'accidental')), p_Location('musicxml.xsd', 4230, 3))
    st_24 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_24)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'time-modification')), p_Location('musicxml.xsd', 4231, 3))
    st_25 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_25)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'stem')), p_Location('musicxml.xsd', 4232, 3))
    st_26 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_26)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'notehead')), p_Location('musicxml.xsd', 4233, 3))
    st_27 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_27)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'notehead-text')), p_Location('musicxml.xsd', 4234, 3))
    st_28 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_28)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'staff')), p_Location('musicxml.xsd', 5072, 3))
    st_29 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_29)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'beam')), p_Location('musicxml.xsd', 4236, 3))
    st_30 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_30)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'notations')), p_Location('musicxml.xsd', 4237, 3))
    st_31 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_31)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'lyric')), p_Location('musicxml.xsd', 4238, 3))
    st_32 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_32)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = p_ElementUse(note._UseForTag(p_ExpandedName(None, 'play')), p_Location('musicxml.xsd', 4239, 3))
    st_33 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_33)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
         ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
         ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    transitions.append(fac.Transition(st_24, [
         ]))
    transitions.append(fac.Transition(st_25, [
         ]))
    transitions.append(fac.Transition(st_26, [
         ]))
    transitions.append(fac.Transition(st_27, [
         ]))
    transitions.append(fac.Transition(st_28, [
         ]))
    transitions.append(fac.Transition(st_29, [
         ]))
    transitions.append(fac.Transition(st_30, [
         ]))
    transitions.append(fac.Transition(st_31, [
         ]))
    transitions.append(fac.Transition(st_32, [
         ]))
    transitions.append(fac.Transition(st_33, [
         ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_23._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_24, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_24._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_25, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_25._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_26, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_26._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_27, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_27._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_28, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_28._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_29, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_29._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_30, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_30._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_31, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_31._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_32, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_32._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_33, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_33._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
note._Automaton = _BuildAutomaton_83()

