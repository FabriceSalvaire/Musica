#! /usr/bin/env python3

####################################################################################################
#
# Musica - A Music Theory Package for Python
# Copyright (C) 2017 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

import argparse
import importlib
import logging

from Musica.Tex.Document import Document
from Musica.Tex.Package import Package
from Musica.Tex.Tikz import TikzFigure

####################################################################################################

logger = logging.getLogger(__name__)

####################################################################################################

parser = argparse.ArgumentParser(description='Make Figure.')
parser.add_argument('module', metavar='Module',
                   help='Figure Module')
parser.add_argument('output', metavar='OutputFile',
                   help='output filename')
parser.add_argument('--kwargs',
                    default='',
                    help='Module kwargs')
parser.add_argument('--margin',
                    type=int, default=10,
                    help='Crop margins')
parser.add_argument('--dvisvgm',
                    action='store_true', default=False,
                    help='use dvisvgm')
parser.add_argument('--paper',
                    default='a4paper',
                    help='set paper')

args = parser.parse_args()

####################################################################################################

parts = args.module.split('.')
figure_module = importlib.import_module('.'.join(parts[:-1]))
figure_class = getattr(figure_module, parts[-1])

if args.dvisvgm:
    tex_document = Document(class_name='minimal', class_options=('dvisvgm',))
else:
    tex_document = Document(class_name='article', class_options=(args.paper,))

    tex_document.append_preambule(r'''
    \RequirePackage{luatex85} % for geometry
    ''')

    tex_document.packages.add(Package('geometry',
                                      'includeheadfoot',
                                      paper=args.paper,
                                      margin='1cm',
                                      # headsep='1cm',
                                      # footskip='1cm',
    ))

    tex_document.empty_page_style()

# TikzFigure.setup_externalisation(tex_document)

kwargs = eval('dict(' + args.kwargs + ')')
logger.info(kwargs)

figure = figure_class(**kwargs)
tex_document.append(figure)

# print(str(tex_document))
tex_document.generate(args.output, crop=True, margin=args.margin, dvisvgm=args.dvisvgm)
