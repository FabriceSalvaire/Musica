#! /usr/bin/env python3

####################################################################################################
#
# Musica - A Music Theory Package for Python
# Copyright (C) 2017 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

import argparse
import os

from Musica.Xml.Objectifier import XmlObjectifierFactory

####################################################################################################

parser = argparse.ArgumentParser(description='Convert MusicXML to Python')
parser.add_argument('input', metavar='InputFile',
                   help='input filename')
parser.add_argument('output', metavar='OutputFile',
                   help='output filename')
parser.add_argument('--add-write-xml',
                    action='store_true', default=False,
                    help='add code to write an xml file')

args = parser.parse_args()

####################################################################################################

# .mxl is a zip azchive

doctype = '<!DOCTYPE score-partwise PUBLIC "-//Recordare//DTD MusicXML 3.0 Partwise//EN" "http://www.musicxml.org/dtds/partwise.dtd">'
factory = XmlObjectifierFactory(doctype=doctype, node_hints=('Print', 'Rest'))

root = factory.parse(args.input)

basename, extension = os.path.splitext(args.output)

if extension == '.xml':
    root.write_xml(args.output, doctype=doctype)
elif extension == '.py':
    with open(args.output, 'w') as output:
        output.write('from MusicXML import *\n\n')
        output.write(root.to_python() + '\n')
        if args.add_write_xml:
            output.write('\n')
            template = "score_partwise_0.write_xml('{}', doctype='{}')\n"
            output.write(template.format(basename + '.xml', doctype))
