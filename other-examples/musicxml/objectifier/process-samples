#! /usr/bin/env python3

####################################################################################################
#
# Musica - A Music Theory Package for Python
# Copyright (C) 2017 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

from os import path
import os

from Musica.Xml.Objectifier import XmlObjectifierFactory

####################################################################################################

def walk_on_samples(samples_path):

    for root, dirs, files in os.walk(samples_path):
        for filename in files:
            if filename.endswith('.xml'):
                yield os.path.join(root, filename)

####################################################################################################

musica_path = os.path.realpath(os.path.join(path.dirname(__file__), '..', '..', '..'))
samples_path = os.path.join(musica_path, 'data', 'musicxml-samples', 'musescore-samples')
print(samples_path)

doctype = '<!DOCTYPE score-partwise PUBLIC "-//Recordare//DTD MusicXML 3.0 Partwise//EN" "http://www.musicxml.org/dtds/partwise.dtd">'
factory = XmlObjectifierFactory(doctype=doctype, node_hints=('Print', 'Rest'))

for path in walk_on_samples(samples_path):
    print(path)
    factory.parse(path)

with open('MusicXML.py', 'w') as output:
    output.write('from Musica.Xml.Objectifier import XmlObjectifierNode, XmlObjectifierLeaf\n')
    for cls in sorted(factory, key=lambda cls: cls.__name__):
        output.write('\n')
        output.write('#'*100)
        output.write('\n\n')
        output.write(str(cls.class_to_python()))
